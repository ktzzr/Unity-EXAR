#ifdef KEYWORD_SECTION
#define DIRECTIONAL
#define LIGHTPROBE_SH
#define SHADOWS_SCREEN
#define VERTEXLIGHT_ON
#endif

#ifdef VERTEX

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include Begin-------------------------
//
//////////////////////////////////////////////////////////////////////////

#ifndef INSIGHT3D_ANDROID
    #define INSIGHT3D_IOS
#endif

// You can use the buildin macro 'INSIGHT3D_ANDROID' or 'INSIGHT3D_IOS' to verify different platforms.

attribute vec3 a_position;
attribute vec2 a_texcoord0;
attribute vec2 a_texcoord1;
attribute vec4 a_normal;
attribute vec4 a_tangent;
#ifdef SKIN_SHADER
    attribute vec4 a_weight;
    attribute vec4 a_indices;
#endif
attribute vec4 a_color0;
attribute vec4 a_color1;

#define SHADER_MAX_BONE 50
uniform highp mat4 mat_bones[SHADER_MAX_BONE];

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;

uniform highp mat4 mat_WorldToShadow[4];

uniform vec4 u_projection_params;
uniform vec4 u_screen_params;

#ifndef _COMPATIBLE_UNITY_VS_
#define _COMPATIBLE_UNITY_VS_

#define in_TANGENT0 a_tangent
#define in_POSITION0 vec4( a_position, 1.0 )
#define in_NORMAL0 a_normal
#define in_COLOR0 a_color0
#define in_TEXCOORD0 a_texcoord0
#define in_TEXCOORD1 a_texcoord1

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define hlslcc_mtx4x4glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 u_light0_color

#define hlslcc_mtx4x4unity_WorldToShadow mat_WorldToShadow[0]

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#define _ProjectionParams u_projection_params
#define _ScreenParams u_screen_params

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include End---------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#ifdef FRAGMENT

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include Begin-----------------------
//
//////////////////////////////////////////////////////////////////////////

#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

#ifdef INSIGHT3D_ANDROID
    #extension GL_OES_EGL_image_external : require
#else
	#define INSIGHT3D_IOS
#endif

precision highp float;

uniform samplerCube t_skybox_texture_cube;
uniform sampler2D t_skybox_texture;

uniform samplerCube t_reflection_prob0_cube;
uniform vec4 u_reflection_prob0_min;
uniform vec4 u_reflection_prob0_max;
uniform vec4 u_reflection_prob0_pos;
uniform vec4 u_reflection_prob0_hdr;

uniform samplerCube t_reflection_prob1_cube;
uniform vec4 u_reflection_prob1_min;
uniform vec4 u_reflection_prob1_max;
uniform vec4 u_reflection_prob1_pos;
uniform vec4 u_reflection_prob1_hdr;

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;
uniform vec4 u_light0_shadow_data;

uniform highp mat4 mat_WorldToShadow[4];
uniform highp sampler2D t_shadowmap_texture;
uniform highp vec4 u_shadow_fade_center_and_type;

uniform vec4 u_projection_params;
uniform vec4 u_screen_params;

#ifndef _COMPATIBLE_UNITY_FS_
#define _COMPATIBLE_UNITY_FS_

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define hlslcc_mtx4x4glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 u_light0_color

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#define unity_SpecCube0 t_reflection_prob0_cube
#define unity_SpecCube0_BoxMax u_reflection_prob0_max
#define unity_SpecCube0_BoxMin u_reflection_prob0_min
#define unity_SpecCube0_ProbePosition u_reflection_prob0_pos
#define unity_SpecCube0_HDR vec4(4.594794, 1, 0, 0)

#define unity_SpecCube1 t_reflection_prob1_cube
#define unity_SpecCube1_BoxMax u_reflection_prob1_max
#define unity_SpecCube1_BoxMin u_reflection_prob1_min
#define unity_SpecCube1_ProbePosition u_reflection_prob1_pos
#define unity_SpecCube1_HDR u_reflection_prob1_hdr

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _ZBufferParams vec4(1,0,0,0)

#define hlslcc_mtx4x4unity_WorldToShadow mat_WorldToShadow[0]
#define _ShadowMapTexture t_shadowmap_texture
#define unity_ShadowFadeCenterAndType u_shadow_fade_center_and_type

// for forward pass
#define _LightShadowData u_light0_shadow_data

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#define _ProjectionParams u_projection_params
#define _ScreenParams u_screen_params

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include End-------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#if defined(DIRECTIONAL) && !defined(LIGHTPROBE_SH) && !defined(SHADOWS_SCREEN) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
float u_xlat11;
float u_xlat12;
float u_xlat22;
float u_xlat33;
float u_xlat34;
float u_xlat35;
float u_xlat36;
mediump float u_xlat16_36;
bool u_xlatb36;
mediump float u_xlat16_42;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat34 = (-_S1) + _S2;
    u_xlat34 = vs_COLOR0.x * u_xlat34 + _S1;
    u_xlat35 = (-u_xlat34) + 1.0;
    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);
    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb36){
        u_xlat16_36 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_36 = inversesqrt(u_xlat16_36);
        u_xlat5.xyz = vec3(u_xlat16_36) * u_xlat16_4.xyz;
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat6;
            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
            u_xlat6 = hlslcc_movcTemp;
        }
        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
        u_xlat36 = min(u_xlat6.z, u_xlat36);
        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
    } else {
        u_xlat5.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat35) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat35 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_4.x);
    u_xlat16_9.x = u_xlat10_4.w + -1.0;
    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat10_4.xyz * u_xlat16_9.xxx;
    u_xlat36 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat5.xyz = vec3(u_xlat36) * vs_TEXCOORD0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat36 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11 = u_xlat35 * u_xlat35;
    u_xlat22 = u_xlat36 * u_xlat36;
    u_xlat12 = u_xlat11 * u_xlat11 + -1.0;
    u_xlat22 = u_xlat22 * u_xlat12 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat12 = u_xlat35 * u_xlat35 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat22 * u_xlat0.x;
    u_xlat0.x = u_xlat11 / u_xlat0.x;
    u_xlat16_42 = u_xlat35 * u_xlat11;
    u_xlat16_42 = (-u_xlat16_42) * 0.280000001 + 1.0;
    u_xlat16_10 = u_xlat34 + 0.220916271;
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 0.220916301;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_10 = u_xlat16_10 + -0.220916301;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_10 + 0.220916301;
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat16_9.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && !defined(SHADOWS_SCREEN) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD2.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
mediump float u_xlat16_39;
bool u_xlatb39;
mediump float u_xlat16_42;
mediump float u_xlat16_47;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat37 = (-_S1) + _S2;
    u_xlat37 = vs_COLOR0.x * u_xlat37 + _S1;
    u_xlat38 = (-u_xlat37) + 1.0;
    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = vs_TEXCOORD0.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD2.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_5.xyz = exp2(u_xlat16_5.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb39){
        u_xlat16_39 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_39 = inversesqrt(u_xlat16_39);
        u_xlat7.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
        u_xlat39 = min(u_xlat8.z, u_xlat39);
        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat38) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat38 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_4.x);
    u_xlat16_6.x = u_xlat10_4.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * u_xlat16_6.xxx;
    u_xlat39 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat7.xyz = vec3(u_xlat39) * vs_TEXCOORD0.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12 = u_xlat38 * u_xlat38;
    u_xlat24 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = u_xlat12 * u_xlat12 + -1.0;
    u_xlat24 = u_xlat24 * u_xlat13 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat13 = u_xlat38 * u_xlat38 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat13;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat0.x = u_xlat12 / u_xlat0.x;
    u_xlat16_42 = u_xlat38 * u_xlat12;
    u_xlat16_42 = (-u_xlat16_42) * 0.280000001 + 1.0;
    u_xlat16_47 = u_xlat37 + 0.220916271;
    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.220916301, 0.220916301, 0.220916301) + u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + u_xlat16_11.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_42);
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_11.x = u_xlat16_47 + -0.220916301;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 0.220916301;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_42) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(SHADOWS_SCREEN) && !defined(LIGHTPROBE_SH) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
bvec3 u_xlatb9;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_15;
float u_xlat20;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat31 = (-_S1) + _S2;
    u_xlat31 = vs_COLOR0.x * u_xlat31 + _S1;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat32 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = (-u_xlat32) + u_xlat33;
    u_xlat32 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat32;
    u_xlat32 = u_xlat32 * _LightShadowData.z + _LightShadowData.w;
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat33 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat4.z<u_xlat33;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat33 = max(u_xlat33, _LightShadowData.x);
    u_xlat16_5.x = (-u_xlat33) + 1.0;
    u_xlat16_5.x = u_xlat32 * u_xlat16_5.x + u_xlat33;
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat16_15.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_15.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_15.xxx) + (-u_xlat1.xyz);
    u_xlat16_6.xyz = u_xlat16_5.xxx * _LightColor0.xyz;
    u_xlatb33 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb33){
        u_xlat16_33 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);
        u_xlat16_33 = inversesqrt(u_xlat16_33);
        u_xlat4.xyz = vec3(u_xlat16_33) * u_xlat16_15.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat33 = min(u_xlat7.y, u_xlat7.x);
        u_xlat33 = min(u_xlat7.z, u_xlat33);
        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat7.xyz;
    } else {
        u_xlat4.xyz = u_xlat16_15.xyz;
    }
    u_xlat16_5.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat16_5.x = u_xlat32 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_5.x);
    u_xlat16_5.x = u_xlat10_4.w + -1.0;
    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * u_xlat16_5.xxx;
    u_xlat33 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * vs_TEXCOORD0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10 = u_xlat32 * u_xlat32;
    u_xlat20 = u_xlat33 * u_xlat33;
    u_xlat11 = u_xlat10 * u_xlat10 + -1.0;
    u_xlat20 = u_xlat20 * u_xlat11 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat11 = u_xlat32 * u_xlat32 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat11;
    u_xlat0.x = u_xlat20 * u_xlat0.x;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_35 = u_xlat32 * u_xlat10;
    u_xlat16_35 = (-u_xlat16_35) * 0.280000001 + 1.0;
    u_xlat16_36 = u_xlat31 + 0.220916271;
    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 0.220916301;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = (-u_xlat1.x) + 1.0;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_6.x = u_xlat16_36 + -0.220916301;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x + 0.220916301;
    u_xlat16_5.xyz = vec3(u_xlat16_35) * u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && defined(SHADOWS_SCREEN) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat16_2 = u_xlat0.y * u_xlat0.y;
    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);
    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD2.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_18;
float u_xlat26;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
mediump float u_xlat16_42;
bool u_xlatb42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat40 = (-_S1) + _S2;
    u_xlat40 = vs_COLOR0.x * u_xlat40 + _S1;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = (-u_xlat41) + u_xlat42;
    u_xlat41 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat41;
    u_xlat41 = u_xlat41 * _LightShadowData.z + _LightShadowData.w;
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat42 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlatb42 = u_xlat4.z<u_xlat42;
    u_xlat42 = u_xlatb42 ? 1.0 : float(0.0);
    u_xlat42 = max(u_xlat42, _LightShadowData.x);
    u_xlat16_5 = (-u_xlat42) + 1.0;
    u_xlat16_5 = u_xlat41 * u_xlat16_5 + u_xlat42;
    u_xlat41 = (-u_xlat40) + 1.0;
    u_xlat16_18.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
    u_xlat16_18.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_18.xxx) + (-u_xlat1.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_5) * _LightColor0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD2.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb42){
        u_xlat16_42 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat8.xyz = vec3(u_xlat16_42) * u_xlat16_18.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat42 = min(u_xlat9.y, u_xlat9.x);
        u_xlat42 = min(u_xlat9.z, u_xlat42);
        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat16_18.xyz;
    }
    u_xlat16_5 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat16_5 = u_xlat41 * u_xlat16_5;
    u_xlat16_5 = u_xlat16_5 * 6.0;
    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_5);
    u_xlat16_45 = u_xlat10_5.w + -1.0;
    u_xlat16_45 = unity_SpecCube0_HDR.w * u_xlat16_45 + 1.0;
    u_xlat16_45 = u_xlat16_45 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_45);
    u_xlat42 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat8.xyz = vec3(u_xlat42) * vs_TEXCOORD0.xyz;
    u_xlat16_12.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13 = u_xlat41 * u_xlat41;
    u_xlat26 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = u_xlat13 * u_xlat13 + -1.0;
    u_xlat26 = u_xlat26 * u_xlat14 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat14 = u_xlat41 * u_xlat41 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = u_xlat26 * u_xlat0.x;
    u_xlat0.x = u_xlat13 / u_xlat0.x;
    u_xlat16_45 = u_xlat41 * u_xlat13;
    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
    u_xlat16_46 = u_xlat40 + 0.220916271;
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.220916301, 0.220916301, 0.220916301) + u_xlat16_12.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_12.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45);
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_7.x = u_xlat16_46 + -0.220916301;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x + 0.220916301;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(VERTEXLIGHT_ON) && !defined(LIGHTPROBE_SH) && !defined(SHADOWS_SCREEN)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_9;
mediump float u_xlat16_10;
float u_xlat11;
float u_xlat12;
float u_xlat22;
float u_xlat33;
float u_xlat34;
float u_xlat35;
float u_xlat36;
mediump float u_xlat16_36;
bool u_xlatb36;
mediump float u_xlat16_42;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat34 = (-_S1) + _S2;
    u_xlat34 = vs_COLOR0.x * u_xlat34 + _S1;
    u_xlat35 = (-u_xlat34) + 1.0;
    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);
    u_xlatb36 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb36){
        u_xlat16_36 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_36 = inversesqrt(u_xlat16_36);
        u_xlat5.xyz = vec3(u_xlat16_36) * u_xlat16_4.xyz;
        u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat6;
            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;
            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;
            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;
            u_xlat6 = hlslcc_movcTemp;
        }
        u_xlat36 = min(u_xlat6.y, u_xlat6.x);
        u_xlat36 = min(u_xlat6.z, u_xlat36);
        u_xlat6.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat36) + u_xlat6.xyz;
    } else {
        u_xlat5.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat35) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat35 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_4.x);
    u_xlat16_9.x = u_xlat10_4.w + -1.0;
    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;
    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;
    u_xlat16_9.xyz = u_xlat10_4.xyz * u_xlat16_9.xxx;
    u_xlat36 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat5.xyz = vec3(u_xlat36) * vs_TEXCOORD0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = max(u_xlat33, 0.00100000005);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat36 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat11 = u_xlat35 * u_xlat35;
    u_xlat22 = u_xlat36 * u_xlat36;
    u_xlat12 = u_xlat11 * u_xlat11 + -1.0;
    u_xlat22 = u_xlat22 * u_xlat12 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat12 = u_xlat35 * u_xlat35 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat22 * u_xlat0.x;
    u_xlat0.x = u_xlat11 / u_xlat0.x;
    u_xlat16_42 = u_xlat35 * u_xlat11;
    u_xlat16_42 = (-u_xlat16_42) * 0.280000001 + 1.0;
    u_xlat16_10 = u_xlat34 + 0.220916271;
    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 0.220916301;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_42);
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_10 = u_xlat16_10 + -0.220916301;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_10 + 0.220916301;
    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_9.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + u_xlat16_9.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && defined(VERTEXLIGHT_ON) && !defined(SHADOWS_SCREEN)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD0.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat13;
float u_xlat24;
float u_xlat36;
float u_xlat37;
float u_xlat38;
float u_xlat39;
mediump float u_xlat16_39;
bool u_xlatb39;
mediump float u_xlat16_42;
mediump float u_xlat16_47;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat37 = (-_S1) + _S2;
    u_xlat37 = vs_COLOR0.x * u_xlat37 + _S1;
    u_xlat38 = (-u_xlat37) + 1.0;
    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);
    u_xlat5.xyz = vs_TEXCOORD0.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD2.xyz;
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_5.xyz = log2(u_xlat16_6.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_5.xyz = exp2(u_xlat16_5.xyz);
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb39 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb39){
        u_xlat16_39 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_39 = inversesqrt(u_xlat16_39);
        u_xlat7.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat39 = min(u_xlat8.y, u_xlat8.x);
        u_xlat39 = min(u_xlat8.z, u_xlat39);
        u_xlat8.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat39) + u_xlat8.xyz;
    } else {
        u_xlat7.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat38) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat38 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_4.x);
    u_xlat16_6.x = u_xlat10_4.w + -1.0;
    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * u_xlat16_6.xxx;
    u_xlat39 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat7.xyz = vec3(u_xlat39) * vs_TEXCOORD0.xyz;
    u_xlat16_11.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = inversesqrt(u_xlat36);
    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat12 = u_xlat38 * u_xlat38;
    u_xlat24 = u_xlat2.x * u_xlat2.x;
    u_xlat13 = u_xlat12 * u_xlat12 + -1.0;
    u_xlat24 = u_xlat24 * u_xlat13 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat13 = u_xlat38 * u_xlat38 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat13;
    u_xlat0.x = u_xlat24 * u_xlat0.x;
    u_xlat0.x = u_xlat12 / u_xlat0.x;
    u_xlat16_42 = u_xlat38 * u_xlat12;
    u_xlat16_42 = (-u_xlat16_42) * 0.280000001 + 1.0;
    u_xlat16_47 = u_xlat37 + 0.220916271;
    u_xlat16_47 = clamp(u_xlat16_47, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.220916301, 0.220916301, 0.220916301) + u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_11.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + u_xlat16_11.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_42);
    u_xlat16_42 = (-u_xlat1.x) + 1.0;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_42;
    u_xlat16_11.x = u_xlat16_47 + -0.220916301;
    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 0.220916301;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_42) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(SHADOWS_SCREEN) && defined(VERTEXLIGHT_ON) && !defined(LIGHTPROBE_SH)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
vec3 u_xlat8;
bvec3 u_xlatb9;
float u_xlat10;
float u_xlat11;
mediump vec3 u_xlat16_15;
float u_xlat20;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat31 = (-_S1) + _S2;
    u_xlat31 = vs_COLOR0.x * u_xlat31 + _S1;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat32 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = (-u_xlat32) + u_xlat33;
    u_xlat32 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat32;
    u_xlat32 = u_xlat32 * _LightShadowData.z + _LightShadowData.w;
    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat33 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlatb33 = u_xlat4.z<u_xlat33;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat33 = max(u_xlat33, _LightShadowData.x);
    u_xlat16_5.x = (-u_xlat33) + 1.0;
    u_xlat16_5.x = u_xlat32 * u_xlat16_5.x + u_xlat33;
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat16_15.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_15.x = u_xlat16_15.x + u_xlat16_15.x;
    u_xlat16_15.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_15.xxx) + (-u_xlat1.xyz);
    u_xlat16_6.xyz = u_xlat16_5.xxx * _LightColor0.xyz;
    u_xlatb33 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb33){
        u_xlat16_33 = dot(u_xlat16_15.xyz, u_xlat16_15.xyz);
        u_xlat16_33 = inversesqrt(u_xlat16_33);
        u_xlat4.xyz = vec3(u_xlat16_33) * u_xlat16_15.xyz;
        u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat4.xyz;
        u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;
        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat33 = min(u_xlat7.y, u_xlat7.x);
        u_xlat33 = min(u_xlat7.z, u_xlat33);
        u_xlat7.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat33) + u_xlat7.xyz;
    } else {
        u_xlat4.xyz = u_xlat16_15.xyz;
    }
    u_xlat16_5.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat16_5.x = u_xlat32 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_5.x);
    u_xlat16_5.x = u_xlat10_4.w + -1.0;
    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * u_xlat16_5.xxx;
    u_xlat33 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat4.xyz = vec3(u_xlat33) * vs_TEXCOORD0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat33 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10 = u_xlat32 * u_xlat32;
    u_xlat20 = u_xlat33 * u_xlat33;
    u_xlat11 = u_xlat10 * u_xlat10 + -1.0;
    u_xlat20 = u_xlat20 * u_xlat11 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat11 = u_xlat32 * u_xlat32 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat11;
    u_xlat0.x = u_xlat20 * u_xlat0.x;
    u_xlat0.x = u_xlat10 / u_xlat0.x;
    u_xlat16_35 = u_xlat32 * u_xlat10;
    u_xlat16_35 = (-u_xlat16_35) * 0.280000001 + 1.0;
    u_xlat16_36 = u_xlat31 + 0.220916271;
    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * 0.220916301;
    u_xlat0.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729) + u_xlat0.xxx;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = (-u_xlat1.x) + 1.0;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_6.x = u_xlat16_36 + -0.220916301;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x + 0.220916301;
    u_xlat16_5.xyz = vec3(u_xlat16_35) * u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && defined(SHADOWS_SCREEN) && defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform vec4 _Offset;
uniform float _TimeScale;
uniform float _TimeOffset;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD5;
void main ()
{
    u_xlat0.x = _Time.y * _TimeScale + _TimeOffset;
    u_xlat0.x = sin(u_xlat0.x);
    u_xlat0.xyz = _Offset.xyz * u_xlat0.xxx + in_POSITION0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD0.xyz = u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_18;
float u_xlat26;
float u_xlat39;
float u_xlat40;
float u_xlat41;
float u_xlat42;
mediump float u_xlat16_42;
bool u_xlatb42;
mediump float u_xlat16_45;
mediump float u_xlat16_46;
uniform vec4 _Color0;
uniform vec4 _Color1;
uniform vec4 _Emission1;
uniform vec4 _Emission2;
uniform float _S1;
uniform float _S2;
varying highp vec3 vs_TEXCOORD0;
varying highp vec3 vs_TEXCOORD1;
varying mediump vec4 vs_COLOR0;
varying mediump vec3 vs_TEXCOORD2;
void main ()
{
    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-_Color0.xyz) + _Color1.xyz;
    u_xlat2.xyz = vs_COLOR0.xxx * u_xlat2.xyz + _Color0.xyz;
    u_xlat3.xyz = (-_Emission1.xyz) + _Emission2.xyz;
    u_xlat3.xyz = vs_COLOR0.xxx * u_xlat3.xyz + _Emission1.xyz;
    u_xlat40 = (-_S1) + _S2;
    u_xlat40 = vs_COLOR0.x * u_xlat40 + _S1;
    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat41 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat42 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = (-u_xlat41) + u_xlat42;
    u_xlat41 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat41;
    u_xlat41 = u_xlat41 * _LightShadowData.z + _LightShadowData.w;
    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
    u_xlat4.xyz = vs_TEXCOORD1.yyy * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat42 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;
    u_xlatb42 = u_xlat4.z<u_xlat42;
    u_xlat42 = u_xlatb42 ? 1.0 : float(0.0);
    u_xlat42 = max(u_xlat42, _LightShadowData.x);
    u_xlat16_5 = (-u_xlat42) + 1.0;
    u_xlat16_5 = u_xlat41 * u_xlat16_5 + u_xlat42;
    u_xlat41 = (-u_xlat40) + 1.0;
    u_xlat16_18.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
    u_xlat16_18.x = u_xlat16_18.x + u_xlat16_18.x;
    u_xlat16_18.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_18.xxx) + (-u_xlat1.xyz);
    u_xlat16_6.xyz = vec3(u_xlat16_5) * _LightColor0.xyz;
    u_xlat4.xyz = vs_TEXCOORD0.xyz;
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD2.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb42){
        u_xlat16_42 = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);
        u_xlat16_42 = inversesqrt(u_xlat16_42);
        u_xlat8.xyz = vec3(u_xlat16_42) * u_xlat16_18.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD1.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat42 = min(u_xlat9.y, u_xlat9.x);
        u_xlat42 = min(u_xlat9.z, u_xlat42);
        u_xlat9.xyz = vs_TEXCOORD1.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat42) + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat16_18.xyz;
    }
    u_xlat16_5 = (-u_xlat41) * 0.699999988 + 1.70000005;
    u_xlat16_5 = u_xlat41 * u_xlat16_5;
    u_xlat16_5 = u_xlat16_5 * 6.0;
    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_5);
    u_xlat16_45 = u_xlat10_5.w + -1.0;
    u_xlat16_45 = unity_SpecCube0_HDR.w * u_xlat16_45 + 1.0;
    u_xlat16_45 = u_xlat16_45 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_45);
    u_xlat42 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat8.xyz = vec3(u_xlat42) * vs_TEXCOORD0.xyz;
    u_xlat16_12.xyz = u_xlat2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat8.xyz, u_xlat0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13 = u_xlat41 * u_xlat41;
    u_xlat26 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = u_xlat13 * u_xlat13 + -1.0;
    u_xlat26 = u_xlat26 * u_xlat14 + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat14 = u_xlat41 * u_xlat41 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat14;
    u_xlat0.x = u_xlat26 * u_xlat0.x;
    u_xlat0.x = u_xlat13 / u_xlat0.x;
    u_xlat16_45 = u_xlat41 * u_xlat13;
    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
    u_xlat16_46 = u_xlat40 + 0.220916271;
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * vec3(0.220916301, 0.220916301, 0.220916301) + u_xlat16_12.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat0.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_12.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_45);
    u_xlat16_45 = (-u_xlat1.x) + 1.0;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
    u_xlat16_7.x = u_xlat16_46 + -0.220916301;
    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x + 0.220916301;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45) + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif


