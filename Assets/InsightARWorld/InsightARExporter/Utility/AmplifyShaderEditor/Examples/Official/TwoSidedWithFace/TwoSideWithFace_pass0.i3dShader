#ifdef KEYWORD_SECTION
#define DIRECTIONAL
#define LIGHTPROBE_SH
#define SHADOWS_SCREEN
#define VERTEXLIGHT_ON
#endif

#ifdef VERTEX

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include Begin-------------------------
//
//////////////////////////////////////////////////////////////////////////

#ifndef INSIGHT3D_ANDROID
    #define INSIGHT3D_IOS
#endif

// You can use the buildin macro 'INSIGHT3D_ANDROID' or 'INSIGHT3D_IOS' to verify different platforms.

attribute vec3 a_position;
attribute vec2 a_texcoord0;
attribute vec2 a_texcoord1;
attribute vec4 a_normal;
attribute vec4 a_tangent;
#ifdef SKIN_SHADER
    attribute vec4 a_weight;
    attribute vec4 a_indices;
#endif
attribute vec4 a_color0;
attribute vec4 a_color1;

#define SHADER_MAX_BONE 50
uniform highp mat4 mat_bones[SHADER_MAX_BONE];

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;

uniform highp mat4 mat_WorldToShadow[4];

uniform vec4 u_projection_params;
uniform vec4 u_screen_params;

#ifndef _COMPATIBLE_UNITY_VS_
#define _COMPATIBLE_UNITY_VS_

#define in_TANGENT0 a_tangent
#define in_POSITION0 vec4( a_position, 1.0 )
#define in_NORMAL0 a_normal
#define in_COLOR0 a_color0
#define in_TEXCOORD0 a_texcoord0
#define in_TEXCOORD1 a_texcoord1

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define hlslcc_mtx4x4glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 u_light0_color

#define hlslcc_mtx4x4unity_WorldToShadow mat_WorldToShadow[0]

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#define _ProjectionParams u_projection_params
#define _ScreenParams u_screen_params

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include End---------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#ifdef FRAGMENT

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include Begin-----------------------
//
//////////////////////////////////////////////////////////////////////////

#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

#ifdef INSIGHT3D_ANDROID
    #extension GL_OES_EGL_image_external : require
#else
	#define INSIGHT3D_IOS
#endif

precision highp float;

uniform samplerCube t_skybox_texture_cube;
uniform sampler2D t_skybox_texture;

uniform samplerCube t_reflection_prob0_cube;
uniform vec4 u_reflection_prob0_min;
uniform vec4 u_reflection_prob0_max;
uniform vec4 u_reflection_prob0_pos;
uniform vec4 u_reflection_prob0_hdr;

uniform samplerCube t_reflection_prob1_cube;
uniform vec4 u_reflection_prob1_min;
uniform vec4 u_reflection_prob1_max;
uniform vec4 u_reflection_prob1_pos;
uniform vec4 u_reflection_prob1_hdr;

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;
uniform vec4 u_light0_shadow_data;

uniform highp mat4 mat_WorldToShadow[4];
uniform highp sampler2D t_shadowmap_texture;
uniform highp vec4 u_shadow_fade_center_and_type;

uniform vec4 u_projection_params;
uniform vec4 u_screen_params;

#ifndef _COMPATIBLE_UNITY_FS_
#define _COMPATIBLE_UNITY_FS_

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define hlslcc_mtx4x4glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 u_light0_color

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#define unity_SpecCube0 t_reflection_prob0_cube
#define unity_SpecCube0_BoxMax u_reflection_prob0_max
#define unity_SpecCube0_BoxMin u_reflection_prob0_min
#define unity_SpecCube0_ProbePosition u_reflection_prob0_pos
#define unity_SpecCube0_HDR vec4(4.594794, 1, 0, 0)

#define unity_SpecCube1 t_reflection_prob1_cube
#define unity_SpecCube1_BoxMax u_reflection_prob1_max
#define unity_SpecCube1_BoxMin u_reflection_prob1_min
#define unity_SpecCube1_ProbePosition u_reflection_prob1_pos
#define unity_SpecCube1_HDR u_reflection_prob1_hdr

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _ZBufferParams vec4(1,0,0,0)

#define hlslcc_mtx4x4unity_WorldToShadow mat_WorldToShadow[0]
#define _ShadowMapTexture t_shadowmap_texture
#define unity_ShadowFadeCenterAndType u_shadow_fade_center_and_type

// for forward pass
#define _LightShadowData u_light0_shadow_data

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#define _ProjectionParams u_projection_params
#define _ScreenParams u_screen_params

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include End-------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#if defined(DIRECTIONAL) && !defined(LIGHTPROBE_SH) && !defined(SHADOWS_SCREEN) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
bool u_xlatb40;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
mediump float u_xlat16_44;
mediump float u_xlat16_50;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_40 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat40 = u_xlat10_40 + (-_Cutoff);
    u_xlatb40 = u_xlat40<0.0;
    if(u_xlatb40){discard;}
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat40 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz;
    u_xlat40 = (-_Roughness) + 1.0;
    u_xlat16_4.x = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat6.xyz * (-u_xlat16_4.xxx) + (-u_xlat2.xyz);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat16_41 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_41 = inversesqrt(u_xlat16_41);
        u_xlat7.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat40 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_4.x);
    u_xlat16_5.x = u_xlat10_4.w + -1.0;
    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * u_xlat16_5.xxx;
    u_xlat16_11.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_11.xyz = vec3(_Metallic) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat2.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13 = u_xlat40 * u_xlat40;
    u_xlat26 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat13 * u_xlat13 + -1.0;
    u_xlat26 = u_xlat26 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat40 * u_xlat40 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat26 * u_xlat0.x;
    u_xlat0.x = u_xlat13 / u_xlat0.x;
    u_xlat16_50 = u_xlat40 * u_xlat13;
    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
    u_xlat16_12.x = (-u_xlat16_44) + 1.0;
    u_xlat16_12.x = u_xlat16_12.x + _Roughness;
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_11.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat16_44) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_50);
    u_xlat16_44 = (-u_xlat14) + 1.0;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_12.xyz = (-u_xlat16_11.xyz) + u_xlat16_12.xxx;
    u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_12.xyz + u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && !defined(SHADOWS_SCREEN) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.z = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.z = u_xlat2.w;
    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat15;
float u_xlat28;
float u_xlat42;
float u_xlat43;
lowp float u_xlat10_43;
bool u_xlatb43;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
mediump float u_xlat16_49;
mediump float u_xlat16_54;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat2.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_43 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat43 = u_xlat10_43 + (-_Cutoff);
    u_xlatb43 = u_xlat43<0.0;
    if(u_xlatb43){discard;}
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat43 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat4.xyz = vec3(u_xlat43) * u_xlat6.xyz;
    u_xlat43 = (-_Roughness) + 1.0;
    u_xlat16_5.x = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat4.xyz * (-u_xlat16_5.xxx) + (-u_xlat2.xyz);
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat16_44 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
        u_xlat16_44 = inversesqrt(u_xlat16_44);
        u_xlat8.xyz = vec3(u_xlat16_44) * u_xlat16_5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat44 = min(u_xlat9.y, u_xlat9.x);
        u_xlat44 = min(u_xlat9.z, u_xlat44);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat44) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_5.xyz;
    }
    u_xlat16_5.x = (-u_xlat43) * 0.699999988 + 1.70000005;
    u_xlat16_5.x = u_xlat43 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * 6.0;
    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_5.x);
    u_xlat16_7.x = u_xlat10_5.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx;
    u_xlat16_12.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_12.xyz = vec3(_Metallic) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_49 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_13.xyz = u_xlat3.xyz * vec3(u_xlat16_49);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat42) + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat14 = u_xlat43 * u_xlat43;
    u_xlat28 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat14 * u_xlat14 + -1.0;
    u_xlat28 = u_xlat28 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat43 * u_xlat43 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat28 * u_xlat0.x;
    u_xlat0.x = u_xlat14 / u_xlat0.x;
    u_xlat16_54 = u_xlat43 * u_xlat14;
    u_xlat16_54 = (-u_xlat16_54) * 0.280000001 + 1.0;
    u_xlat16_49 = (-u_xlat16_49) + 1.0;
    u_xlat16_49 = u_xlat16_49 + _Roughness;
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_13.xyz = u_xlat16_6.xyz * u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat16_13.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_54);
    u_xlat16_54 = (-u_xlat15) + 1.0;
    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_49);
    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_12.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(SHADOWS_SCREEN) && !defined(LIGHTPROBE_SH) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
bool u_xlatb40;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_40 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat40 = u_xlat10_40 + (-_Cutoff);
    u_xlatb40 = u_xlat40<0.0;
    if(u_xlatb40){discard;}
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat1.xyz, u_xlat6.xyz);
    u_xlat6.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat6.xyz = vs_TEXCOORD2.www * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat41 = texture2D(_ShadowMapTexture, u_xlat6.xy).x;
    u_xlatb41 = u_xlat6.z<u_xlat41;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat41 = max(u_xlat41, _LightShadowData.x);
    u_xlat16_43 = (-u_xlat41) + 1.0;
    u_xlat16_43 = u_xlat40 * u_xlat16_43 + u_xlat41;
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat40 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz;
    u_xlat40 = (-_Roughness) + 1.0;
    u_xlat16_4.x = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat6.xyz * (-u_xlat16_4.xxx) + (-u_xlat2.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_43) * _LightColor0.xyz;
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat16_41 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_41 = inversesqrt(u_xlat16_41);
        u_xlat7.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat40 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_4.x);
    u_xlat16_44 = u_xlat10_4.w + -1.0;
    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
    u_xlat16_11.xyz = u_xlat10_4.xyz * vec3(u_xlat16_44);
    u_xlat16_12.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_12.xyz = vec3(_Metallic) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat2.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13 = u_xlat40 * u_xlat40;
    u_xlat26 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat13 * u_xlat13 + -1.0;
    u_xlat26 = u_xlat26 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat40 * u_xlat40 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat26 * u_xlat0.x;
    u_xlat0.x = u_xlat13 / u_xlat0.x;
    u_xlat16_50 = u_xlat40 * u_xlat13;
    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
    u_xlat16_51 = (-u_xlat16_44) + 1.0;
    u_xlat16_51 = u_xlat16_51 + _Roughness;
    u_xlat16_51 = clamp(u_xlat16_51, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_12.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat16_44) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50);
    u_xlat16_44 = (-u_xlat14) + 1.0;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_11.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_51);
    u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz + u_xlat16_12.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && defined(SHADOWS_SCREEN) && !defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
mediump float u_xlat16_4;
mediump vec3 u_xlat16_5;
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.z = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.z = u_xlat2.w;
    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
float u_xlat15;
float u_xlat16;
mediump vec3 u_xlat16_23;
float u_xlat30;
float u_xlat45;
float u_xlat46;
lowp float u_xlat10_46;
bool u_xlatb46;
float u_xlat47;
mediump float u_xlat16_47;
bool u_xlatb47;
mediump float u_xlat16_49;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat2.xyz = vec3(u_xlat45) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_46 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat46 = u_xlat10_46 + (-_Cutoff);
    u_xlatb46 = u_xlat46<0.0;
    if(u_xlatb46){discard;}
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat46 = dot(u_xlat1.xyz, u_xlat6.xyz);
    u_xlat6.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat47 = sqrt(u_xlat47);
    u_xlat47 = (-u_xlat46) + u_xlat47;
    u_xlat46 = unity_ShadowFadeCenterAndType.w * u_xlat47 + u_xlat46;
    u_xlat46 = u_xlat46 * _LightShadowData.z + _LightShadowData.w;
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
    u_xlat6.xyz = vs_TEXCOORD2.www * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat47 = texture2D(_ShadowMapTexture, u_xlat6.xy).x;
    u_xlatb47 = u_xlat6.z<u_xlat47;
    u_xlat47 = u_xlatb47 ? 1.0 : float(0.0);
    u_xlat47 = max(u_xlat47, _LightShadowData.x);
    u_xlat16_49 = (-u_xlat47) + 1.0;
    u_xlat16_49 = u_xlat46 * u_xlat16_49 + u_xlat47;
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat46 = (-_Roughness) + 1.0;
    u_xlat16_4.x = dot((-u_xlat2.xyz), u_xlat5.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat5.xyz * (-u_xlat16_4.xxx) + (-u_xlat2.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_49) * _LightColor0.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat16_47 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_47 = inversesqrt(u_xlat16_47);
        u_xlat9.xyz = vec3(u_xlat16_47) * u_xlat16_4.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat10;
            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat10 = hlslcc_movcTemp;
        }
        u_xlat47 = min(u_xlat10.y, u_xlat10.x);
        u_xlat47 = min(u_xlat10.z, u_xlat47);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat9.xyz * vec3(u_xlat47) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat46) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat46 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_4.x);
    u_xlat16_52 = u_xlat10_4.w + -1.0;
    u_xlat16_52 = unity_SpecCube0_HDR.w * u_xlat16_52 + 1.0;
    u_xlat16_52 = u_xlat16_52 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_52);
    u_xlat16_13.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_13.xyz = vec3(_Metallic) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_52 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_14.xyz = u_xlat3.xyz * vec3(u_xlat16_52);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = max(u_xlat45, 0.00100000005);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat45 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat15 = u_xlat46 * u_xlat46;
    u_xlat30 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat15 * u_xlat15 + -1.0;
    u_xlat30 = u_xlat30 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat46 * u_xlat46 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat30 * u_xlat0.x;
    u_xlat0.x = u_xlat15 / u_xlat0.x;
    u_xlat16_53 = u_xlat46 * u_xlat15;
    u_xlat16_53 = (-u_xlat16_53) * 0.280000001 + 1.0;
    u_xlat16_52 = (-u_xlat16_52) + 1.0;
    u_xlat16_52 = u_xlat16_52 + _Roughness;
    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_14.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_53);
    u_xlat16_8.x = (-u_xlat16) + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_23.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_52);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_23.xyz + u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(VERTEXLIGHT_ON) && !defined(LIGHTPROBE_SH) && !defined(SHADOWS_SCREEN)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
bool u_xlatb40;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
mediump float u_xlat16_44;
mediump float u_xlat16_50;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_40 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat40 = u_xlat10_40 + (-_Cutoff);
    u_xlatb40 = u_xlat40<0.0;
    if(u_xlatb40){discard;}
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat40 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz;
    u_xlat40 = (-_Roughness) + 1.0;
    u_xlat16_4.x = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat6.xyz * (-u_xlat16_4.xxx) + (-u_xlat2.xyz);
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat16_41 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_41 = inversesqrt(u_xlat16_41);
        u_xlat7.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat40 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_4.x);
    u_xlat16_5.x = u_xlat10_4.w + -1.0;
    u_xlat16_5.x = unity_SpecCube0_HDR.w * u_xlat16_5.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * unity_SpecCube0_HDR.x;
    u_xlat16_5.xyz = u_xlat10_4.xyz * u_xlat16_5.xxx;
    u_xlat16_11.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_11.xyz = vec3(_Metallic) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat2.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13 = u_xlat40 * u_xlat40;
    u_xlat26 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat13 * u_xlat13 + -1.0;
    u_xlat26 = u_xlat26 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat40 * u_xlat40 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat26 * u_xlat0.x;
    u_xlat0.x = u_xlat13 / u_xlat0.x;
    u_xlat16_50 = u_xlat40 * u_xlat13;
    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
    u_xlat16_12.x = (-u_xlat16_44) + 1.0;
    u_xlat16_12.x = u_xlat16_12.x + _Roughness;
    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_11.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat16_44) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_50);
    u_xlat16_44 = (-u_xlat14) + 1.0;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_12.xyz = (-u_xlat16_11.xyz) + u_xlat16_12.xxx;
    u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_12.xyz + u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && defined(VERTEXLIGHT_ON) && !defined(SHADOWS_SCREEN)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
float u_xlat22;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.w = u_xlat0.x;
    vs_TEXCOORD1.z = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat2.w;
    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
bvec3 u_xlatb11;
mediump vec3 u_xlat16_12;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat15;
float u_xlat28;
float u_xlat42;
float u_xlat43;
lowp float u_xlat10_43;
bool u_xlatb43;
float u_xlat44;
mediump float u_xlat16_44;
bool u_xlatb44;
mediump float u_xlat16_49;
mediump float u_xlat16_54;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat2.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_43 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat43 = u_xlat10_43 + (-_Cutoff);
    u_xlatb43 = u_xlat43<0.0;
    if(u_xlatb43){discard;}
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat43 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat4.xyz = vec3(u_xlat43) * u_xlat6.xyz;
    u_xlat43 = (-_Roughness) + 1.0;
    u_xlat16_5.x = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat4.xyz * (-u_xlat16_5.xxx) + (-u_xlat2.xyz);
    u_xlat4.w = 1.0;
    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb44){
        u_xlat16_44 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
        u_xlat16_44 = inversesqrt(u_xlat16_44);
        u_xlat8.xyz = vec3(u_xlat16_44) * u_xlat16_5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat44 = min(u_xlat9.y, u_xlat9.x);
        u_xlat44 = min(u_xlat9.z, u_xlat44);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat8.xyz * vec3(u_xlat44) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_5.xyz;
    }
    u_xlat16_5.x = (-u_xlat43) * 0.699999988 + 1.70000005;
    u_xlat16_5.x = u_xlat43 * u_xlat16_5.x;
    u_xlat16_5.x = u_xlat16_5.x * 6.0;
    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_5.x);
    u_xlat16_7.x = u_xlat10_5.w + -1.0;
    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx;
    u_xlat16_12.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_12.xyz = vec3(_Metallic) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_49 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_13.xyz = u_xlat3.xyz * vec3(u_xlat16_49);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat42) + _WorldSpaceLightPos0.xyz;
    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = inversesqrt(u_xlat42);
    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
    u_xlat42 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat14 = u_xlat43 * u_xlat43;
    u_xlat28 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat14 * u_xlat14 + -1.0;
    u_xlat28 = u_xlat28 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat43 * u_xlat43 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat28 * u_xlat0.x;
    u_xlat0.x = u_xlat14 / u_xlat0.x;
    u_xlat16_54 = u_xlat43 * u_xlat14;
    u_xlat16_54 = (-u_xlat16_54) * 0.280000001 + 1.0;
    u_xlat16_49 = (-u_xlat16_49) + 1.0;
    u_xlat16_49 = u_xlat16_49 + _Roughness;
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_12.xyz + u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
    u_xlat16_13.xyz = u_xlat16_6.xyz * u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat16_13.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_54);
    u_xlat16_54 = (-u_xlat15) + 1.0;
    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
    u_xlat16_54 = u_xlat16_54 * u_xlat16_54;
    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_49);
    u_xlat16_12.xyz = vec3(u_xlat16_54) * u_xlat16_13.xyz + u_xlat16_12.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_12.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(SHADOWS_SCREEN) && defined(VERTEXLIGHT_ON) && !defined(LIGHTPROBE_SH)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    vs_TEXCOORD1.w = u_xlat0.x;
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.x = u_xlat2.z;
    vs_TEXCOORD1.z = u_xlat1.y;
    vs_TEXCOORD2.x = u_xlat2.x;
    vs_TEXCOORD3.x = u_xlat2.y;
    vs_TEXCOORD2.z = u_xlat1.z;
    vs_TEXCOORD3.z = u_xlat1.x;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_12;
float u_xlat13;
float u_xlat14;
float u_xlat26;
float u_xlat39;
float u_xlat40;
lowp float u_xlat10_40;
bool u_xlatb40;
float u_xlat41;
mediump float u_xlat16_41;
bool u_xlatb41;
mediump float u_xlat16_43;
mediump float u_xlat16_44;
mediump float u_xlat16_50;
mediump float u_xlat16_51;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat2.xyz = vec3(u_xlat39) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_40 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat40 = u_xlat10_40 + (-_Cutoff);
    u_xlatb40 = u_xlat40<0.0;
    if(u_xlatb40){discard;}
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat40 = dot(u_xlat1.xyz, u_xlat6.xyz);
    u_xlat6.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat41 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat41 = sqrt(u_xlat41);
    u_xlat41 = (-u_xlat40) + u_xlat41;
    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
    u_xlat6.xyz = vs_TEXCOORD2.www * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat41 = texture2D(_ShadowMapTexture, u_xlat6.xy).x;
    u_xlatb41 = u_xlat6.z<u_xlat41;
    u_xlat41 = u_xlatb41 ? 1.0 : float(0.0);
    u_xlat41 = max(u_xlat41, _LightShadowData.x);
    u_xlat16_43 = (-u_xlat41) + 1.0;
    u_xlat16_43 = u_xlat40 * u_xlat16_43 + u_xlat41;
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat40 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat40 = inversesqrt(u_xlat40);
    u_xlat6.xyz = vec3(u_xlat40) * u_xlat6.xyz;
    u_xlat40 = (-_Roughness) + 1.0;
    u_xlat16_4.x = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat6.xyz * (-u_xlat16_4.xxx) + (-u_xlat2.xyz);
    u_xlat16_5.xyz = vec3(u_xlat16_43) * _LightColor0.xyz;
    u_xlatb41 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb41){
        u_xlat16_41 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_41 = inversesqrt(u_xlat16_41);
        u_xlat7.xyz = vec3(u_xlat16_41) * u_xlat16_4.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat41 = min(u_xlat8.y, u_xlat8.x);
        u_xlat41 = min(u_xlat8.z, u_xlat41);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat41) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat40) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat40 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_4.x);
    u_xlat16_44 = u_xlat10_4.w + -1.0;
    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
    u_xlat16_11.xyz = u_xlat10_4.xyz * vec3(u_xlat16_44);
    u_xlat16_12.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_12.xyz = vec3(_Metallic) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = inversesqrt(u_xlat39);
    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat2.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat13 = u_xlat40 * u_xlat40;
    u_xlat26 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat13 * u_xlat13 + -1.0;
    u_xlat26 = u_xlat26 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat40 * u_xlat40 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat26 * u_xlat0.x;
    u_xlat0.x = u_xlat13 / u_xlat0.x;
    u_xlat16_50 = u_xlat40 * u_xlat13;
    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
    u_xlat16_51 = (-u_xlat16_44) + 1.0;
    u_xlat16_51 = u_xlat16_51 + _Roughness;
    u_xlat16_51 = clamp(u_xlat16_51, 0.0, 1.0);
    u_xlat0.xyz = u_xlat16_12.xyz * u_xlat0.xxx;
    u_xlat0.xyz = u_xlat3.xyz * vec3(u_xlat16_44) + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50);
    u_xlat16_44 = (-u_xlat14) + 1.0;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_44 = u_xlat16_44 * u_xlat16_44;
    u_xlat16_11.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_51);
    u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz + u_xlat16_12.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_11.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif

#if defined(DIRECTIONAL) && defined(LIGHTPROBE_SH) && defined(SHADOWS_SCREEN) && defined(VERTEXLIGHT_ON)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
float u_xlat22;
uniform vec4 unity_4LightPosX0;
uniform vec4 unity_4LightPosY0;
uniform vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform vec4 _texcoord_ST;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
varying highp vec4 vs_TEXCOORD6;
varying highp vec4 vs_TEXCOORD7;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.x = u_xlat1.z;
    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    vs_TEXCOORD1.y = u_xlat3.x;
    vs_TEXCOORD1.w = u_xlat0.x;
    vs_TEXCOORD1.z = u_xlat2.x;
    vs_TEXCOORD2.x = u_xlat1.x;
    vs_TEXCOORD3.x = u_xlat1.y;
    vs_TEXCOORD2.y = u_xlat3.y;
    vs_TEXCOORD3.y = u_xlat3.z;
    vs_TEXCOORD2.w = u_xlat0.y;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.w = u_xlat0.z;
    vs_TEXCOORD3.z = u_xlat2.w;
    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif

#ifdef FRAGMENT

 
#ifdef GL_EXT_shader_texture_lod
 
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb12;
mediump vec3 u_xlat16_13;
mediump vec3 u_xlat16_14;
float u_xlat15;
float u_xlat16;
mediump vec3 u_xlat16_23;
float u_xlat30;
float u_xlat45;
float u_xlat46;
lowp float u_xlat10_46;
bool u_xlatb46;
float u_xlat47;
mediump float u_xlat16_47;
bool u_xlatb47;
mediump float u_xlat16_49;
mediump float u_xlat16_52;
mediump float u_xlat16_53;
uniform vec4 _Color0;
uniform float _Intensity;
uniform vec4 _FrontColor;
uniform vec4 _Color1;
uniform float _Float0;
uniform vec4 _BackColor;
uniform float _Metallic;
uniform float _Roughness;
uniform vec4 _Mask_ST;
uniform float _Cutoff;
uniform lowp sampler2D _FrontNormalMap;
uniform lowp sampler2D _BackNormalMap;
uniform lowp sampler2D _FrontAlbedo;
uniform lowp sampler2D _BackAlbedo;
uniform lowp sampler2D _Mask;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying mediump vec3 vs_TEXCOORD4;
void main ()
{
    u_xlat0.x = vs_TEXCOORD1.w;
    u_xlat0.y = vs_TEXCOORD2.w;
    u_xlat0.z = vs_TEXCOORD3.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat2.xyz = vec3(u_xlat45) * u_xlat1.xyz;
    u_xlat10_3.xyz = texture2D(_FrontNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3.xyz = texture2D(_BackNormalMap, vs_TEXCOORD0.xy).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat10_3.xyz = texture2D(_FrontAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _FrontColor.xyz;
    u_xlat3.xyz = _Color0.xyz * vec3(_Intensity) + u_xlat3.xyz;
    u_xlat10_6.xyz = texture2D(_BackAlbedo, vs_TEXCOORD0.xy).xyz;
    u_xlat6.xyz = u_xlat10_6.xyz * _BackColor.xyz;
    u_xlat6.xyz = _Color1.xyz * vec3(_Float0) + u_xlat6.xyz;
    u_xlat3.xyz = (int((gl_FrontFacing ? 1 : 0)) != 0) ? u_xlat3.xyz : u_xlat6.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;
    u_xlat10_46 = texture2D(_Mask, u_xlat6.xy).w;
    u_xlat46 = u_xlat10_46 + (-_Cutoff);
    u_xlatb46 = u_xlat46<0.0;
    if(u_xlatb46){discard;}
    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat46 = dot(u_xlat1.xyz, u_xlat6.xyz);
    u_xlat6.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat47 = sqrt(u_xlat47);
    u_xlat47 = (-u_xlat46) + u_xlat47;
    u_xlat46 = unity_ShadowFadeCenterAndType.w * u_xlat47 + u_xlat46;
    u_xlat46 = u_xlat46 * _LightShadowData.z + _LightShadowData.w;
    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
    u_xlat6.xyz = vs_TEXCOORD2.www * vec4(hlslcc_mtx4x4unity_WorldToShadow[1]).xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[0]).xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
    u_xlat6.xyz = vec4(hlslcc_mtx4x4unity_WorldToShadow[2]).xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz + vec4(hlslcc_mtx4x4unity_WorldToShadow[3]).xyz;
    u_xlat47 = texture2D(_ShadowMapTexture, u_xlat6.xy).x;
    u_xlatb47 = u_xlat6.z<u_xlat47;
    u_xlat47 = u_xlatb47 ? 1.0 : float(0.0);
    u_xlat47 = max(u_xlat47, _LightShadowData.x);
    u_xlat16_49 = (-u_xlat47) + 1.0;
    u_xlat16_49 = u_xlat46 * u_xlat16_49 + u_xlat47;
    u_xlat6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
    u_xlat6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat46 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat46 = inversesqrt(u_xlat46);
    u_xlat5.xyz = vec3(u_xlat46) * u_xlat6.xyz;
    u_xlat46 = (-_Roughness) + 1.0;
    u_xlat16_4.x = dot((-u_xlat2.xyz), u_xlat5.xyz);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat5.xyz * (-u_xlat16_4.xxx) + (-u_xlat2.xyz);
    u_xlat16_7.xyz = vec3(u_xlat16_49) * _LightColor0.xyz;
    u_xlat5.w = 1.0;
    u_xlat16_8.x = dot(unity_SHAr, u_xlat5);
    u_xlat16_8.y = dot(unity_SHAg, u_xlat5);
    u_xlat16_8.z = dot(unity_SHAb, u_xlat5);
    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD4.xyz;
    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_6.xyz = log2(u_xlat16_8.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat16_47 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
        u_xlat16_47 = inversesqrt(u_xlat16_47);
        u_xlat9.xyz = vec3(u_xlat16_47) * u_xlat16_4.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
        u_xlat11.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
        u_xlatb12.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat9.xyzx).xyz;
        {
            vec3 hlslcc_movcTemp = u_xlat10;
            hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
            hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
            hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
            u_xlat10 = hlslcc_movcTemp;
        }
        u_xlat47 = min(u_xlat10.y, u_xlat10.x);
        u_xlat47 = min(u_xlat10.z, u_xlat47);
        u_xlat0.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat0.xyz = u_xlat9.xyz * vec3(u_xlat47) + u_xlat0.xyz;
    } else {
        u_xlat0.xyz = u_xlat16_4.xyz;
    }
    u_xlat16_4.x = (-u_xlat46) * 0.699999988 + 1.70000005;
    u_xlat16_4.x = u_xlat46 * u_xlat16_4.x;
    u_xlat16_4.x = u_xlat16_4.x * 6.0;
    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_4.x);
    u_xlat16_52 = u_xlat10_4.w + -1.0;
    u_xlat16_52 = unity_SpecCube0_HDR.w * u_xlat16_52 + 1.0;
    u_xlat16_52 = u_xlat16_52 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_52);
    u_xlat16_13.xyz = u_xlat3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat16_13.xyz = vec3(_Metallic) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat16_52 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_14.xyz = u_xlat3.xyz * vec3(u_xlat16_52);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;
    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat45 = max(u_xlat45, 0.00100000005);
    u_xlat45 = inversesqrt(u_xlat45);
    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
    u_xlat45 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat16 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat15 = u_xlat46 * u_xlat46;
    u_xlat30 = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat15 * u_xlat15 + -1.0;
    u_xlat30 = u_xlat30 * u_xlat1.x + 1.00001001;
    u_xlat0.x = max(u_xlat0.x, 0.319999993);
    u_xlat1.x = u_xlat46 * u_xlat46 + 1.5;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat30 * u_xlat0.x;
    u_xlat0.x = u_xlat15 / u_xlat0.x;
    u_xlat16_53 = u_xlat46 * u_xlat15;
    u_xlat16_53 = (-u_xlat16_53) * 0.280000001 + 1.0;
    u_xlat16_52 = (-u_xlat16_52) + 1.0;
    u_xlat16_52 = u_xlat16_52 + _Roughness;
    u_xlat16_52 = clamp(u_xlat16_52, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_13.xyz + u_xlat16_14.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat0.xyz;
    u_xlat16_7.xyz = u_xlat16_6.xyz * u_xlat16_14.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_53);
    u_xlat16_8.x = (-u_xlat16) + 1.0;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
    u_xlat16_23.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_52);
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_23.xyz + u_xlat16_13.xyz;
    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat0.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
#endif


