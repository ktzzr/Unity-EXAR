#ifdef KEYWORD_SECTION
#define UNITY_UI_ALPHACLIP
#define UNITY_UI_CLIP_RECT
#endif

#ifdef VERTEX

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include Begin-------------------------
//
//////////////////////////////////////////////////////////////////////////

#ifndef INSIGHT3D_ANDROID
    #define INSIGHT3D_IOS
#endif

// You can use the buildin macro 'INSIGHT3D_ANDROID' or 'INSIGHT3D_IOS' to verify different platforms.

attribute vec3 a_position;
attribute vec2 a_texcoord0;
attribute vec2 a_texcoord1;
attribute vec4 a_normal;
attribute vec4 a_tangent;
#ifdef SKIN_SHADER
    attribute vec4 a_weight;
    attribute vec4 a_indices;
#endif
attribute vec4 a_color0;
attribute vec4 a_color1;

#define SHADER_MAX_BONE 50
uniform highp mat4 mat_bones[SHADER_MAX_BONE];

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;

uniform highp mat4 mat_WorldToShadow[4];

uniform vec4 u_projection_params;
uniform vec4 u_screen_params;

#ifndef _COMPATIBLE_UNITY_VS_
#define _COMPATIBLE_UNITY_VS_

#define in_TANGENT0 a_tangent
#define in_POSITION0 vec4( a_position, 1.0 )
#define in_NORMAL0 a_normal
#define in_COLOR0 a_color0
#define in_TEXCOORD0 a_texcoord0
#define in_TEXCOORD1 a_texcoord1

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define hlslcc_mtx4x4glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 u_light0_color

#define hlslcc_mtx4x4unity_WorldToShadow mat_WorldToShadow[0]

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#define _ProjectionParams u_projection_params
#define _ScreenParams u_screen_params

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include End---------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#ifdef FRAGMENT

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include Begin-----------------------
//
//////////////////////////////////////////////////////////////////////////

#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

#ifdef INSIGHT3D_ANDROID
    #extension GL_OES_EGL_image_external : require
#else
	#define INSIGHT3D_IOS
#endif

precision highp float;

uniform samplerCube t_skybox_texture_cube;
uniform sampler2D t_skybox_texture;

uniform samplerCube t_reflection_prob0_cube;
uniform vec4 u_reflection_prob0_min;
uniform vec4 u_reflection_prob0_max;
uniform vec4 u_reflection_prob0_pos;
uniform vec4 u_reflection_prob0_hdr;

uniform samplerCube t_reflection_prob1_cube;
uniform vec4 u_reflection_prob1_min;
uniform vec4 u_reflection_prob1_max;
uniform vec4 u_reflection_prob1_pos;
uniform vec4 u_reflection_prob1_hdr;

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;
uniform vec4 u_light0_shadow_data;

uniform highp mat4 mat_WorldToShadow[4];
uniform highp sampler2D t_shadowmap_texture;
uniform highp vec4 u_shadow_fade_center_and_type;

uniform vec4 u_projection_params;
uniform vec4 u_screen_params;

#ifndef _COMPATIBLE_UNITY_FS_
#define _COMPATIBLE_UNITY_FS_

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define hlslcc_mtx4x4glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 u_light0_color

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#define unity_SpecCube0 t_reflection_prob0_cube
#define unity_SpecCube0_BoxMax u_reflection_prob0_max
#define unity_SpecCube0_BoxMin u_reflection_prob0_min
#define unity_SpecCube0_ProbePosition u_reflection_prob0_pos
#define unity_SpecCube0_HDR vec4(4.594794, 1, 0, 0)

#define unity_SpecCube1 t_reflection_prob1_cube
#define unity_SpecCube1_BoxMax u_reflection_prob1_max
#define unity_SpecCube1_BoxMin u_reflection_prob1_min
#define unity_SpecCube1_ProbePosition u_reflection_prob1_pos
#define unity_SpecCube1_HDR u_reflection_prob1_hdr

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _ZBufferParams vec4(1,0,0,0)

#define hlslcc_mtx4x4unity_WorldToShadow mat_WorldToShadow[0]
#define _ShadowMapTexture t_shadowmap_texture
#define unity_ShadowFadeCenterAndType u_shadow_fade_center_and_type

// for forward pass
#define _LightShadowData u_light0_shadow_data

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#define _ProjectionParams u_projection_params
#define _ScreenParams u_screen_params

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include End-------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#if !defined(UNITY_UI_ALPHACLIP) && !defined(UNITY_UI_CLIP_RECT)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
uniform mediump vec4 _Color;
uniform vec4 _MainTex_ST;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif

#ifdef FRAGMENT

 

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
float u_xlat1;
bool u_xlatb2;
bool u_xlatb3;
float u_xlat4;
float u_xlat6;
bool u_xlatb6;
uniform mediump vec4 _TextureSampleAdd;
uniform float _FillAmount;
uniform lowp sampler2D _MainTex;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
void main ()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat4 = min(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat6 = max(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat4 = u_xlat6 * u_xlat4;
    u_xlat6 = u_xlat4 * u_xlat4;
    u_xlat1 = u_xlat6 * 0.0208350997 + -0.0851330012;
    u_xlat1 = u_xlat6 * u_xlat1 + 0.180141002;
    u_xlat1 = u_xlat6 * u_xlat1 + -0.330299497;
    u_xlat6 = u_xlat6 * u_xlat1 + 0.999866009;
    u_xlat1 = u_xlat6 * u_xlat4;
    u_xlatb3 = abs(u_xlat0.y)<abs(u_xlat0.x);
    u_xlat1 = u_xlat1 * -2.0 + 1.57079637;
    u_xlat1 = u_xlatb3 ? u_xlat1 : float(0.0);
    u_xlat4 = u_xlat4 * u_xlat6 + u_xlat1;
    u_xlatb6 = (-u_xlat0.y)<u_xlat0.y;
    u_xlat6 = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat4 = u_xlat6 + u_xlat4;
    u_xlat6 = min((-u_xlat0.y), (-u_xlat0.x));
    u_xlat0.x = max((-u_xlat0.y), (-u_xlat0.x));
    u_xlatb2 = u_xlat6<(-u_xlat6);
    u_xlatb0 = u_xlat0.x>=(-u_xlat0.x);
    u_xlatb0 = u_xlatb0 && u_xlatb2;
    u_xlat0.x = (u_xlatb0) ? (-u_xlat4) : u_xlat4;
    u_xlat0.x = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat0.x = u_xlat0.x + (-_FillAmount);
    u_xlatb0 = 9.99999997e-07<u_xlat0.x;
    if(u_xlatb0){discard;}
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;
    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
    SV_Target0 = u_xlat16_0;
    return;
}

#endif
#endif

#if defined(UNITY_UI_ALPHACLIP) && !defined(UNITY_UI_CLIP_RECT)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
uniform mediump vec4 _Color;
uniform vec4 _MainTex_ST;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif

#ifdef FRAGMENT

 

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump float u_xlat16_2;
bool u_xlatb3;
bool u_xlatb4;
float u_xlat6;
float u_xlat9;
bool u_xlatb9;
uniform mediump vec4 _TextureSampleAdd;
uniform float _FillAmount;
uniform lowp sampler2D _MainTex;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
void main ()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat6 = min(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat9 = max(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat6 = u_xlat9 * u_xlat6;
    u_xlat9 = u_xlat6 * u_xlat6;
    u_xlat1 = u_xlat9 * 0.0208350997 + -0.0851330012;
    u_xlat1 = u_xlat9 * u_xlat1 + 0.180141002;
    u_xlat1 = u_xlat9 * u_xlat1 + -0.330299497;
    u_xlat9 = u_xlat9 * u_xlat1 + 0.999866009;
    u_xlat1 = u_xlat9 * u_xlat6;
    u_xlatb4 = abs(u_xlat0.y)<abs(u_xlat0.x);
    u_xlat1 = u_xlat1 * -2.0 + 1.57079637;
    u_xlat1 = u_xlatb4 ? u_xlat1 : float(0.0);
    u_xlat6 = u_xlat6 * u_xlat9 + u_xlat1;
    u_xlatb9 = (-u_xlat0.y)<u_xlat0.y;
    u_xlat9 = u_xlatb9 ? -3.14159274 : float(0.0);
    u_xlat6 = u_xlat9 + u_xlat6;
    u_xlat9 = min((-u_xlat0.y), (-u_xlat0.x));
    u_xlat0.x = max((-u_xlat0.y), (-u_xlat0.x));
    u_xlatb3 = u_xlat9<(-u_xlat9);
    u_xlatb0 = u_xlat0.x>=(-u_xlat0.x);
    u_xlatb0 = u_xlatb0 && u_xlatb3;
    u_xlat0.x = (u_xlatb0) ? (-u_xlat6) : u_xlat6;
    u_xlat0.x = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat0.x = u_xlat0.x + (-_FillAmount);
    u_xlatb0 = 9.99999997e-07<u_xlat0.x;
    if(u_xlatb0){discard;}
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;
    u_xlat16_1 = u_xlat16_0 * vs_COLOR0;
    u_xlat16_2 = u_xlat16_0.w * vs_COLOR0.w + -0.00100000005;
    u_xlatb0 = u_xlat16_2<0.0;
    if(u_xlatb0){discard;}
    SV_Target0 = u_xlat16_1;
    return;
}

#endif
#endif

#if defined(UNITY_UI_CLIP_RECT) && !defined(UNITY_UI_ALPHACLIP)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
uniform mediump vec4 _Color;
uniform vec4 _MainTex_ST;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif

#ifdef FRAGMENT

 

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
bool u_xlatb2;
bool u_xlatb3;
float u_xlat4;
float u_xlat6;
bool u_xlatb6;
uniform mediump vec4 _TextureSampleAdd;
uniform vec4 _ClipRect;
uniform float _FillAmount;
uniform lowp sampler2D _MainTex;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat4 = min(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat6 = max(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat4 = u_xlat6 * u_xlat4;
    u_xlat6 = u_xlat4 * u_xlat4;
    u_xlat1.x = u_xlat6 * 0.0208350997 + -0.0851330012;
    u_xlat1.x = u_xlat6 * u_xlat1.x + 0.180141002;
    u_xlat1.x = u_xlat6 * u_xlat1.x + -0.330299497;
    u_xlat6 = u_xlat6 * u_xlat1.x + 0.999866009;
    u_xlat1.x = u_xlat6 * u_xlat4;
    u_xlatb3 = abs(u_xlat0.y)<abs(u_xlat0.x);
    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;
    u_xlat1.x = u_xlatb3 ? u_xlat1.x : float(0.0);
    u_xlat4 = u_xlat4 * u_xlat6 + u_xlat1.x;
    u_xlatb6 = (-u_xlat0.y)<u_xlat0.y;
    u_xlat6 = u_xlatb6 ? -3.14159274 : float(0.0);
    u_xlat4 = u_xlat6 + u_xlat4;
    u_xlat6 = min((-u_xlat0.y), (-u_xlat0.x));
    u_xlat0.x = max((-u_xlat0.y), (-u_xlat0.x));
    u_xlatb2 = u_xlat6<(-u_xlat6);
    u_xlatb0 = u_xlat0.x>=(-u_xlat0.x);
    u_xlatb0 = u_xlatb0 && u_xlatb2;
    u_xlat0.x = (u_xlatb0) ? (-u_xlat4) : u_xlat4;
    u_xlat0.x = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat0.x = u_xlat0.x + (-_FillAmount);
    u_xlatb0 = 9.99999997e-07<u_xlat0.x;
    if(u_xlatb0){discard;}
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;
    u_xlat0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat0.w = u_xlat0.w * u_xlat1.x;
    SV_Target0 = u_xlat0;
    return;
}

#endif
#endif

#if defined(UNITY_UI_ALPHACLIP) && defined(UNITY_UI_CLIP_RECT)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
uniform mediump vec4 _Color;
uniform vec4 _MainTex_ST;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif

#ifdef FRAGMENT

 

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_3;
bool u_xlatb4;
bool u_xlatb5;
float u_xlat8;
float u_xlat12;
bool u_xlatb12;
uniform mediump vec4 _TextureSampleAdd;
uniform vec4 _ClipRect;
uniform float _FillAmount;
uniform lowp sampler2D _MainTex;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat8 = min(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat12 = max(abs(u_xlat0.y), abs(u_xlat0.x));
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat8 = u_xlat12 * u_xlat8;
    u_xlat12 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat12 * 0.0208350997 + -0.0851330012;
    u_xlat1.x = u_xlat12 * u_xlat1.x + 0.180141002;
    u_xlat1.x = u_xlat12 * u_xlat1.x + -0.330299497;
    u_xlat12 = u_xlat12 * u_xlat1.x + 0.999866009;
    u_xlat1.x = u_xlat12 * u_xlat8;
    u_xlatb5 = abs(u_xlat0.y)<abs(u_xlat0.x);
    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;
    u_xlat1.x = u_xlatb5 ? u_xlat1.x : float(0.0);
    u_xlat8 = u_xlat8 * u_xlat12 + u_xlat1.x;
    u_xlatb12 = (-u_xlat0.y)<u_xlat0.y;
    u_xlat12 = u_xlatb12 ? -3.14159274 : float(0.0);
    u_xlat8 = u_xlat12 + u_xlat8;
    u_xlat12 = min((-u_xlat0.y), (-u_xlat0.x));
    u_xlat0.x = max((-u_xlat0.y), (-u_xlat0.x));
    u_xlatb4 = u_xlat12<(-u_xlat12);
    u_xlatb0 = u_xlat0.x>=(-u_xlat0.x);
    u_xlatb0 = u_xlatb0 && u_xlatb4;
    u_xlat0.x = (u_xlatb0) ? (-u_xlat8) : u_xlat8;
    u_xlat0.x = u_xlat0.x * 0.159154952 + 0.5;
    u_xlat0.x = u_xlat0.x + (-_FillAmount);
    u_xlatb0 = 9.99999997e-07<u_xlat0.x;
    if(u_xlatb0){discard;}
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + _TextureSampleAdd;
    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat2.w = u_xlat16_0.w * u_xlat1.x;
    u_xlat16_3 = u_xlat16_0.w * u_xlat1.x + -0.00100000005;
    u_xlatb12 = u_xlat16_3<0.0;
    if(u_xlatb12){discard;}
    u_xlat2.xyz = u_xlat16_0.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
#endif


