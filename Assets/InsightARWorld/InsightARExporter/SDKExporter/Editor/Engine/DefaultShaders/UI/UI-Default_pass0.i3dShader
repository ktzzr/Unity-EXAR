#ifdef KEYWORD_SECTION
#define UNITY_UI_ALPHACLIP
#endif

#ifdef VERTEX

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include Begin-------------------------
//
//////////////////////////////////////////////////////////////////////////

#ifndef INSIGHT3D_ANDROID
    #define INSIGHT3D_IOS
#endif

// You can use the buildin macro 'INSIGHT3D_ANDROID' or 'INSIGHT3D_IOS' to verify different platforms.

attribute vec3 a_position;
attribute vec2 a_texcoord0;
#ifdef SKIN_SHADER
    attribute vec4 a_weight;
    attribute vec4 a_indices;
#endif
attribute vec4 a_color0;

#define SHADER_MAX_BONE 50
uniform highp mat4 mat_bones[SHADER_MAX_BONE];

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_MatrixVP;

#ifndef _COMPATIBLE_UNITY_VS_
#define _COMPATIBLE_UNITY_VS_

#define in_POSITION0 vec4( a_position, 1.0 )
#define in_COLOR0 a_color0
#define in_TEXCOORD0 a_texcoord0


#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include End---------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#ifdef FRAGMENT

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include Begin-----------------------
//
//////////////////////////////////////////////////////////////////////////

#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

#ifdef INSIGHT3D_ANDROID
    #extension GL_OES_EGL_image_external : require
#else
	#define INSIGHT3D_IOS
#endif

precision highp float;

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_MatrixVP;

#ifndef _COMPATIBLE_UNITY_FS_
#define _COMPATIBLE_UNITY_FS_

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP


#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include End-------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#if !defined(UNITY_UI_ALPHACLIP)

#ifdef VERTEX
 

vec4 u_xlat0;
vec4 u_xlat1;
uniform mediump vec4 _Color;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif

#ifdef FRAGMENT

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
// vec4 u_xlat0;
// bvec4 u_xlatb0;
vec4 u_xlat1;
// mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
// uniform mediump vec4 _TextureSampleAdd;
// uniform vec4 _ClipRect;
uniform lowp sampler2D _MainTex;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_1 * vs_COLOR0;
    SV_Target0 = u_xlat1;
    return;
//     u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
//     u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
//     u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
//     u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
//     u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
//     u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
// ;
//     u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
//     u_xlat0.x = u_xlat0.y * u_xlat0.x;
//     u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
//     u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;
//     u_xlat1 = u_xlat16_1 * vs_COLOR0;
//     u_xlat1.w = u_xlat0.x * u_xlat1.w;
//     SV_Target0 = u_xlat1;
//     return;
}

#endif
#endif

#if defined(UNITY_UI_ALPHACLIP)

#ifdef VERTEX

 

vec4 u_xlat0;
vec4 u_xlat1;
uniform mediump vec4 _Color;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1 = in_POSITION0;
    return;
}

#endif

#ifdef FRAGMENT

 

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
// uniform mediump vec4 _TextureSampleAdd;
// uniform vec4 _ClipRect;
uniform lowp sampler2D _MainTex;
varying mediump vec4 vs_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
void main ()
{
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_1 * vs_COLOR0;
    SV_Target0 = u_xlat1;
    return;

//     u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
//     u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
//     u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
//     u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
//     u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
//     u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
// ;
//     u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
//     u_xlat0.x = u_xlat0.y * u_xlat0.x;
//     u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
//     u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;
//     u_xlat1 = u_xlat16_1 * vs_COLOR0;
//     u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;
//     u_xlat1.w = u_xlat0.x * u_xlat1.w;
//     SV_Target0 = u_xlat1;
//     u_xlatb0.x = u_xlat16_2<0.0;
//     if(u_xlatb0.x){discard;}
//     return;
}

#endif
#endif


