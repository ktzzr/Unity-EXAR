#ifdef KEYWORD_SECTION
#endif

#ifdef VERTEX

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include Begin-------------------------
//
//////////////////////////////////////////////////////////////////////////

#ifndef INSIGHT3D_ANDROID
    #define INSIGHT3D_IOS
#endif

// You can use the buildin macro 'INSIGHT3D_ANDROID' or 'INSIGHT3D_IOS' to verify different platforms.

attribute vec3 a_position;
#ifdef SKIN_SHADER
    attribute vec4 a_weight;
    attribute vec4 a_indices;
#endif

#define SHADER_MAX_BONE 50
uniform highp mat4 mat_bones[SHADER_MAX_BONE];

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_MatrixVP;

#ifndef _COMPATIBLE_UNITY_VS_
#define _COMPATIBLE_UNITY_VS_

#define in_POSITION0 vec4( a_position, 1.0 )

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP
#define hlslcc_mtx4x4unity_MatrixV mat_MatrixView
#define glstate_matrix_projection  mat_MatrixProjection

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include End---------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#ifdef FRAGMENT

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include Begin-----------------------
//
//////////////////////////////////////////////////////////////////////////

#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

#ifdef INSIGHT3D_ANDROID
    #extension GL_OES_EGL_image_external : require
#else
	#define INSIGHT3D_IOS
#endif

precision highp float;

uniform highp mat4 mat_ObjectToWorld;

#ifndef _COMPATIBLE_UNITY_FS_
#define _COMPATIBLE_UNITY_FS_

#ifndef SKIN_SHADER
    #define hlslcc_mtx4x4unity_ObjectToWorld mat_ObjectToWorld
#endif

#define hlslcc_mtx4x4unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define hlslcc_mtx4x4unity_MatrixVP mat_MatrixVP

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include End-------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif



#ifdef VERTEX

vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 _Color;
#define SV_Target0 gl_FragData[0]
void main()
{
    SV_Target0.xyz = _Color.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif

