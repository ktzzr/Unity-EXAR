// AUTO GENERATE OFF

#ifdef KEYWORD_SECTION
#endif

#ifdef VERTEX

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include Begin-------------------------
//
//////////////////////////////////////////////////////////////////////////

#ifndef INSIGHT3D_ANDROID
    #define INSIGHT3D_IOS
#endif

// You can use the buildin macro 'INSIGHT3D_ANDROID' or 'INSIGHT3D_IOS' to verify different platforms.

attribute vec3 a_position;
attribute vec2 a_texcoord0;
attribute vec2 a_texcoord1;
attribute vec4 a_normal;
attribute vec4 a_tangent;
#ifdef SKIN_SHADER
    attribute vec4 a_weight;
    attribute vec4 a_indices;
#endif
attribute vec4 a_color0;
attribute vec4 a_color1;

#define SHADER_MAX_BONE 50
uniform highp mat4 mat_bones[SHADER_MAX_BONE];

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
uniform vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;

uniform highp mat4 mat_WorldToShadow[4];
#ifndef _COMPATIBLE_UNITY_VS_
#define _COMPATIBLE_UNITY_VS_

#define _glesTANGENT a_tangent
#define _glesVertex vec4( a_position , 1.0 )
#define _glesNormal a_normal.xyz
#define _glesColor a_color0
#define _glesMultiTexCoord0 vec4( a_texcoord0.x, a_texcoord0.y, 0, 0 )
#define _glesMultiTexCoord1 vec4( a_texcoord1.x, a_texcoord1.y, 0, 0 )

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#ifndef SKIN_SHADER
    #define unity_ObjectToWorld mat_ObjectToWorld
#endif

#define unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define unity_MatrixVP mat_MatrixVP
#define unity_MatrixV mat_MatrixView
#define glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 (u_light0_color.rgb)

#define unity_WorldToShadow mat_WorldToShadow

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Vertex Include End---------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif

#ifdef FRAGMENT

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include Begin-----------------------
//
//////////////////////////////////////////////////////////////////////////

#extension GL_EXT_shader_texture_lod : enable
#ifdef INSIGHT3D_ANDROID
    #extension GL_OES_EGL_image_external : require
#else
	#define INSIGHT3D_IOS
#endif

precision highp float;

uniform samplerCube t_skybox_texture_cube;
uniform sampler2D t_skybox_texture;

uniform samplerCube t_reflection_prob0_cube;
uniform vec4 u_reflection_prob0_min;
uniform vec4 u_reflection_prob0_max;
uniform vec4 u_reflection_prob0_pos;
uniform vec4 u_reflection_prob0_hdr;

uniform samplerCube t_reflection_prob1_cube;
uniform vec4 u_reflection_prob1_min;
uniform vec4 u_reflection_prob1_max;
uniform vec4 u_reflection_prob1_pos;
uniform vec4 u_reflection_prob1_hdr;

uniform vec4 u_sphere_harmonic[7]; // Ar, Ag, Ab, Br, Bg, Bb, C

uniform highp mat4 mat_ObjectToWorld;
uniform highp mat4 mat_WorldToObject;
uniform highp mat4 mat_MatrixVP;
uniform highp mat4 mat_MatrixView;
uniform highp mat4 mat_MatrixProjection;
uniform vec3 u_world_space_camera_pos;

uniform vec4 u_cos_time;
vec4 u_sin_time;
uniform vec4 u_time;

uniform vec4 u_light0_pos_world;
uniform vec4 u_light0_color;
uniform vec4 u_light0_shadow_data;

uniform highp mat4 mat_WorldToShadow[4];
uniform highp sampler2D t_shadowmap_texture;
uniform highp vec4 u_shadow_fade_center_and_type;

#ifndef _COMPATIBLE_UNITY_FS_
#define _COMPATIBLE_UNITY_FS_

// USE: tmpvar_31 = impl_low_texture2DLodEXT (unity_SpecCube0, sVec3WorldToTexcoord(tmpvar_30.xyz), tmpvar_30.w);
lowp vec4 impl_low_texture2DLodEXT(lowp sampler2D sampler, highp vec2 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
    return texture2DLodEXT(sampler, coord, lod);
#else
    return texture2D(sampler, coord, lod);
#endif
}

lowp vec4 impl_low_textureCubeLodEXT(lowp samplerCube sampler, highp vec3 coord, mediump float lod)
{
#if defined(GL_EXT_shader_texture_lod)
    return textureCubeLodEXT(sampler, coord, lod);
#else
    return textureCube(sampler, coord, lod);
#endif
}

#ifndef SKIN_SHADER
    #define unity_ObjectToWorld mat_ObjectToWorld
#endif

#define unity_WorldToObject mat_WorldToObject
// defined in UnityShaderVaribles.cginc.
// w is usually 1.0, or -1.0 for odd-negative scale transforms
#define unity_WorldTransformParams vec4(0, 0, 0, 1)
#define unity_MatrixVP mat_MatrixVP
#define unity_MatrixV mat_MatrixView
#define glstate_matrix_projection  mat_MatrixProjection
#define _WorldSpaceCameraPos u_world_space_camera_pos

#define _WorldSpaceLightPos0 u_light0_pos_world
#define _LightColor0 (u_light0_color.rgb)

#define unity_SHAr (u_sphere_harmonic[0])
#define unity_SHAg (u_sphere_harmonic[1])
#define unity_SHAb (u_sphere_harmonic[2])
#define unity_SHBr (u_sphere_harmonic[3])
#define unity_SHBg (u_sphere_harmonic[4])
#define unity_SHBb (u_sphere_harmonic[5])
#define unity_SHC (u_sphere_harmonic[6])

#define unity_SpecCube0 t_reflection_prob0_cube
#define unity_SpecCube0_BoxMax u_reflection_prob0_max
#define unity_SpecCube0_BoxMin u_reflection_prob0_min
#define unity_SpecCube0_ProbePosition u_reflection_prob0_pos
#define unity_SpecCube0_HDR u_reflection_prob0_hdr

#define unity_SpecCube1 t_reflection_prob1_cube
#define unity_SpecCube1_BoxMax u_reflection_prob1_max
#define unity_SpecCube1_BoxMin u_reflection_prob1_min
#define unity_SpecCube1_ProbePosition u_reflection_prob1_pos
#define unity_SpecCube1_HDR u_reflection_prob1_hdr

#define _CosTime (u_cos_time)
#define _SinTime (u_sin_time)
#define _Time (u_time.wwww)

#define _ZBufferParams vec4(1,0,0,0)

#define unity_WorldToShadow mat_WorldToShadow
#define _ShadowMapTexture t_shadowmap_texture
#define unity_ShadowFadeCenterAndType u_shadow_fade_center_and_type

// for forward pass
#define _LightShadowData u_light0_shadow_data

// for shadow pass
#define unity_LightShadowBias vec4(0.005, 1, 0, 0)

#endif

//////////////////////////////////////////////////////////////////////////
//
// --------------------------Fragment Include End-------------------------
//
//////////////////////////////////////////////////////////////////////////

#endif



#ifdef VERTEX
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1 = vec4(0.0);
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = _glesVertex.xyz;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_1));
}

#endif

#ifdef FRAGMENT
#if defined( INSIGHT3D_ANDROID )
uniform samplerExternalOES _MainTex;
#elif defined( INSIGHT3D_IOS )
uniform sampler2D _MainTex;

#else
#error Please define INSIGHT3D_ANDROID or INSIGHT3D_IOS.
#endif

varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1 = vec4(0.0);
  highp vec2 tmpvar_2 = vec2(0.0);

     #if defined( INSIGHT3D_ANDROID )
        tmpvar_2 = (xlv_TEXCOORD0 * vec2(0.5, 1.0));
    #elif defined( INSIGHT3D_IOS )
        tmpvar_2 = (vec2( xlv_TEXCOORD0.x, 1.0 - xlv_TEXCOORD0.y) * vec2(0.5, 1.0));
	#else
	#error Please define INSIGHT3D_ANDROID or INSIGHT3D_IOS.
	#endif

  col_1.xyz = texture2D (_MainTex, tmpvar_2).xyz;
  highp vec2 P_3 = vec2(0.0);
  P_3 = (tmpvar_2 + vec2(0.5, 0.0));
  col_1.w = texture2D (_MainTex, P_3).x;
  gl_FragData[0] = col_1;
}

#endif


