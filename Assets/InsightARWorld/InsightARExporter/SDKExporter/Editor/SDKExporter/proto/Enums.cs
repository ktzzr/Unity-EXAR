// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoWorld {

  /// <summary>Holder for reflection information generated from enums.proto</summary>
  public static partial class EnumsReflection {

    #region Descriptor
    /// <summary>File descriptor for enums.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EnumsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtlbnVtcy5wcm90bxILcHJvdG9fd29ybGQqWAoJQ1VMTF9NT0RFEg4KCkNV",
            "TExfRlJPTlQQABINCglDVUxMX0JBQ0sQARINCglDVUxMX0JPVEgQAhINCglD",
            "VUxMX05PTkUQAxIOCgpDVUxMX0NPVU5UEAQq0AEKCkxJR0hUX01PREUSCgoG",
            "QUxXQVlTEAASEAoMRk9SV0FSRF9CQVNFEAESDwoLRk9SV0FSRF9BREQQAhIM",
            "CghERUZGRVJFRBADEhEKDVNIQURPV19DQVNURVIQBBIRCg1QUkVfUEFTU19C",
            "QVNFEAUSEgoOUFJFX1BBU1NfRklOQUwQBhISCg5NT1RJT05fVkVDVE9SUxAH",
            "EgoKBlZFUlRFWBAIEg4KClZFUlRFWF9MX00QCRIRCg1WRVJURVhfTE1SR0JN",
            "EAoSCAoETUVUQRALKuwCCgxCTEVORF9GQUNUT1ISFAoQQkxFTkRfRkFDVE9S",
            "X09ORRAAEhUKEUJMRU5EX0ZBQ1RPUl9aRVJPEAESGgoWQkxFTkRfRkFDVE9S",
            "X1NSQ19DT0xPUhACEhsKF0JMRU5EX0ZBQ1RPUl9ERVNUX0NPTE9SEAMSGgoW",
            "QkxFTkRfRkFDVE9SX1NSQ19BTFBIQRAEEhsKF0JMRU5EX0ZBQ1RPUl9ERVNU",
            "X0FMUEhBEAUSJAogQkxFTkRfRkFDVE9SX09ORV9NSU5VU19TUkNfQ09MT1IQ",
            "BhIlCiFCTEVORF9GQUNUT1JfT05FX01JTlVTX0RFU1RfQ09MT1IQBxIkCiBC",
            "TEVORF9GQUNUT1JfT05FX01JTlVTX1NSQ19BTFBIQRAIEiUKIUJMRU5EX0ZB",
            "Q1RPUl9PTkVfTUlOVVNfREVTVF9BTFBIQRAJEiMKH0JMRU5EX0ZBQ1RPUl9T",
            "UkNfQUxQSEFfU0FUVVJBVEUQCiqsAQoOQkxFTkRfT1BFUkFUT1ISFgoSQkxF",
            "TkRfT1BFUkFUT1JfT0ZGEAASFgoSQkxFTkRfT1BFUkFUT1JfQUREEAESFgoS",
            "QkxFTkRfT1BFUkFUT1JfU1VCEAISGgoWQkxFTkRfT1BFUkFUT1JfUkVWX1NV",
            "QhADEhoKFkJMRU5EX09QRVJBVE9SX01JTklNVU4QBBIaChZCTEVORF9PUEVS",
            "QVRPUl9NQVhJTVVOEAUq4QEKDlRFWFRVUkVfRk9STUFUEhoKFlRFWFRVUkVf",
            "Rk9STUFUX1VOS05PV04QABINCglGT1JNQVRfUjgQARIOCgpGT1JNQVRfUkc4",
            "EAISDwoLRk9STUFUX1JHQjgQAxIQCgxGT1JNQVRfUkdCQTgQBBIOCgpGT1JN",
            "QVRfUjMyEAUSDwoLRk9STUFUX1JHMzIQBhIQCgxGT1JNQVRfUkdCMzIQBxIR",
            "Cg1GT1JNQVRfUkdCQTMyEAgSDgoKRk9STUFUX1lVVhAJEgwKCEZPUk1BVF9Z",
            "EAoSDQoJRk9STUFUX1VWEAsq3QEKDFRFWFRVUkVfVFlQRRIYChRURVhUVVJF",
            "X1RZUEVfVU5LTk9XThAAEhUKEVRFWFRVUkVfVFlQRV9OT05FEAESFgoSVEVY",
            "VFVSRV9UWVBFX1RFWDJEEAISFgoSVEVYVFVSRV9UWVBFX1RFWDNEEAMSFQoR",
            "VEVYVFVSRV9UWVBFX0NVQkUQBBIcChhURVhUVVJFX1RZUEVfVEVYMkRfQVJS",
            "QVkQBRIhCh1URVhUVVJFX1RZUEVfUkVOREVSX1RFWFRVUkUyRBAGEhQKEFRF",
            "WFRVUkVfVFlQRV9BTlkQBypyChhSRU5ERVJfVEVYVFVSRV9TSVpFX1RZUEUS",
            "GgoWQUJTT0xVVEVfU0laRV9JTl9QSVhFTBAAEhYKElJFTEFUSVZFX1RPX1ND",
            "UkVFThABEiIKHlJFTkRFUl9URVhUVVJFX1NJWkVfVFlQRV9DT1VOVBACKloK",
            "DFRFWFRVUkVfV1JBUBIYChRURVhUVVJFX1dSQVBfVU5LTk9XThAAEg8KC1dS",
            "QVBfUkVQRUFUEAESDwoLV1JBUF9NSVJST1IQAhIOCgpXUkFQX0NMQU1QEAMq",
            "gQEKDlRFWFRVUkVfRklMVEVSEhoKFlRFWFRVUkVfRklMVEVSX1VOS05PV04Q",
            "ABIQCgxGSUxURVJfUE9JTlQQARITCg9GSUxURVJfQklMSU5FQVIQAhIUChBG",
            "SUxURVJfVFJJTElORUFSEAMSFgoSRklMVEVSX0FOSVNPVFJPUElDEAQqzgEK",
            "EVRFWFRVUkVfQ1VCRV9GQUNFEh0KGVRFWFRVUkVfQ1VCRV9GQUNFX1VOS05P",
            "V04QABIYChRDVUJFX0ZBQ0VfTkVHQVRJVkVfWBABEhgKFENVQkVfRkFDRV9O",
            "RUdBVElWRV9ZEAISGAoUQ1VCRV9GQUNFX05FR0FUSVZFX1oQAxIYChRDVUJF",
            "X0ZBQ0VfUE9TSVRJVkVfWBAEEhgKFENVQkVfRkFDRV9QT1NJVElWRV9ZEAUS",
            "GAoUQ1VCRV9GQUNFX1BPU0lUSVZFX1oQBiqOAQoOUFJJTUlUSVZFX1RZUEUS",
            "CAoETlVMTBAAEgoKBlBPSU5UUxABEgkKBUxJTkVTEAISDgoKTElORV9TVFJJ",
            "UBADEg0KCVRSSUFOR0xFUxAEEhIKDlRSSUFOR0xFX1NUUklQEAUSEAoMVFJJ",
            "QU5HTEVfRkFOEAYSCQoFUVVBRFMQBxILCgdERUZBVUxUEAgqvAEKCkRFUFRI",
            "X0ZVTkMSDQoJREVQVEhfT0ZGEAASDwoLREVQVEhfTkVWRVIQARIOCgpERVBU",
            "SF9MRVNTEAISDwoLREVQVEhfRVFVQUwQAxIQCgxERVBUSF9MRVFVQUwQBBIR",
            "Cg1ERVBUSF9HUkVBVEVSEAUSEwoPREVQVEhfTk9UX0VRVUFMEAYSEAoMREVQ",
            "VEhfR0VRVUFMEAcSEAoMREVQVEhfQUxXQVlTEAgSDwoLREVQVEhfQ09VTlQQ",
            "CSqdAQoMQ0FNRVJBX0NMRUFSEhwKGENBTUVSQV9DTEVBUl9DT0xPUl9ERVBU",
            "SBAAEhsKF0NBTUVSQV9DTEVBUl9ERVBUSF9PTkxZEAESGwoXQ0FNRVJBX0NM",
            "RUFSX0NPTE9SX09OTFkQAhIdChlDQU1FUkFfQ0xFQVJfRE9fTk9UX0NMRUFS",
            "EAMSFgoSQ0FNRVJBX0NMRUFSX0NPVU5UEAQqTwoKQkFDS0dST1VORBIVChFC",
            "QUNLR1JPVU5EX1NLWUJPWBAAEhQKEEJBQ0tHUk9VTkRfQ09MT1IQARIUChBC",
            "QUNLR1JPVU5EX0NPVU5UEAIqOgoLUEFTU19TT1VSQ0USFQoRUEFTU19TT1VS",
            "Q0VfU0NFTkUQABIUChBQQVNTX1NPVVJDRV9OT05FEAEqhgEKD1BIWVNJQ1Nf",
            "Q09NQklORRIbChdQSFlTSUNTX0NPTUJJTkVfQVZFUkFHRRAAEhsKF1BIWVNJ",
            "Q1NfQ09NQklORV9NSU5JTVVNEAESGwoXUEhZU0lDU19DT01CSU5FX01BWElN",
            "VU0QAhIcChhQSFlTSUNTX0NPTUJJTkVfTVVMVElQTFkQAyo2CgxXaW5kWm9u",
            "ZU1vZGUSEwoPV1pNX0RpcmVjdGlvbmFsEAASEQoNV1pNX1NwaGVyaWNhbBAB",
            "KpYBChBDT0xPUl9XUklURV9NQVNLEhQKEENPTE9SX1dSSVRFX05PTkUQABIV",
            "ChFDT0xPUl9XUklURV9BTFBIQRABEhQKEENPTE9SX1dSSVRFX0JMVUUQAhIV",
            "ChFDT0xPUl9XUklURV9HUkVFThAEEhMKD0NPTE9SX1dSSVRFX1JFRBAIEhMK",
            "D0NPTE9SX1dSSVRFX0FMTBAPKt0BCgpTVEVOQ0lMX09QEhMKD1NURU5DSUxf",
            "T1BfS0VFUBAAEhMKD1NURU5DSUxfT1BfWkVSTxABEhYKElNURU5DSUxfT1Bf",
            "UkVQTEFDRRACEhYKElNURU5DSUxfT1BfSU5DUlNBVBADEhYKElNURU5DSUxf",
            "T1BfREVDUlNBVBAEEhUKEVNURU5DSUxfT1BfSU5WRVJUEAUSFwoTU1RFTkNJ",
            "TF9PUF9JTkNSV1JBUBAGEhcKE1NURU5DSUxfT1BfREVDUldSQVAQBxIUChBT",
            "VEVOQ0lMX09QX0NPVU5UEAgqZgoUUmVmbGVjdGlvblByb2JlVXNhZ2USCwoH",
            "UlBVX09mZhAAEhMKD1JQVV9CbGVuZFByb2JlcxABEhwKGFJQVV9CbGVuZFBy",
            "b2Jlc0FuZFNreWJveBACEg4KClJQVV9TaW1wbGUQA0ICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtoWorld.CULL_MODE), typeof(global::ProtoWorld.LIGHT_MODE), typeof(global::ProtoWorld.BLEND_FACTOR), typeof(global::ProtoWorld.BLEND_OPERATOR), typeof(global::ProtoWorld.TEXTURE_FORMAT), typeof(global::ProtoWorld.TEXTURE_TYPE), typeof(global::ProtoWorld.RENDER_TEXTURE_SIZE_TYPE), typeof(global::ProtoWorld.TEXTURE_WRAP), typeof(global::ProtoWorld.TEXTURE_FILTER), typeof(global::ProtoWorld.TEXTURE_CUBE_FACE), typeof(global::ProtoWorld.PRIMITIVE_TYPE), typeof(global::ProtoWorld.DEPTH_FUNC), typeof(global::ProtoWorld.CAMERA_CLEAR), typeof(global::ProtoWorld.BACKGROUND), typeof(global::ProtoWorld.PASS_SOURCE), typeof(global::ProtoWorld.PHYSICS_COMBINE), typeof(global::ProtoWorld.WindZoneMode), typeof(global::ProtoWorld.COLOR_WRITE_MASK), typeof(global::ProtoWorld.STENCIL_OP), typeof(global::ProtoWorld.ReflectionProbeUsage), }, null));
    }
    #endregion

  }
  #region Enums
  public enum CULL_MODE {
    [pbr::OriginalName("CULL_FRONT")] CullFront = 0,
    [pbr::OriginalName("CULL_BACK")] CullBack = 1,
    [pbr::OriginalName("CULL_BOTH")] CullBoth = 2,
    [pbr::OriginalName("CULL_NONE")] CullNone = 3,
    [pbr::OriginalName("CULL_COUNT")] CullCount = 4,
  }

  public enum LIGHT_MODE {
    /// <summary>
    /// Always rendered; no lighting is applied.
    /// </summary>
    [pbr::OriginalName("ALWAYS")] Always = 0,
    /// <summary>
    /// Used in Forward rendering, ambient, main directional light, vertex/SH lights and lightmaps are applied.
    /// </summary>
    [pbr::OriginalName("FORWARD_BASE")] ForwardBase = 1,
    /// <summary>
    /// Used in Forward rendering; additive per-pixel lights are applied, one pass per light.
    /// </summary>
    [pbr::OriginalName("FORWARD_ADD")] ForwardAdd = 2,
    /// <summary>
    /// Used in Deferred Shading; renders g-buffer.
    /// </summary>
    [pbr::OriginalName("DEFFERED")] Deffered = 3,
    /// <summary>
    /// Renders object depth into the shadowmap or a depth texture.
    /// </summary>
    [pbr::OriginalName("SHADOW_CASTER")] ShadowCaster = 4,
    /// <summary>
    /// Used in legacy Deferred Lighting, renders normals and specular exponent.
    /// </summary>
    [pbr::OriginalName("PRE_PASS_BASE")] PrePassBase = 5,
    /// <summary>
    /// Used in legacy Deferred Lighting, renders final color by combining textures, lighting and emission.
    /// </summary>
    [pbr::OriginalName("PRE_PASS_FINAL")] PrePassFinal = 6,
    /// <summary>
    /// Used to calculate per-object motion vectors.
    /// </summary>
    [pbr::OriginalName("MOTION_VECTORS")] MotionVectors = 7,
    /// <summary>
    /// Legacy vertex-lit shader pass.
    /// </summary>
    [pbr::OriginalName("VERTEX")] Vertex = 8,
    /// <summary>
    /// Legacy vertex-lit shader pass, with mobile lightmaps.
    /// </summary>
    [pbr::OriginalName("VERTEX_L_M")] VertexLM = 9,
    /// <summary>
    /// Legacy vertex-lit shader pass, with desktop (RGBM) lightmaps.
    /// </summary>
    [pbr::OriginalName("VERTEX_LMRGBM")] VertexLmrgbm = 10,
    /// <summary>
    /// 	Shader pass used to generate the albedo and emissive values used as input to lightmapping.
    /// </summary>
    [pbr::OriginalName("META")] Meta = 11,
  }

  public enum BLEND_FACTOR {
    [pbr::OriginalName("BLEND_FACTOR_ONE")] One = 0,
    [pbr::OriginalName("BLEND_FACTOR_ZERO")] Zero = 1,
    [pbr::OriginalName("BLEND_FACTOR_SRC_COLOR")] SrcColor = 2,
    [pbr::OriginalName("BLEND_FACTOR_DEST_COLOR")] DestColor = 3,
    [pbr::OriginalName("BLEND_FACTOR_SRC_ALPHA")] SrcAlpha = 4,
    [pbr::OriginalName("BLEND_FACTOR_DEST_ALPHA")] DestAlpha = 5,
    [pbr::OriginalName("BLEND_FACTOR_ONE_MINUS_SRC_COLOR")] OneMinusSrcColor = 6,
    [pbr::OriginalName("BLEND_FACTOR_ONE_MINUS_DEST_COLOR")] OneMinusDestColor = 7,
    [pbr::OriginalName("BLEND_FACTOR_ONE_MINUS_SRC_ALPHA")] OneMinusSrcAlpha = 8,
    [pbr::OriginalName("BLEND_FACTOR_ONE_MINUS_DEST_ALPHA")] OneMinusDestAlpha = 9,
    [pbr::OriginalName("BLEND_FACTOR_SRC_ALPHA_SATURATE")] SrcAlphaSaturate = 10,
  }

  public enum BLEND_OPERATOR {
    [pbr::OriginalName("BLEND_OPERATOR_OFF")] Off = 0,
    [pbr::OriginalName("BLEND_OPERATOR_ADD")] Add = 1,
    [pbr::OriginalName("BLEND_OPERATOR_SUB")] Sub = 2,
    [pbr::OriginalName("BLEND_OPERATOR_REV_SUB")] RevSub = 3,
    [pbr::OriginalName("BLEND_OPERATOR_MINIMUN")] Minimun = 4,
    [pbr::OriginalName("BLEND_OPERATOR_MAXIMUN")] Maximun = 5,
  }

  public enum TEXTURE_FORMAT {
    [pbr::OriginalName("TEXTURE_FORMAT_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("FORMAT_R8")] FormatR8 = 1,
    [pbr::OriginalName("FORMAT_RG8")] FormatRg8 = 2,
    [pbr::OriginalName("FORMAT_RGB8")] FormatRgb8 = 3,
    [pbr::OriginalName("FORMAT_RGBA8")] FormatRgba8 = 4,
    [pbr::OriginalName("FORMAT_R32")] FormatR32 = 5,
    [pbr::OriginalName("FORMAT_RG32")] FormatRg32 = 6,
    [pbr::OriginalName("FORMAT_RGB32")] FormatRgb32 = 7,
    [pbr::OriginalName("FORMAT_RGBA32")] FormatRgba32 = 8,
    [pbr::OriginalName("FORMAT_YUV")] FormatYuv = 9,
    [pbr::OriginalName("FORMAT_Y")] FormatY = 10,
    [pbr::OriginalName("FORMAT_UV")] FormatUv = 11,
  }

  public enum TEXTURE_TYPE {
    [pbr::OriginalName("TEXTURE_TYPE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("TEXTURE_TYPE_NONE")] None = 1,
    [pbr::OriginalName("TEXTURE_TYPE_TEX2D")] Tex2D = 2,
    [pbr::OriginalName("TEXTURE_TYPE_TEX3D")] Tex3D = 3,
    [pbr::OriginalName("TEXTURE_TYPE_CUBE")] Cube = 4,
    [pbr::OriginalName("TEXTURE_TYPE_TEX2D_ARRAY")] Tex2DArray = 5,
    [pbr::OriginalName("TEXTURE_TYPE_RENDER_TEXTURE2D")] RenderTexture2D = 6,
    [pbr::OriginalName("TEXTURE_TYPE_ANY")] Any = 7,
  }

  public enum RENDER_TEXTURE_SIZE_TYPE {
    [pbr::OriginalName("ABSOLUTE_SIZE_IN_PIXEL")] AbsoluteSizeInPixel = 0,
    [pbr::OriginalName("RELATIVE_TO_SCREEN")] RelativeToScreen = 1,
    [pbr::OriginalName("RENDER_TEXTURE_SIZE_TYPE_COUNT")] Count = 2,
  }

  public enum TEXTURE_WRAP {
    [pbr::OriginalName("TEXTURE_WRAP_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("WRAP_REPEAT")] WrapRepeat = 1,
    [pbr::OriginalName("WRAP_MIRROR")] WrapMirror = 2,
    [pbr::OriginalName("WRAP_CLAMP")] WrapClamp = 3,
  }

  public enum TEXTURE_FILTER {
    [pbr::OriginalName("TEXTURE_FILTER_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("FILTER_POINT")] FilterPoint = 1,
    [pbr::OriginalName("FILTER_BILINEAR")] FilterBilinear = 2,
    [pbr::OriginalName("FILTER_TRILINEAR")] FilterTrilinear = 3,
    [pbr::OriginalName("FILTER_ANISOTROPIC")] FilterAnisotropic = 4,
  }

  public enum TEXTURE_CUBE_FACE {
    [pbr::OriginalName("TEXTURE_CUBE_FACE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("CUBE_FACE_NEGATIVE_X")] CubeFaceNegativeX = 1,
    [pbr::OriginalName("CUBE_FACE_NEGATIVE_Y")] CubeFaceNegativeY = 2,
    [pbr::OriginalName("CUBE_FACE_NEGATIVE_Z")] CubeFaceNegativeZ = 3,
    [pbr::OriginalName("CUBE_FACE_POSITIVE_X")] CubeFacePositiveX = 4,
    [pbr::OriginalName("CUBE_FACE_POSITIVE_Y")] CubeFacePositiveY = 5,
    [pbr::OriginalName("CUBE_FACE_POSITIVE_Z")] CubeFacePositiveZ = 6,
  }

  public enum PRIMITIVE_TYPE {
    [pbr::OriginalName("NULL")] Null = 0,
    [pbr::OriginalName("POINTS")] Points = 1,
    [pbr::OriginalName("LINES")] Lines = 2,
    [pbr::OriginalName("LINE_STRIP")] LineStrip = 3,
    [pbr::OriginalName("TRIANGLES")] Triangles = 4,
    [pbr::OriginalName("TRIANGLE_STRIP")] TriangleStrip = 5,
    [pbr::OriginalName("TRIANGLE_FAN")] TriangleFan = 6,
    [pbr::OriginalName("QUADS")] Quads = 7,
    [pbr::OriginalName("DEFAULT")] Default = 8,
  }

  public enum DEPTH_FUNC {
    [pbr::OriginalName("DEPTH_OFF")] DepthOff = 0,
    [pbr::OriginalName("DEPTH_NEVER")] DepthNever = 1,
    [pbr::OriginalName("DEPTH_LESS")] DepthLess = 2,
    [pbr::OriginalName("DEPTH_EQUAL")] DepthEqual = 3,
    [pbr::OriginalName("DEPTH_LEQUAL")] DepthLequal = 4,
    [pbr::OriginalName("DEPTH_GREATER")] DepthGreater = 5,
    [pbr::OriginalName("DEPTH_NOT_EQUAL")] DepthNotEqual = 6,
    [pbr::OriginalName("DEPTH_GEQUAL")] DepthGequal = 7,
    [pbr::OriginalName("DEPTH_ALWAYS")] DepthAlways = 8,
    [pbr::OriginalName("DEPTH_COUNT")] DepthCount = 9,
  }

  public enum CAMERA_CLEAR {
    [pbr::OriginalName("CAMERA_CLEAR_COLOR_DEPTH")] ColorDepth = 0,
    [pbr::OriginalName("CAMERA_CLEAR_DEPTH_ONLY")] DepthOnly = 1,
    [pbr::OriginalName("CAMERA_CLEAR_COLOR_ONLY")] ColorOnly = 2,
    [pbr::OriginalName("CAMERA_CLEAR_DO_NOT_CLEAR")] DoNotClear = 3,
    [pbr::OriginalName("CAMERA_CLEAR_COUNT")] Count = 4,
  }

  public enum BACKGROUND {
    [pbr::OriginalName("BACKGROUND_SKYBOX")] Skybox = 0,
    [pbr::OriginalName("BACKGROUND_COLOR")] Color = 1,
    [pbr::OriginalName("BACKGROUND_COUNT")] Count = 2,
  }

  public enum PASS_SOURCE {
    [pbr::OriginalName("PASS_SOURCE_SCENE")] Scene = 0,
    [pbr::OriginalName("PASS_SOURCE_NONE")] None = 1,
  }

  public enum PHYSICS_COMBINE {
    [pbr::OriginalName("PHYSICS_COMBINE_AVERAGE")] Average = 0,
    [pbr::OriginalName("PHYSICS_COMBINE_MINIMUM")] Minimum = 1,
    [pbr::OriginalName("PHYSICS_COMBINE_MAXIMUM")] Maximum = 2,
    [pbr::OriginalName("PHYSICS_COMBINE_MULTIPLY")] Multiply = 3,
  }

  public enum WindZoneMode {
    [pbr::OriginalName("WZM_Directional")] WzmDirectional = 0,
    [pbr::OriginalName("WZM_Spherical")] WzmSpherical = 1,
  }

  public enum COLOR_WRITE_MASK {
    [pbr::OriginalName("COLOR_WRITE_NONE")] ColorWriteNone = 0,
    [pbr::OriginalName("COLOR_WRITE_ALPHA")] ColorWriteAlpha = 1,
    [pbr::OriginalName("COLOR_WRITE_BLUE")] ColorWriteBlue = 2,
    [pbr::OriginalName("COLOR_WRITE_GREEN")] ColorWriteGreen = 4,
    [pbr::OriginalName("COLOR_WRITE_RED")] ColorWriteRed = 8,
    [pbr::OriginalName("COLOR_WRITE_ALL")] ColorWriteAll = 15,
  }

  public enum STENCIL_OP {
    [pbr::OriginalName("STENCIL_OP_KEEP")] Keep = 0,
    [pbr::OriginalName("STENCIL_OP_ZERO")] Zero = 1,
    [pbr::OriginalName("STENCIL_OP_REPLACE")] Replace = 2,
    [pbr::OriginalName("STENCIL_OP_INCRSAT")] Incrsat = 3,
    [pbr::OriginalName("STENCIL_OP_DECRSAT")] Decrsat = 4,
    [pbr::OriginalName("STENCIL_OP_INVERT")] Invert = 5,
    [pbr::OriginalName("STENCIL_OP_INCRWRAP")] Incrwrap = 6,
    [pbr::OriginalName("STENCIL_OP_DECRWRAP")] Decrwrap = 7,
    [pbr::OriginalName("STENCIL_OP_COUNT")] Count = 8,
  }

  public enum ReflectionProbeUsage {
    [pbr::OriginalName("RPU_Off")] RpuOff = 0,
    [pbr::OriginalName("RPU_BlendProbes")] RpuBlendProbes = 1,
    [pbr::OriginalName("RPU_BlendProbesAndSkybox")] RpuBlendProbesAndSkybox = 2,
    [pbr::OriginalName("RPU_Simple")] RpuSimple = 3,
  }

  #endregion

}

#endregion Designer generated code
