// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GUI.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoGui {

  /// <summary>Holder for reflection information generated from GUI.proto</summary>
  public static partial class GUIReflection {

    #region Descriptor
    /// <summary>File descriptor for GUI.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GUIReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglHVUkucHJvdG8SCXByb3RvX2d1aRoKbWF0aC5wcm90byKMAgoGU3ByaXRl",
            "EgwKBG5hbWUYASABKAkSFAoMdGV4dHVyZV9maWxlGGUgASgJEiEKBHJlY3QY",
            "yQEgASgLMhIucHJvdG9fbWF0aC5mbG9hdDQSJAoHcGFkZGluZxjKASABKAsy",
            "Ei5wcm90b19tYXRoLmZsb2F0NBIqCg1pbm5lcl91dl9yZWN0GMsBIAEoCzIS",
            "LnByb3RvX21hdGguZmxvYXQ0EioKDW91dGVyX3V2X3JlY3QYzAEgASgLMhIu",
            "cHJvdG9fbWF0aC5mbG9hdDQSIwoGYm9yZGVyGM0BIAEoCzISLnByb3RvX21h",
            "dGguZmxvYXQ0EhgKD3BpeGVsc19wZXJfdW5pdBjOASABKAIi4QMKBkNhbnZh",
            "cxIPCgdlbmFibGVkGGUgASgIEhQKC3JlbmRlcl9tb2RlGMkBIAEoDRIWCg1w",
            "aXhlbF9wZXJmZWN0GMoBIAEoCBITCgpzb3J0X29yZGVyGMsBIAEoDRIdChR3",
            "b3JsZF9jYW1lcmFfaGFzaF9pZBjNASABKAUSFwoOcGxhbmVfZGlzdGFuY2UY",
            "zgEgASgCEhkKEHNvcnRpbmdfbGF5ZXJfaWQYzwEgASgFEhsKEnNvcnRpbmdf",
            "bGF5ZXJfbmFtZRjQASABKAkSFgoNdWlfc2NhbGVfbW9kZRitAiABKA0SFQoM",
            "c2NhbGVfZmFjdG9yGK4CIAEoAhIxChRyZWZlcmVuY2VfcmVzb2x1dGlvbhiv",
            "AiABKAsyEi5wcm90b19tYXRoLmZsb2F0MhIaChFzY3JlZW5fbWF0Y2hfbW9k",
            "ZRiwAiABKA0SHgoVbWF0Y2hfd2lkdGhfb3JfaGVpZ2h0GLECIAEoAhIWCg1w",
            "aHlzaWNhbF91bml0GLICIAEoDRIcChNmYWxsYmFja19zY3JlZW5fZHBpGLMC",
            "IAEoAhIbChJkZWZhdWx0X3Nwcml0ZV9kcGkYtAIgASgCEiIKGXJlZmVyZW5j",
            "ZV9waXhlbHNfcGVyX3VuaXQYkQMgASgCIrgBCgVJbWFnZRIhCgZzcHJpdGUY",
            "ASABKAsyES5wcm90b19ndWkuU3ByaXRlEhIKCmltYWdlX3R5cGUYAyABKA0S",
            "FQoNbWF0ZXJpYWxfZmlsZRgEIAEoCRIhCgVjb2xvchgFIAEoCzISLnByb3Rv",
            "X21hdGguZmxvYXQ0EhcKD3ByZXNlcnZlX2FzcGVjdBgGIAEoCBITCgtmaWxs",
            "X2NlbnRlchgHIAEoCBIQCgdoYXNoX2lkGIUHIAEoBSKRAQoIUmF3SW1hZ2US",
            "FAoMdGV4dHVyZV9maWxlGAIgASgJEhUKDW1hdGVyaWFsX2ZpbGUYAyABKAkS",
            "IwoHdXZfcmVjdBgEIAEoCzISLnByb3RvX21hdGguZmxvYXQ0EiEKBWNvbG9y",
            "GAUgASgLMhIucHJvdG9fbWF0aC5mbG9hdDQSEAoHaGFzaF9pZBiFByABKAUi",
            "jwMKBFRleHQSDAoEdGV4dBgBIAEoCRIRCglmb250X25hbWUYZSABKAkSEQoJ",
            "Zm9udF9maWxlGGYgASgJEhMKCmZvbnRfc3R5bGUYyQEgASgNEhIKCWZvbnRf",
            "c2l6ZRjKASABKA0SFQoMbGluZV9zcGFjaW5nGMsBIAEoAhIaChFTdXBwb3J0",
            "X3JpY2hfdGV4dBjMASABKAgSEgoJYWxpZ25tZW50GK0CIAEoDRIaChFhbGln",
            "bl9ieV9nZW9tZXRyeRiuAiABKAgSGwoSaG9yaXpvbmFsX292ZXJmbG93GK8C",
            "IAEoCBIaChF2ZXJ0aWNhbF9vdmVyZmxvdxiwAiABKAgSIQoYcmVzaXplX3Rl",
            "eHRfZm9yX2Jlc3RfZml0GLECIAEoCBIiCgVjb2xvchiRAyABKAsyEi5wcm90",
            "b19tYXRoLmZsb2F0NBIWCg1tYXRlcmlhbF9maWxlGPUDIAEoCRIdChR1c2Vf",
            "Y3VzdG9tX2ZvbnRfbmFtZRjZBCABKAgSEAoHaGFzaF9pZBiFByABKAUiuAMK",
            "ClNlbGVjdGFibGUSFAoMaW50ZXJhY3RhYmxlGAEgASgIEhIKCnRyYW5zaXRp",
            "b24YAiABKA0SKQoMbm9ybWFsX2NvbG9yGMkBIAEoCzISLnByb3RvX21hdGgu",
            "ZmxvYXQ0Ei4KEWhpZ2hsaWdodGVkX2NvbG9yGMsBIAEoCzISLnByb3RvX21h",
            "dGguZmxvYXQ0EioKDXByZXNzZWRfY29sb3IYzAEgASgLMhIucHJvdG9fbWF0",
            "aC5mbG9hdDQSKwoOZGlzYWJsZWRfY29sb3IYzQEgASgLMhIucHJvdG9fbWF0",
            "aC5mbG9hdDQSGQoQY29sb3JfbXVsdGlwbGllchjOASABKAISFgoNZmFkZV9k",
            "dXJhdGlvbhjPASABKAISLgoSaGlnaGxpZ2h0ZWRfc3ByaXRlGNMBIAEoCzIR",
            "LnByb3RvX2d1aS5TcHJpdGUSKgoOcHJlc3NlZF9zcHJpdGUY1AEgASgLMhEu",
            "cHJvdG9fZ3VpLlNwcml0ZRIrCg9kaXNhYmxlZF9zcHJpdGUY1QEgASgLMhEu",
            "cHJvdG9fZ3VpLlNwcml0ZRIQCgdoYXNoX2lkGIUHIAEoBSLNAwoGQnV0dG9u",
            "EhQKDGludGVyYWN0YWJsZRgBIAEoCBISCgp0cmFuc2l0aW9uGAIgASgNEikK",
            "DG5vcm1hbF9jb2xvchjJASABKAsyEi5wcm90b19tYXRoLmZsb2F0NBIuChFo",
            "aWdobGlnaHRlZF9jb2xvchjLASABKAsyEi5wcm90b19tYXRoLmZsb2F0NBIq",
            "Cg1wcmVzc2VkX2NvbG9yGMwBIAEoCzISLnByb3RvX21hdGguZmxvYXQ0EisK",
            "DmRpc2FibGVkX2NvbG9yGM0BIAEoCzISLnByb3RvX21hdGguZmxvYXQ0EhkK",
            "EGNvbG9yX211bHRpcGxpZXIYzgEgASgCEhYKDWZhZGVfZHVyYXRpb24YzwEg",
            "ASgCEi4KEmhpZ2hsaWdodGVkX3Nwcml0ZRjTASABKAsyES5wcm90b19ndWku",
            "U3ByaXRlEioKDnByZXNzZWRfc3ByaXRlGNQBIAEoCzIRLnByb3RvX2d1aS5T",
            "cHJpdGUSKwoPZGlzYWJsZWRfc3ByaXRlGNUBIAEoCzIRLnByb3RvX2d1aS5T",
            "cHJpdGUSKQoKc2VsZWN0YWJsZRgDIAEoCzIVLnByb3RvX2d1aS5TZWxlY3Rh",
            "YmxlIswCCgpJbnB1dEZpZWxkEikKCnNlbGVjdGFibGUYAyABKAsyFS5wcm90",
            "b19ndWkuU2VsZWN0YWJsZRIYCg9jaGFyYWN0ZXJfbGltaXQYkQMgASgNEh0K",
            "FGNoYXJhY3Rlcl92YWxpZGF0aW9uGJIDIAEoDRIVCgxjb250ZW50X3R5cGUY",
            "kwMgASgNEhMKCmlucHV0X3R5cGUYlAMgASgNEhYKDWtleWJvYXJkX3R5cGUY",
            "lgMgASgNEhIKCWxpbmVfdHlwZRiXAyABKA0SEwoKbXVsdGlfbGluZRiYAyAB",
            "KAgSGwoScGxhY2Vob2xkZXJfaGFzaGlkGJkDIAEoBRIhChhzaG91bGRfaGlk",
            "ZV9tb2JpbGVfaW5wdXQYmgMgASgIEg0KBHRleHQYmwMgASgJEh4KFXRleHRf",
            "Y29tcG9uZW50X2hhc2hpZBicAyABKAUikQEKDkNhbnZhc1JlbmRlcmVyEiAK",
            "BWltYWdlGMkBIAEoCzIQLnByb3RvX2d1aS5JbWFnZRInCglyYXdfaW1hZ2UY",
            "ygEgASgLMhMucHJvdG9fZ3VpLlJhd0ltYWdlEh4KBHRleHQYywEgASgLMg8u",
            "cHJvdG9fZ3VpLlRleHQSFAoLbGF5ZXJfb3JkZXIYrQIgASgFQgJIA2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ProtoMath.MathReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.Sprite), global::ProtoGui.Sprite.Parser, new[]{ "Name", "TextureFile", "Rect", "Padding", "InnerUvRect", "OuterUvRect", "Border", "PixelsPerUnit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.Canvas), global::ProtoGui.Canvas.Parser, new[]{ "Enabled", "RenderMode", "PixelPerfect", "SortOrder", "WorldCameraHashId", "PlaneDistance", "SortingLayerId", "SortingLayerName", "UiScaleMode", "ScaleFactor", "ReferenceResolution", "ScreenMatchMode", "MatchWidthOrHeight", "PhysicalUnit", "FallbackScreenDpi", "DefaultSpriteDpi", "ReferencePixelsPerUnit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.Image), global::ProtoGui.Image.Parser, new[]{ "Sprite", "ImageType", "MaterialFile", "Color", "PreserveAspect", "FillCenter", "HashId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.RawImage), global::ProtoGui.RawImage.Parser, new[]{ "TextureFile", "MaterialFile", "UvRect", "Color", "HashId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.Text), global::ProtoGui.Text.Parser, new[]{ "Text_", "FontName", "FontFile", "FontStyle", "FontSize", "LineSpacing", "SupportRichText", "Alignment", "AlignByGeometry", "HorizonalOverflow", "VerticalOverflow", "ResizeTextForBestFit", "Color", "MaterialFile", "UseCustomFontName", "HashId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.Selectable), global::ProtoGui.Selectable.Parser, new[]{ "Interactable", "Transition", "NormalColor", "HighlightedColor", "PressedColor", "DisabledColor", "ColorMultiplier", "FadeDuration", "HighlightedSprite", "PressedSprite", "DisabledSprite", "HashId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.Button), global::ProtoGui.Button.Parser, new[]{ "Interactable", "Transition", "NormalColor", "HighlightedColor", "PressedColor", "DisabledColor", "ColorMultiplier", "FadeDuration", "HighlightedSprite", "PressedSprite", "DisabledSprite", "Selectable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.InputField), global::ProtoGui.InputField.Parser, new[]{ "Selectable", "CharacterLimit", "CharacterValidation", "ContentType", "InputType", "KeyboardType", "LineType", "MultiLine", "PlaceholderHashid", "ShouldHideMobileInput", "Text", "TextComponentHashid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoGui.CanvasRenderer), global::ProtoGui.CanvasRenderer.Parser, new[]{ "Image", "RawImage", "Text", "LayerOrder" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Sprite : pb::IMessage<Sprite> {
    private static readonly pb::MessageParser<Sprite> _parser = new pb::MessageParser<Sprite>(() => new Sprite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sprite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sprite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sprite(Sprite other) : this() {
      name_ = other.name_;
      textureFile_ = other.textureFile_;
      Rect = other.rect_ != null ? other.Rect.Clone() : null;
      Padding = other.padding_ != null ? other.Padding.Clone() : null;
      InnerUvRect = other.innerUvRect_ != null ? other.InnerUvRect.Clone() : null;
      OuterUvRect = other.outerUvRect_ != null ? other.OuterUvRect.Clone() : null;
      Border = other.border_ != null ? other.Border.Clone() : null;
      pixelsPerUnit_ = other.pixelsPerUnit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sprite Clone() {
      return new Sprite(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "texture_file" field.</summary>
    public const int TextureFileFieldNumber = 101;
    private string textureFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextureFile {
      get { return textureFile_; }
      set {
        textureFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rect" field.</summary>
    public const int RectFieldNumber = 201;
    private global::ProtoMath.float4 rect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Rect {
      get { return rect_; }
      set {
        rect_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 202;
    private global::ProtoMath.float4 padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    /// <summary>Field number for the "inner_uv_rect" field.</summary>
    public const int InnerUvRectFieldNumber = 203;
    private global::ProtoMath.float4 innerUvRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 InnerUvRect {
      get { return innerUvRect_; }
      set {
        innerUvRect_ = value;
      }
    }

    /// <summary>Field number for the "outer_uv_rect" field.</summary>
    public const int OuterUvRectFieldNumber = 204;
    private global::ProtoMath.float4 outerUvRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 OuterUvRect {
      get { return outerUvRect_; }
      set {
        outerUvRect_ = value;
      }
    }

    /// <summary>Field number for the "border" field.</summary>
    public const int BorderFieldNumber = 205;
    private global::ProtoMath.float4 border_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Border {
      get { return border_; }
      set {
        border_ = value;
      }
    }

    /// <summary>Field number for the "pixels_per_unit" field.</summary>
    public const int PixelsPerUnitFieldNumber = 206;
    private float pixelsPerUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PixelsPerUnit {
      get { return pixelsPerUnit_; }
      set {
        pixelsPerUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sprite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sprite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TextureFile != other.TextureFile) return false;
      if (!object.Equals(Rect, other.Rect)) return false;
      if (!object.Equals(Padding, other.Padding)) return false;
      if (!object.Equals(InnerUvRect, other.InnerUvRect)) return false;
      if (!object.Equals(OuterUvRect, other.OuterUvRect)) return false;
      if (!object.Equals(Border, other.Border)) return false;
      if (PixelsPerUnit != other.PixelsPerUnit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TextureFile.Length != 0) hash ^= TextureFile.GetHashCode();
      if (rect_ != null) hash ^= Rect.GetHashCode();
      if (padding_ != null) hash ^= Padding.GetHashCode();
      if (innerUvRect_ != null) hash ^= InnerUvRect.GetHashCode();
      if (outerUvRect_ != null) hash ^= OuterUvRect.GetHashCode();
      if (border_ != null) hash ^= Border.GetHashCode();
      if (PixelsPerUnit != 0F) hash ^= PixelsPerUnit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TextureFile.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(TextureFile);
      }
      if (rect_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Rect);
      }
      if (padding_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(Padding);
      }
      if (innerUvRect_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(InnerUvRect);
      }
      if (outerUvRect_ != null) {
        output.WriteRawTag(226, 12);
        output.WriteMessage(OuterUvRect);
      }
      if (border_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(Border);
      }
      if (PixelsPerUnit != 0F) {
        output.WriteRawTag(245, 12);
        output.WriteFloat(PixelsPerUnit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TextureFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TextureFile);
      }
      if (rect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rect);
      }
      if (padding_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Padding);
      }
      if (innerUvRect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InnerUvRect);
      }
      if (outerUvRect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OuterUvRect);
      }
      if (border_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Border);
      }
      if (PixelsPerUnit != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sprite other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TextureFile.Length != 0) {
        TextureFile = other.TextureFile;
      }
      if (other.rect_ != null) {
        if (rect_ == null) {
          rect_ = new global::ProtoMath.float4();
        }
        Rect.MergeFrom(other.Rect);
      }
      if (other.padding_ != null) {
        if (padding_ == null) {
          padding_ = new global::ProtoMath.float4();
        }
        Padding.MergeFrom(other.Padding);
      }
      if (other.innerUvRect_ != null) {
        if (innerUvRect_ == null) {
          innerUvRect_ = new global::ProtoMath.float4();
        }
        InnerUvRect.MergeFrom(other.InnerUvRect);
      }
      if (other.outerUvRect_ != null) {
        if (outerUvRect_ == null) {
          outerUvRect_ = new global::ProtoMath.float4();
        }
        OuterUvRect.MergeFrom(other.OuterUvRect);
      }
      if (other.border_ != null) {
        if (border_ == null) {
          border_ = new global::ProtoMath.float4();
        }
        Border.MergeFrom(other.Border);
      }
      if (other.PixelsPerUnit != 0F) {
        PixelsPerUnit = other.PixelsPerUnit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 810: {
            TextureFile = input.ReadString();
            break;
          }
          case 1610: {
            if (rect_ == null) {
              rect_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(rect_);
            break;
          }
          case 1618: {
            if (padding_ == null) {
              padding_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(padding_);
            break;
          }
          case 1626: {
            if (innerUvRect_ == null) {
              innerUvRect_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(innerUvRect_);
            break;
          }
          case 1634: {
            if (outerUvRect_ == null) {
              outerUvRect_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(outerUvRect_);
            break;
          }
          case 1642: {
            if (border_ == null) {
              border_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(border_);
            break;
          }
          case 1653: {
            PixelsPerUnit = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Canvas : pb::IMessage<Canvas> {
    private static readonly pb::MessageParser<Canvas> _parser = new pb::MessageParser<Canvas>(() => new Canvas());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Canvas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas(Canvas other) : this() {
      enabled_ = other.enabled_;
      renderMode_ = other.renderMode_;
      pixelPerfect_ = other.pixelPerfect_;
      sortOrder_ = other.sortOrder_;
      worldCameraHashId_ = other.worldCameraHashId_;
      planeDistance_ = other.planeDistance_;
      sortingLayerId_ = other.sortingLayerId_;
      sortingLayerName_ = other.sortingLayerName_;
      uiScaleMode_ = other.uiScaleMode_;
      scaleFactor_ = other.scaleFactor_;
      ReferenceResolution = other.referenceResolution_ != null ? other.ReferenceResolution.Clone() : null;
      screenMatchMode_ = other.screenMatchMode_;
      matchWidthOrHeight_ = other.matchWidthOrHeight_;
      physicalUnit_ = other.physicalUnit_;
      fallbackScreenDpi_ = other.fallbackScreenDpi_;
      defaultSpriteDpi_ = other.defaultSpriteDpi_;
      referencePixelsPerUnit_ = other.referencePixelsPerUnit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas Clone() {
      return new Canvas(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 101;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "render_mode" field.</summary>
    public const int RenderModeFieldNumber = 201;
    private uint renderMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RenderMode {
      get { return renderMode_; }
      set {
        renderMode_ = value;
      }
    }

    /// <summary>Field number for the "pixel_perfect" field.</summary>
    public const int PixelPerfectFieldNumber = 202;
    private bool pixelPerfect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PixelPerfect {
      get { return pixelPerfect_; }
      set {
        pixelPerfect_ = value;
      }
    }

    /// <summary>Field number for the "sort_order" field.</summary>
    public const int SortOrderFieldNumber = 203;
    private uint sortOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortOrder {
      get { return sortOrder_; }
      set {
        sortOrder_ = value;
      }
    }

    /// <summary>Field number for the "world_camera_hash_id" field.</summary>
    public const int WorldCameraHashIdFieldNumber = 205;
    private int worldCameraHashId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WorldCameraHashId {
      get { return worldCameraHashId_; }
      set {
        worldCameraHashId_ = value;
      }
    }

    /// <summary>Field number for the "plane_distance" field.</summary>
    public const int PlaneDistanceFieldNumber = 206;
    private float planeDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlaneDistance {
      get { return planeDistance_; }
      set {
        planeDistance_ = value;
      }
    }

    /// <summary>Field number for the "sorting_layer_id" field.</summary>
    public const int SortingLayerIdFieldNumber = 207;
    private int sortingLayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SortingLayerId {
      get { return sortingLayerId_; }
      set {
        sortingLayerId_ = value;
      }
    }

    /// <summary>Field number for the "sorting_layer_name" field.</summary>
    public const int SortingLayerNameFieldNumber = 208;
    private string sortingLayerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SortingLayerName {
      get { return sortingLayerName_; }
      set {
        sortingLayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ui_scale_mode" field.</summary>
    public const int UiScaleModeFieldNumber = 301;
    private uint uiScaleMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UiScaleMode {
      get { return uiScaleMode_; }
      set {
        uiScaleMode_ = value;
      }
    }

    /// <summary>Field number for the "scale_factor" field.</summary>
    public const int ScaleFactorFieldNumber = 302;
    private float scaleFactor_;
    /// <summary>
    /// constant pixel size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleFactor {
      get { return scaleFactor_; }
      set {
        scaleFactor_ = value;
      }
    }

    /// <summary>Field number for the "reference_resolution" field.</summary>
    public const int ReferenceResolutionFieldNumber = 303;
    private global::ProtoMath.float2 referenceResolution_;
    /// <summary>
    /// scale with screen size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 ReferenceResolution {
      get { return referenceResolution_; }
      set {
        referenceResolution_ = value;
      }
    }

    /// <summary>Field number for the "screen_match_mode" field.</summary>
    public const int ScreenMatchModeFieldNumber = 304;
    private uint screenMatchMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScreenMatchMode {
      get { return screenMatchMode_; }
      set {
        screenMatchMode_ = value;
      }
    }

    /// <summary>Field number for the "match_width_or_height" field.</summary>
    public const int MatchWidthOrHeightFieldNumber = 305;
    private float matchWidthOrHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MatchWidthOrHeight {
      get { return matchWidthOrHeight_; }
      set {
        matchWidthOrHeight_ = value;
      }
    }

    /// <summary>Field number for the "physical_unit" field.</summary>
    public const int PhysicalUnitFieldNumber = 306;
    private uint physicalUnit_;
    /// <summary>
    /// constant physical size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhysicalUnit {
      get { return physicalUnit_; }
      set {
        physicalUnit_ = value;
      }
    }

    /// <summary>Field number for the "fallback_screen_dpi" field.</summary>
    public const int FallbackScreenDpiFieldNumber = 307;
    private float fallbackScreenDpi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FallbackScreenDpi {
      get { return fallbackScreenDpi_; }
      set {
        fallbackScreenDpi_ = value;
      }
    }

    /// <summary>Field number for the "default_sprite_dpi" field.</summary>
    public const int DefaultSpriteDpiFieldNumber = 308;
    private float defaultSpriteDpi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultSpriteDpi {
      get { return defaultSpriteDpi_; }
      set {
        defaultSpriteDpi_ = value;
      }
    }

    /// <summary>Field number for the "reference_pixels_per_unit" field.</summary>
    public const int ReferencePixelsPerUnitFieldNumber = 401;
    private float referencePixelsPerUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReferencePixelsPerUnit {
      get { return referencePixelsPerUnit_; }
      set {
        referencePixelsPerUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Canvas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Canvas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (RenderMode != other.RenderMode) return false;
      if (PixelPerfect != other.PixelPerfect) return false;
      if (SortOrder != other.SortOrder) return false;
      if (WorldCameraHashId != other.WorldCameraHashId) return false;
      if (PlaneDistance != other.PlaneDistance) return false;
      if (SortingLayerId != other.SortingLayerId) return false;
      if (SortingLayerName != other.SortingLayerName) return false;
      if (UiScaleMode != other.UiScaleMode) return false;
      if (ScaleFactor != other.ScaleFactor) return false;
      if (!object.Equals(ReferenceResolution, other.ReferenceResolution)) return false;
      if (ScreenMatchMode != other.ScreenMatchMode) return false;
      if (MatchWidthOrHeight != other.MatchWidthOrHeight) return false;
      if (PhysicalUnit != other.PhysicalUnit) return false;
      if (FallbackScreenDpi != other.FallbackScreenDpi) return false;
      if (DefaultSpriteDpi != other.DefaultSpriteDpi) return false;
      if (ReferencePixelsPerUnit != other.ReferencePixelsPerUnit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (RenderMode != 0) hash ^= RenderMode.GetHashCode();
      if (PixelPerfect != false) hash ^= PixelPerfect.GetHashCode();
      if (SortOrder != 0) hash ^= SortOrder.GetHashCode();
      if (WorldCameraHashId != 0) hash ^= WorldCameraHashId.GetHashCode();
      if (PlaneDistance != 0F) hash ^= PlaneDistance.GetHashCode();
      if (SortingLayerId != 0) hash ^= SortingLayerId.GetHashCode();
      if (SortingLayerName.Length != 0) hash ^= SortingLayerName.GetHashCode();
      if (UiScaleMode != 0) hash ^= UiScaleMode.GetHashCode();
      if (ScaleFactor != 0F) hash ^= ScaleFactor.GetHashCode();
      if (referenceResolution_ != null) hash ^= ReferenceResolution.GetHashCode();
      if (ScreenMatchMode != 0) hash ^= ScreenMatchMode.GetHashCode();
      if (MatchWidthOrHeight != 0F) hash ^= MatchWidthOrHeight.GetHashCode();
      if (PhysicalUnit != 0) hash ^= PhysicalUnit.GetHashCode();
      if (FallbackScreenDpi != 0F) hash ^= FallbackScreenDpi.GetHashCode();
      if (DefaultSpriteDpi != 0F) hash ^= DefaultSpriteDpi.GetHashCode();
      if (ReferencePixelsPerUnit != 0F) hash ^= ReferencePixelsPerUnit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(168, 6);
        output.WriteBool(Enabled);
      }
      if (RenderMode != 0) {
        output.WriteRawTag(200, 12);
        output.WriteUInt32(RenderMode);
      }
      if (PixelPerfect != false) {
        output.WriteRawTag(208, 12);
        output.WriteBool(PixelPerfect);
      }
      if (SortOrder != 0) {
        output.WriteRawTag(216, 12);
        output.WriteUInt32(SortOrder);
      }
      if (WorldCameraHashId != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(WorldCameraHashId);
      }
      if (PlaneDistance != 0F) {
        output.WriteRawTag(245, 12);
        output.WriteFloat(PlaneDistance);
      }
      if (SortingLayerId != 0) {
        output.WriteRawTag(248, 12);
        output.WriteInt32(SortingLayerId);
      }
      if (SortingLayerName.Length != 0) {
        output.WriteRawTag(130, 13);
        output.WriteString(SortingLayerName);
      }
      if (UiScaleMode != 0) {
        output.WriteRawTag(232, 18);
        output.WriteUInt32(UiScaleMode);
      }
      if (ScaleFactor != 0F) {
        output.WriteRawTag(245, 18);
        output.WriteFloat(ScaleFactor);
      }
      if (referenceResolution_ != null) {
        output.WriteRawTag(250, 18);
        output.WriteMessage(ReferenceResolution);
      }
      if (ScreenMatchMode != 0) {
        output.WriteRawTag(128, 19);
        output.WriteUInt32(ScreenMatchMode);
      }
      if (MatchWidthOrHeight != 0F) {
        output.WriteRawTag(141, 19);
        output.WriteFloat(MatchWidthOrHeight);
      }
      if (PhysicalUnit != 0) {
        output.WriteRawTag(144, 19);
        output.WriteUInt32(PhysicalUnit);
      }
      if (FallbackScreenDpi != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(FallbackScreenDpi);
      }
      if (DefaultSpriteDpi != 0F) {
        output.WriteRawTag(165, 19);
        output.WriteFloat(DefaultSpriteDpi);
      }
      if (ReferencePixelsPerUnit != 0F) {
        output.WriteRawTag(141, 25);
        output.WriteFloat(ReferencePixelsPerUnit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (RenderMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RenderMode);
      }
      if (PixelPerfect != false) {
        size += 2 + 1;
      }
      if (SortOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SortOrder);
      }
      if (WorldCameraHashId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WorldCameraHashId);
      }
      if (PlaneDistance != 0F) {
        size += 2 + 4;
      }
      if (SortingLayerId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SortingLayerId);
      }
      if (SortingLayerName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SortingLayerName);
      }
      if (UiScaleMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UiScaleMode);
      }
      if (ScaleFactor != 0F) {
        size += 2 + 4;
      }
      if (referenceResolution_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReferenceResolution);
      }
      if (ScreenMatchMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ScreenMatchMode);
      }
      if (MatchWidthOrHeight != 0F) {
        size += 2 + 4;
      }
      if (PhysicalUnit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PhysicalUnit);
      }
      if (FallbackScreenDpi != 0F) {
        size += 2 + 4;
      }
      if (DefaultSpriteDpi != 0F) {
        size += 2 + 4;
      }
      if (ReferencePixelsPerUnit != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Canvas other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.RenderMode != 0) {
        RenderMode = other.RenderMode;
      }
      if (other.PixelPerfect != false) {
        PixelPerfect = other.PixelPerfect;
      }
      if (other.SortOrder != 0) {
        SortOrder = other.SortOrder;
      }
      if (other.WorldCameraHashId != 0) {
        WorldCameraHashId = other.WorldCameraHashId;
      }
      if (other.PlaneDistance != 0F) {
        PlaneDistance = other.PlaneDistance;
      }
      if (other.SortingLayerId != 0) {
        SortingLayerId = other.SortingLayerId;
      }
      if (other.SortingLayerName.Length != 0) {
        SortingLayerName = other.SortingLayerName;
      }
      if (other.UiScaleMode != 0) {
        UiScaleMode = other.UiScaleMode;
      }
      if (other.ScaleFactor != 0F) {
        ScaleFactor = other.ScaleFactor;
      }
      if (other.referenceResolution_ != null) {
        if (referenceResolution_ == null) {
          referenceResolution_ = new global::ProtoMath.float2();
        }
        ReferenceResolution.MergeFrom(other.ReferenceResolution);
      }
      if (other.ScreenMatchMode != 0) {
        ScreenMatchMode = other.ScreenMatchMode;
      }
      if (other.MatchWidthOrHeight != 0F) {
        MatchWidthOrHeight = other.MatchWidthOrHeight;
      }
      if (other.PhysicalUnit != 0) {
        PhysicalUnit = other.PhysicalUnit;
      }
      if (other.FallbackScreenDpi != 0F) {
        FallbackScreenDpi = other.FallbackScreenDpi;
      }
      if (other.DefaultSpriteDpi != 0F) {
        DefaultSpriteDpi = other.DefaultSpriteDpi;
      }
      if (other.ReferencePixelsPerUnit != 0F) {
        ReferencePixelsPerUnit = other.ReferencePixelsPerUnit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 808: {
            Enabled = input.ReadBool();
            break;
          }
          case 1608: {
            RenderMode = input.ReadUInt32();
            break;
          }
          case 1616: {
            PixelPerfect = input.ReadBool();
            break;
          }
          case 1624: {
            SortOrder = input.ReadUInt32();
            break;
          }
          case 1640: {
            WorldCameraHashId = input.ReadInt32();
            break;
          }
          case 1653: {
            PlaneDistance = input.ReadFloat();
            break;
          }
          case 1656: {
            SortingLayerId = input.ReadInt32();
            break;
          }
          case 1666: {
            SortingLayerName = input.ReadString();
            break;
          }
          case 2408: {
            UiScaleMode = input.ReadUInt32();
            break;
          }
          case 2421: {
            ScaleFactor = input.ReadFloat();
            break;
          }
          case 2426: {
            if (referenceResolution_ == null) {
              referenceResolution_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(referenceResolution_);
            break;
          }
          case 2432: {
            ScreenMatchMode = input.ReadUInt32();
            break;
          }
          case 2445: {
            MatchWidthOrHeight = input.ReadFloat();
            break;
          }
          case 2448: {
            PhysicalUnit = input.ReadUInt32();
            break;
          }
          case 2461: {
            FallbackScreenDpi = input.ReadFloat();
            break;
          }
          case 2469: {
            DefaultSpriteDpi = input.ReadFloat();
            break;
          }
          case 3213: {
            ReferencePixelsPerUnit = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Image : pb::IMessage<Image> {
    private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Image> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image(Image other) : this() {
      Sprite = other.sprite_ != null ? other.Sprite.Clone() : null;
      imageType_ = other.imageType_;
      materialFile_ = other.materialFile_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      preserveAspect_ = other.preserveAspect_;
      fillCenter_ = other.fillCenter_;
      hashId_ = other.hashId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Image Clone() {
      return new Image(this);
    }

    /// <summary>Field number for the "sprite" field.</summary>
    public const int SpriteFieldNumber = 1;
    private global::ProtoGui.Sprite sprite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite Sprite {
      get { return sprite_; }
      set {
        sprite_ = value;
      }
    }

    /// <summary>Field number for the "image_type" field.</summary>
    public const int ImageTypeFieldNumber = 3;
    private uint imageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageType {
      get { return imageType_; }
      set {
        imageType_ = value;
      }
    }

    /// <summary>Field number for the "material_file" field.</summary>
    public const int MaterialFileFieldNumber = 4;
    private string materialFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaterialFile {
      get { return materialFile_; }
      set {
        materialFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private global::ProtoMath.float4 color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "preserve_aspect" field.</summary>
    public const int PreserveAspectFieldNumber = 6;
    private bool preserveAspect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreserveAspect {
      get { return preserveAspect_; }
      set {
        preserveAspect_ = value;
      }
    }

    /// <summary>Field number for the "fill_center" field.</summary>
    public const int FillCenterFieldNumber = 7;
    private bool fillCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FillCenter {
      get { return fillCenter_; }
      set {
        fillCenter_ = value;
      }
    }

    /// <summary>Field number for the "hash_id" field.</summary>
    public const int HashIdFieldNumber = 901;
    private int hashId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashId {
      get { return hashId_; }
      set {
        hashId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Image);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Image other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sprite, other.Sprite)) return false;
      if (ImageType != other.ImageType) return false;
      if (MaterialFile != other.MaterialFile) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (PreserveAspect != other.PreserveAspect) return false;
      if (FillCenter != other.FillCenter) return false;
      if (HashId != other.HashId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sprite_ != null) hash ^= Sprite.GetHashCode();
      if (ImageType != 0) hash ^= ImageType.GetHashCode();
      if (MaterialFile.Length != 0) hash ^= MaterialFile.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (PreserveAspect != false) hash ^= PreserveAspect.GetHashCode();
      if (FillCenter != false) hash ^= FillCenter.GetHashCode();
      if (HashId != 0) hash ^= HashId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sprite_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sprite);
      }
      if (ImageType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ImageType);
      }
      if (MaterialFile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MaterialFile);
      }
      if (color_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Color);
      }
      if (PreserveAspect != false) {
        output.WriteRawTag(48);
        output.WriteBool(PreserveAspect);
      }
      if (FillCenter != false) {
        output.WriteRawTag(56);
        output.WriteBool(FillCenter);
      }
      if (HashId != 0) {
        output.WriteRawTag(168, 56);
        output.WriteInt32(HashId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sprite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sprite);
      }
      if (ImageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageType);
      }
      if (MaterialFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialFile);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (PreserveAspect != false) {
        size += 1 + 1;
      }
      if (FillCenter != false) {
        size += 1 + 1;
      }
      if (HashId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HashId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Image other) {
      if (other == null) {
        return;
      }
      if (other.sprite_ != null) {
        if (sprite_ == null) {
          sprite_ = new global::ProtoGui.Sprite();
        }
        Sprite.MergeFrom(other.Sprite);
      }
      if (other.ImageType != 0) {
        ImageType = other.ImageType;
      }
      if (other.MaterialFile.Length != 0) {
        MaterialFile = other.MaterialFile;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::ProtoMath.float4();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.PreserveAspect != false) {
        PreserveAspect = other.PreserveAspect;
      }
      if (other.FillCenter != false) {
        FillCenter = other.FillCenter;
      }
      if (other.HashId != 0) {
        HashId = other.HashId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sprite_ == null) {
              sprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(sprite_);
            break;
          }
          case 24: {
            ImageType = input.ReadUInt32();
            break;
          }
          case 34: {
            MaterialFile = input.ReadString();
            break;
          }
          case 42: {
            if (color_ == null) {
              color_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(color_);
            break;
          }
          case 48: {
            PreserveAspect = input.ReadBool();
            break;
          }
          case 56: {
            FillCenter = input.ReadBool();
            break;
          }
          case 7208: {
            HashId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawImage : pb::IMessage<RawImage> {
    private static readonly pb::MessageParser<RawImage> _parser = new pb::MessageParser<RawImage>(() => new RawImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawImage(RawImage other) : this() {
      textureFile_ = other.textureFile_;
      materialFile_ = other.materialFile_;
      UvRect = other.uvRect_ != null ? other.UvRect.Clone() : null;
      Color = other.color_ != null ? other.Color.Clone() : null;
      hashId_ = other.hashId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawImage Clone() {
      return new RawImage(this);
    }

    /// <summary>Field number for the "texture_file" field.</summary>
    public const int TextureFileFieldNumber = 2;
    private string textureFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextureFile {
      get { return textureFile_; }
      set {
        textureFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "material_file" field.</summary>
    public const int MaterialFileFieldNumber = 3;
    private string materialFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaterialFile {
      get { return materialFile_; }
      set {
        materialFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uv_rect" field.</summary>
    public const int UvRectFieldNumber = 4;
    private global::ProtoMath.float4 uvRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 UvRect {
      get { return uvRect_; }
      set {
        uvRect_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private global::ProtoMath.float4 color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "hash_id" field.</summary>
    public const int HashIdFieldNumber = 901;
    private int hashId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashId {
      get { return hashId_; }
      set {
        hashId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TextureFile != other.TextureFile) return false;
      if (MaterialFile != other.MaterialFile) return false;
      if (!object.Equals(UvRect, other.UvRect)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (HashId != other.HashId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TextureFile.Length != 0) hash ^= TextureFile.GetHashCode();
      if (MaterialFile.Length != 0) hash ^= MaterialFile.GetHashCode();
      if (uvRect_ != null) hash ^= UvRect.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (HashId != 0) hash ^= HashId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TextureFile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TextureFile);
      }
      if (MaterialFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MaterialFile);
      }
      if (uvRect_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UvRect);
      }
      if (color_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Color);
      }
      if (HashId != 0) {
        output.WriteRawTag(168, 56);
        output.WriteInt32(HashId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TextureFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextureFile);
      }
      if (MaterialFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialFile);
      }
      if (uvRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UvRect);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (HashId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HashId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawImage other) {
      if (other == null) {
        return;
      }
      if (other.TextureFile.Length != 0) {
        TextureFile = other.TextureFile;
      }
      if (other.MaterialFile.Length != 0) {
        MaterialFile = other.MaterialFile;
      }
      if (other.uvRect_ != null) {
        if (uvRect_ == null) {
          uvRect_ = new global::ProtoMath.float4();
        }
        UvRect.MergeFrom(other.UvRect);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::ProtoMath.float4();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.HashId != 0) {
        HashId = other.HashId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            TextureFile = input.ReadString();
            break;
          }
          case 26: {
            MaterialFile = input.ReadString();
            break;
          }
          case 34: {
            if (uvRect_ == null) {
              uvRect_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(uvRect_);
            break;
          }
          case 42: {
            if (color_ == null) {
              color_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(color_);
            break;
          }
          case 7208: {
            HashId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Text : pb::IMessage<Text> {
    private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Text> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text(Text other) : this() {
      text_ = other.text_;
      fontName_ = other.fontName_;
      fontFile_ = other.fontFile_;
      fontStyle_ = other.fontStyle_;
      fontSize_ = other.fontSize_;
      lineSpacing_ = other.lineSpacing_;
      supportRichText_ = other.supportRichText_;
      alignment_ = other.alignment_;
      alignByGeometry_ = other.alignByGeometry_;
      horizonalOverflow_ = other.horizonalOverflow_;
      verticalOverflow_ = other.verticalOverflow_;
      resizeTextForBestFit_ = other.resizeTextForBestFit_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      materialFile_ = other.materialFile_;
      useCustomFontName_ = other.useCustomFontName_;
      hashId_ = other.hashId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Text Clone() {
      return new Text(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int Text_FieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text_ {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "font_name" field.</summary>
    public const int FontNameFieldNumber = 101;
    private string fontName_ = "";
    /// <summary>
    /// character
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FontName {
      get { return fontName_; }
      set {
        fontName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "font_file" field.</summary>
    public const int FontFileFieldNumber = 102;
    private string fontFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FontFile {
      get { return fontFile_; }
      set {
        fontFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "font_style" field.</summary>
    public const int FontStyleFieldNumber = 201;
    private uint fontStyle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontStyle {
      get { return fontStyle_; }
      set {
        fontStyle_ = value;
      }
    }

    /// <summary>Field number for the "font_size" field.</summary>
    public const int FontSizeFieldNumber = 202;
    private uint fontSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontSize {
      get { return fontSize_; }
      set {
        fontSize_ = value;
      }
    }

    /// <summary>Field number for the "line_spacing" field.</summary>
    public const int LineSpacingFieldNumber = 203;
    private float lineSpacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineSpacing {
      get { return lineSpacing_; }
      set {
        lineSpacing_ = value;
      }
    }

    /// <summary>Field number for the "Support_rich_text" field.</summary>
    public const int SupportRichTextFieldNumber = 204;
    private bool supportRichText_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportRichText {
      get { return supportRichText_; }
      set {
        supportRichText_ = value;
      }
    }

    /// <summary>Field number for the "alignment" field.</summary>
    public const int AlignmentFieldNumber = 301;
    private uint alignment_;
    /// <summary>
    /// paragraph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Alignment {
      get { return alignment_; }
      set {
        alignment_ = value;
      }
    }

    /// <summary>Field number for the "align_by_geometry" field.</summary>
    public const int AlignByGeometryFieldNumber = 302;
    private bool alignByGeometry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AlignByGeometry {
      get { return alignByGeometry_; }
      set {
        alignByGeometry_ = value;
      }
    }

    /// <summary>Field number for the "horizonal_overflow" field.</summary>
    public const int HorizonalOverflowFieldNumber = 303;
    private bool horizonalOverflow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HorizonalOverflow {
      get { return horizonalOverflow_; }
      set {
        horizonalOverflow_ = value;
      }
    }

    /// <summary>Field number for the "vertical_overflow" field.</summary>
    public const int VerticalOverflowFieldNumber = 304;
    private bool verticalOverflow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VerticalOverflow {
      get { return verticalOverflow_; }
      set {
        verticalOverflow_ = value;
      }
    }

    /// <summary>Field number for the "resize_text_for_best_fit" field.</summary>
    public const int ResizeTextForBestFitFieldNumber = 305;
    private bool resizeTextForBestFit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResizeTextForBestFit {
      get { return resizeTextForBestFit_; }
      set {
        resizeTextForBestFit_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 401;
    private global::ProtoMath.float4 color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "material_file" field.</summary>
    public const int MaterialFileFieldNumber = 501;
    private string materialFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaterialFile {
      get { return materialFile_; }
      set {
        materialFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_custom_font_name" field.</summary>
    public const int UseCustomFontNameFieldNumber = 601;
    private bool useCustomFontName_;
    /// <summary>
    /// special flag for use default font
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCustomFontName {
      get { return useCustomFontName_; }
      set {
        useCustomFontName_ = value;
      }
    }

    /// <summary>Field number for the "hash_id" field.</summary>
    public const int HashIdFieldNumber = 901;
    private int hashId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashId {
      get { return hashId_; }
      set {
        hashId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Text);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Text other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text_ != other.Text_) return false;
      if (FontName != other.FontName) return false;
      if (FontFile != other.FontFile) return false;
      if (FontStyle != other.FontStyle) return false;
      if (FontSize != other.FontSize) return false;
      if (LineSpacing != other.LineSpacing) return false;
      if (SupportRichText != other.SupportRichText) return false;
      if (Alignment != other.Alignment) return false;
      if (AlignByGeometry != other.AlignByGeometry) return false;
      if (HorizonalOverflow != other.HorizonalOverflow) return false;
      if (VerticalOverflow != other.VerticalOverflow) return false;
      if (ResizeTextForBestFit != other.ResizeTextForBestFit) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (MaterialFile != other.MaterialFile) return false;
      if (UseCustomFontName != other.UseCustomFontName) return false;
      if (HashId != other.HashId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text_.Length != 0) hash ^= Text_.GetHashCode();
      if (FontName.Length != 0) hash ^= FontName.GetHashCode();
      if (FontFile.Length != 0) hash ^= FontFile.GetHashCode();
      if (FontStyle != 0) hash ^= FontStyle.GetHashCode();
      if (FontSize != 0) hash ^= FontSize.GetHashCode();
      if (LineSpacing != 0F) hash ^= LineSpacing.GetHashCode();
      if (SupportRichText != false) hash ^= SupportRichText.GetHashCode();
      if (Alignment != 0) hash ^= Alignment.GetHashCode();
      if (AlignByGeometry != false) hash ^= AlignByGeometry.GetHashCode();
      if (HorizonalOverflow != false) hash ^= HorizonalOverflow.GetHashCode();
      if (VerticalOverflow != false) hash ^= VerticalOverflow.GetHashCode();
      if (ResizeTextForBestFit != false) hash ^= ResizeTextForBestFit.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (MaterialFile.Length != 0) hash ^= MaterialFile.GetHashCode();
      if (UseCustomFontName != false) hash ^= UseCustomFontName.GetHashCode();
      if (HashId != 0) hash ^= HashId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text_);
      }
      if (FontName.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(FontName);
      }
      if (FontFile.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(FontFile);
      }
      if (FontStyle != 0) {
        output.WriteRawTag(200, 12);
        output.WriteUInt32(FontStyle);
      }
      if (FontSize != 0) {
        output.WriteRawTag(208, 12);
        output.WriteUInt32(FontSize);
      }
      if (LineSpacing != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(LineSpacing);
      }
      if (SupportRichText != false) {
        output.WriteRawTag(224, 12);
        output.WriteBool(SupportRichText);
      }
      if (Alignment != 0) {
        output.WriteRawTag(232, 18);
        output.WriteUInt32(Alignment);
      }
      if (AlignByGeometry != false) {
        output.WriteRawTag(240, 18);
        output.WriteBool(AlignByGeometry);
      }
      if (HorizonalOverflow != false) {
        output.WriteRawTag(248, 18);
        output.WriteBool(HorizonalOverflow);
      }
      if (VerticalOverflow != false) {
        output.WriteRawTag(128, 19);
        output.WriteBool(VerticalOverflow);
      }
      if (ResizeTextForBestFit != false) {
        output.WriteRawTag(136, 19);
        output.WriteBool(ResizeTextForBestFit);
      }
      if (color_ != null) {
        output.WriteRawTag(138, 25);
        output.WriteMessage(Color);
      }
      if (MaterialFile.Length != 0) {
        output.WriteRawTag(170, 31);
        output.WriteString(MaterialFile);
      }
      if (UseCustomFontName != false) {
        output.WriteRawTag(200, 37);
        output.WriteBool(UseCustomFontName);
      }
      if (HashId != 0) {
        output.WriteRawTag(168, 56);
        output.WriteInt32(HashId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text_);
      }
      if (FontName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FontName);
      }
      if (FontFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FontFile);
      }
      if (FontStyle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FontStyle);
      }
      if (FontSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(FontSize);
      }
      if (LineSpacing != 0F) {
        size += 2 + 4;
      }
      if (SupportRichText != false) {
        size += 2 + 1;
      }
      if (Alignment != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Alignment);
      }
      if (AlignByGeometry != false) {
        size += 2 + 1;
      }
      if (HorizonalOverflow != false) {
        size += 2 + 1;
      }
      if (VerticalOverflow != false) {
        size += 2 + 1;
      }
      if (ResizeTextForBestFit != false) {
        size += 2 + 1;
      }
      if (color_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (MaterialFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MaterialFile);
      }
      if (UseCustomFontName != false) {
        size += 2 + 1;
      }
      if (HashId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HashId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Text other) {
      if (other == null) {
        return;
      }
      if (other.Text_.Length != 0) {
        Text_ = other.Text_;
      }
      if (other.FontName.Length != 0) {
        FontName = other.FontName;
      }
      if (other.FontFile.Length != 0) {
        FontFile = other.FontFile;
      }
      if (other.FontStyle != 0) {
        FontStyle = other.FontStyle;
      }
      if (other.FontSize != 0) {
        FontSize = other.FontSize;
      }
      if (other.LineSpacing != 0F) {
        LineSpacing = other.LineSpacing;
      }
      if (other.SupportRichText != false) {
        SupportRichText = other.SupportRichText;
      }
      if (other.Alignment != 0) {
        Alignment = other.Alignment;
      }
      if (other.AlignByGeometry != false) {
        AlignByGeometry = other.AlignByGeometry;
      }
      if (other.HorizonalOverflow != false) {
        HorizonalOverflow = other.HorizonalOverflow;
      }
      if (other.VerticalOverflow != false) {
        VerticalOverflow = other.VerticalOverflow;
      }
      if (other.ResizeTextForBestFit != false) {
        ResizeTextForBestFit = other.ResizeTextForBestFit;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::ProtoMath.float4();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.MaterialFile.Length != 0) {
        MaterialFile = other.MaterialFile;
      }
      if (other.UseCustomFontName != false) {
        UseCustomFontName = other.UseCustomFontName;
      }
      if (other.HashId != 0) {
        HashId = other.HashId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Text_ = input.ReadString();
            break;
          }
          case 810: {
            FontName = input.ReadString();
            break;
          }
          case 818: {
            FontFile = input.ReadString();
            break;
          }
          case 1608: {
            FontStyle = input.ReadUInt32();
            break;
          }
          case 1616: {
            FontSize = input.ReadUInt32();
            break;
          }
          case 1629: {
            LineSpacing = input.ReadFloat();
            break;
          }
          case 1632: {
            SupportRichText = input.ReadBool();
            break;
          }
          case 2408: {
            Alignment = input.ReadUInt32();
            break;
          }
          case 2416: {
            AlignByGeometry = input.ReadBool();
            break;
          }
          case 2424: {
            HorizonalOverflow = input.ReadBool();
            break;
          }
          case 2432: {
            VerticalOverflow = input.ReadBool();
            break;
          }
          case 2440: {
            ResizeTextForBestFit = input.ReadBool();
            break;
          }
          case 3210: {
            if (color_ == null) {
              color_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(color_);
            break;
          }
          case 4010: {
            MaterialFile = input.ReadString();
            break;
          }
          case 4808: {
            UseCustomFontName = input.ReadBool();
            break;
          }
          case 7208: {
            HashId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Selectable : pb::IMessage<Selectable> {
    private static readonly pb::MessageParser<Selectable> _parser = new pb::MessageParser<Selectable>(() => new Selectable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Selectable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selectable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selectable(Selectable other) : this() {
      interactable_ = other.interactable_;
      transition_ = other.transition_;
      NormalColor = other.normalColor_ != null ? other.NormalColor.Clone() : null;
      HighlightedColor = other.highlightedColor_ != null ? other.HighlightedColor.Clone() : null;
      PressedColor = other.pressedColor_ != null ? other.PressedColor.Clone() : null;
      DisabledColor = other.disabledColor_ != null ? other.DisabledColor.Clone() : null;
      colorMultiplier_ = other.colorMultiplier_;
      fadeDuration_ = other.fadeDuration_;
      HighlightedSprite = other.highlightedSprite_ != null ? other.HighlightedSprite.Clone() : null;
      PressedSprite = other.pressedSprite_ != null ? other.PressedSprite.Clone() : null;
      DisabledSprite = other.disabledSprite_ != null ? other.DisabledSprite.Clone() : null;
      hashId_ = other.hashId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Selectable Clone() {
      return new Selectable(this);
    }

    /// <summary>Field number for the "interactable" field.</summary>
    public const int InteractableFieldNumber = 1;
    private bool interactable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interactable {
      get { return interactable_; }
      set {
        interactable_ = value;
      }
    }

    /// <summary>Field number for the "transition" field.</summary>
    public const int TransitionFieldNumber = 2;
    private uint transition_;
    /// <summary>
    /// four mode: none, color tint, sprite swap, animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Transition {
      get { return transition_; }
      set {
        transition_ = value;
      }
    }

    /// <summary>Field number for the "normal_color" field.</summary>
    public const int NormalColorFieldNumber = 201;
    private global::ProtoMath.float4 normalColor_;
    /// <summary>
    /// color tint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 NormalColor {
      get { return normalColor_; }
      set {
        normalColor_ = value;
      }
    }

    /// <summary>Field number for the "highlighted_color" field.</summary>
    public const int HighlightedColorFieldNumber = 203;
    private global::ProtoMath.float4 highlightedColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 HighlightedColor {
      get { return highlightedColor_; }
      set {
        highlightedColor_ = value;
      }
    }

    /// <summary>Field number for the "pressed_color" field.</summary>
    public const int PressedColorFieldNumber = 204;
    private global::ProtoMath.float4 pressedColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 PressedColor {
      get { return pressedColor_; }
      set {
        pressedColor_ = value;
      }
    }

    /// <summary>Field number for the "disabled_color" field.</summary>
    public const int DisabledColorFieldNumber = 205;
    private global::ProtoMath.float4 disabledColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 DisabledColor {
      get { return disabledColor_; }
      set {
        disabledColor_ = value;
      }
    }

    /// <summary>Field number for the "color_multiplier" field.</summary>
    public const int ColorMultiplierFieldNumber = 206;
    private float colorMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ColorMultiplier {
      get { return colorMultiplier_; }
      set {
        colorMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "fade_duration" field.</summary>
    public const int FadeDurationFieldNumber = 207;
    private float fadeDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FadeDuration {
      get { return fadeDuration_; }
      set {
        fadeDuration_ = value;
      }
    }

    /// <summary>Field number for the "highlighted_sprite" field.</summary>
    public const int HighlightedSpriteFieldNumber = 211;
    private global::ProtoGui.Sprite highlightedSprite_;
    /// <summary>
    /// sprite swap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite HighlightedSprite {
      get { return highlightedSprite_; }
      set {
        highlightedSprite_ = value;
      }
    }

    /// <summary>Field number for the "pressed_sprite" field.</summary>
    public const int PressedSpriteFieldNumber = 212;
    private global::ProtoGui.Sprite pressedSprite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite PressedSprite {
      get { return pressedSprite_; }
      set {
        pressedSprite_ = value;
      }
    }

    /// <summary>Field number for the "disabled_sprite" field.</summary>
    public const int DisabledSpriteFieldNumber = 213;
    private global::ProtoGui.Sprite disabledSprite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite DisabledSprite {
      get { return disabledSprite_; }
      set {
        disabledSprite_ = value;
      }
    }

    /// <summary>Field number for the "hash_id" field.</summary>
    public const int HashIdFieldNumber = 901;
    private int hashId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashId {
      get { return hashId_; }
      set {
        hashId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Selectable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Selectable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interactable != other.Interactable) return false;
      if (Transition != other.Transition) return false;
      if (!object.Equals(NormalColor, other.NormalColor)) return false;
      if (!object.Equals(HighlightedColor, other.HighlightedColor)) return false;
      if (!object.Equals(PressedColor, other.PressedColor)) return false;
      if (!object.Equals(DisabledColor, other.DisabledColor)) return false;
      if (ColorMultiplier != other.ColorMultiplier) return false;
      if (FadeDuration != other.FadeDuration) return false;
      if (!object.Equals(HighlightedSprite, other.HighlightedSprite)) return false;
      if (!object.Equals(PressedSprite, other.PressedSprite)) return false;
      if (!object.Equals(DisabledSprite, other.DisabledSprite)) return false;
      if (HashId != other.HashId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interactable != false) hash ^= Interactable.GetHashCode();
      if (Transition != 0) hash ^= Transition.GetHashCode();
      if (normalColor_ != null) hash ^= NormalColor.GetHashCode();
      if (highlightedColor_ != null) hash ^= HighlightedColor.GetHashCode();
      if (pressedColor_ != null) hash ^= PressedColor.GetHashCode();
      if (disabledColor_ != null) hash ^= DisabledColor.GetHashCode();
      if (ColorMultiplier != 0F) hash ^= ColorMultiplier.GetHashCode();
      if (FadeDuration != 0F) hash ^= FadeDuration.GetHashCode();
      if (highlightedSprite_ != null) hash ^= HighlightedSprite.GetHashCode();
      if (pressedSprite_ != null) hash ^= PressedSprite.GetHashCode();
      if (disabledSprite_ != null) hash ^= DisabledSprite.GetHashCode();
      if (HashId != 0) hash ^= HashId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interactable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Interactable);
      }
      if (Transition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Transition);
      }
      if (normalColor_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(NormalColor);
      }
      if (highlightedColor_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(HighlightedColor);
      }
      if (pressedColor_ != null) {
        output.WriteRawTag(226, 12);
        output.WriteMessage(PressedColor);
      }
      if (disabledColor_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(DisabledColor);
      }
      if (ColorMultiplier != 0F) {
        output.WriteRawTag(245, 12);
        output.WriteFloat(ColorMultiplier);
      }
      if (FadeDuration != 0F) {
        output.WriteRawTag(253, 12);
        output.WriteFloat(FadeDuration);
      }
      if (highlightedSprite_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(HighlightedSprite);
      }
      if (pressedSprite_ != null) {
        output.WriteRawTag(162, 13);
        output.WriteMessage(PressedSprite);
      }
      if (disabledSprite_ != null) {
        output.WriteRawTag(170, 13);
        output.WriteMessage(DisabledSprite);
      }
      if (HashId != 0) {
        output.WriteRawTag(168, 56);
        output.WriteInt32(HashId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interactable != false) {
        size += 1 + 1;
      }
      if (Transition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Transition);
      }
      if (normalColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NormalColor);
      }
      if (highlightedColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighlightedColor);
      }
      if (pressedColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PressedColor);
      }
      if (disabledColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisabledColor);
      }
      if (ColorMultiplier != 0F) {
        size += 2 + 4;
      }
      if (FadeDuration != 0F) {
        size += 2 + 4;
      }
      if (highlightedSprite_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighlightedSprite);
      }
      if (pressedSprite_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PressedSprite);
      }
      if (disabledSprite_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisabledSprite);
      }
      if (HashId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HashId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Selectable other) {
      if (other == null) {
        return;
      }
      if (other.Interactable != false) {
        Interactable = other.Interactable;
      }
      if (other.Transition != 0) {
        Transition = other.Transition;
      }
      if (other.normalColor_ != null) {
        if (normalColor_ == null) {
          normalColor_ = new global::ProtoMath.float4();
        }
        NormalColor.MergeFrom(other.NormalColor);
      }
      if (other.highlightedColor_ != null) {
        if (highlightedColor_ == null) {
          highlightedColor_ = new global::ProtoMath.float4();
        }
        HighlightedColor.MergeFrom(other.HighlightedColor);
      }
      if (other.pressedColor_ != null) {
        if (pressedColor_ == null) {
          pressedColor_ = new global::ProtoMath.float4();
        }
        PressedColor.MergeFrom(other.PressedColor);
      }
      if (other.disabledColor_ != null) {
        if (disabledColor_ == null) {
          disabledColor_ = new global::ProtoMath.float4();
        }
        DisabledColor.MergeFrom(other.DisabledColor);
      }
      if (other.ColorMultiplier != 0F) {
        ColorMultiplier = other.ColorMultiplier;
      }
      if (other.FadeDuration != 0F) {
        FadeDuration = other.FadeDuration;
      }
      if (other.highlightedSprite_ != null) {
        if (highlightedSprite_ == null) {
          highlightedSprite_ = new global::ProtoGui.Sprite();
        }
        HighlightedSprite.MergeFrom(other.HighlightedSprite);
      }
      if (other.pressedSprite_ != null) {
        if (pressedSprite_ == null) {
          pressedSprite_ = new global::ProtoGui.Sprite();
        }
        PressedSprite.MergeFrom(other.PressedSprite);
      }
      if (other.disabledSprite_ != null) {
        if (disabledSprite_ == null) {
          disabledSprite_ = new global::ProtoGui.Sprite();
        }
        DisabledSprite.MergeFrom(other.DisabledSprite);
      }
      if (other.HashId != 0) {
        HashId = other.HashId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Interactable = input.ReadBool();
            break;
          }
          case 16: {
            Transition = input.ReadUInt32();
            break;
          }
          case 1610: {
            if (normalColor_ == null) {
              normalColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(normalColor_);
            break;
          }
          case 1626: {
            if (highlightedColor_ == null) {
              highlightedColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(highlightedColor_);
            break;
          }
          case 1634: {
            if (pressedColor_ == null) {
              pressedColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(pressedColor_);
            break;
          }
          case 1642: {
            if (disabledColor_ == null) {
              disabledColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(disabledColor_);
            break;
          }
          case 1653: {
            ColorMultiplier = input.ReadFloat();
            break;
          }
          case 1661: {
            FadeDuration = input.ReadFloat();
            break;
          }
          case 1690: {
            if (highlightedSprite_ == null) {
              highlightedSprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(highlightedSprite_);
            break;
          }
          case 1698: {
            if (pressedSprite_ == null) {
              pressedSprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(pressedSprite_);
            break;
          }
          case 1706: {
            if (disabledSprite_ == null) {
              disabledSprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(disabledSprite_);
            break;
          }
          case 7208: {
            HashId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// comparable with 1.6
  /// </summary>
  public sealed partial class Button : pb::IMessage<Button> {
    private static readonly pb::MessageParser<Button> _parser = new pb::MessageParser<Button>(() => new Button());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Button> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Button() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Button(Button other) : this() {
      interactable_ = other.interactable_;
      transition_ = other.transition_;
      NormalColor = other.normalColor_ != null ? other.NormalColor.Clone() : null;
      HighlightedColor = other.highlightedColor_ != null ? other.HighlightedColor.Clone() : null;
      PressedColor = other.pressedColor_ != null ? other.PressedColor.Clone() : null;
      DisabledColor = other.disabledColor_ != null ? other.DisabledColor.Clone() : null;
      colorMultiplier_ = other.colorMultiplier_;
      fadeDuration_ = other.fadeDuration_;
      HighlightedSprite = other.highlightedSprite_ != null ? other.HighlightedSprite.Clone() : null;
      PressedSprite = other.pressedSprite_ != null ? other.PressedSprite.Clone() : null;
      DisabledSprite = other.disabledSprite_ != null ? other.DisabledSprite.Clone() : null;
      Selectable = other.selectable_ != null ? other.Selectable.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Button Clone() {
      return new Button(this);
    }

    /// <summary>Field number for the "interactable" field.</summary>
    public const int InteractableFieldNumber = 1;
    private bool interactable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interactable {
      get { return interactable_; }
      set {
        interactable_ = value;
      }
    }

    /// <summary>Field number for the "transition" field.</summary>
    public const int TransitionFieldNumber = 2;
    private uint transition_;
    /// <summary>
    /// four mode: none, color tint, sprite swap, animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Transition {
      get { return transition_; }
      set {
        transition_ = value;
      }
    }

    /// <summary>Field number for the "normal_color" field.</summary>
    public const int NormalColorFieldNumber = 201;
    private global::ProtoMath.float4 normalColor_;
    /// <summary>
    /// color tint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 NormalColor {
      get { return normalColor_; }
      set {
        normalColor_ = value;
      }
    }

    /// <summary>Field number for the "highlighted_color" field.</summary>
    public const int HighlightedColorFieldNumber = 203;
    private global::ProtoMath.float4 highlightedColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 HighlightedColor {
      get { return highlightedColor_; }
      set {
        highlightedColor_ = value;
      }
    }

    /// <summary>Field number for the "pressed_color" field.</summary>
    public const int PressedColorFieldNumber = 204;
    private global::ProtoMath.float4 pressedColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 PressedColor {
      get { return pressedColor_; }
      set {
        pressedColor_ = value;
      }
    }

    /// <summary>Field number for the "disabled_color" field.</summary>
    public const int DisabledColorFieldNumber = 205;
    private global::ProtoMath.float4 disabledColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 DisabledColor {
      get { return disabledColor_; }
      set {
        disabledColor_ = value;
      }
    }

    /// <summary>Field number for the "color_multiplier" field.</summary>
    public const int ColorMultiplierFieldNumber = 206;
    private float colorMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ColorMultiplier {
      get { return colorMultiplier_; }
      set {
        colorMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "fade_duration" field.</summary>
    public const int FadeDurationFieldNumber = 207;
    private float fadeDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FadeDuration {
      get { return fadeDuration_; }
      set {
        fadeDuration_ = value;
      }
    }

    /// <summary>Field number for the "highlighted_sprite" field.</summary>
    public const int HighlightedSpriteFieldNumber = 211;
    private global::ProtoGui.Sprite highlightedSprite_;
    /// <summary>
    /// sprite swap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite HighlightedSprite {
      get { return highlightedSprite_; }
      set {
        highlightedSprite_ = value;
      }
    }

    /// <summary>Field number for the "pressed_sprite" field.</summary>
    public const int PressedSpriteFieldNumber = 212;
    private global::ProtoGui.Sprite pressedSprite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite PressedSprite {
      get { return pressedSprite_; }
      set {
        pressedSprite_ = value;
      }
    }

    /// <summary>Field number for the "disabled_sprite" field.</summary>
    public const int DisabledSpriteFieldNumber = 213;
    private global::ProtoGui.Sprite disabledSprite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Sprite DisabledSprite {
      get { return disabledSprite_; }
      set {
        disabledSprite_ = value;
      }
    }

    /// <summary>Field number for the "selectable" field.</summary>
    public const int SelectableFieldNumber = 3;
    private global::ProtoGui.Selectable selectable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Selectable Selectable {
      get { return selectable_; }
      set {
        selectable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Button);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Button other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interactable != other.Interactable) return false;
      if (Transition != other.Transition) return false;
      if (!object.Equals(NormalColor, other.NormalColor)) return false;
      if (!object.Equals(HighlightedColor, other.HighlightedColor)) return false;
      if (!object.Equals(PressedColor, other.PressedColor)) return false;
      if (!object.Equals(DisabledColor, other.DisabledColor)) return false;
      if (ColorMultiplier != other.ColorMultiplier) return false;
      if (FadeDuration != other.FadeDuration) return false;
      if (!object.Equals(HighlightedSprite, other.HighlightedSprite)) return false;
      if (!object.Equals(PressedSprite, other.PressedSprite)) return false;
      if (!object.Equals(DisabledSprite, other.DisabledSprite)) return false;
      if (!object.Equals(Selectable, other.Selectable)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interactable != false) hash ^= Interactable.GetHashCode();
      if (Transition != 0) hash ^= Transition.GetHashCode();
      if (normalColor_ != null) hash ^= NormalColor.GetHashCode();
      if (highlightedColor_ != null) hash ^= HighlightedColor.GetHashCode();
      if (pressedColor_ != null) hash ^= PressedColor.GetHashCode();
      if (disabledColor_ != null) hash ^= DisabledColor.GetHashCode();
      if (ColorMultiplier != 0F) hash ^= ColorMultiplier.GetHashCode();
      if (FadeDuration != 0F) hash ^= FadeDuration.GetHashCode();
      if (highlightedSprite_ != null) hash ^= HighlightedSprite.GetHashCode();
      if (pressedSprite_ != null) hash ^= PressedSprite.GetHashCode();
      if (disabledSprite_ != null) hash ^= DisabledSprite.GetHashCode();
      if (selectable_ != null) hash ^= Selectable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interactable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Interactable);
      }
      if (Transition != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Transition);
      }
      if (selectable_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Selectable);
      }
      if (normalColor_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(NormalColor);
      }
      if (highlightedColor_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(HighlightedColor);
      }
      if (pressedColor_ != null) {
        output.WriteRawTag(226, 12);
        output.WriteMessage(PressedColor);
      }
      if (disabledColor_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(DisabledColor);
      }
      if (ColorMultiplier != 0F) {
        output.WriteRawTag(245, 12);
        output.WriteFloat(ColorMultiplier);
      }
      if (FadeDuration != 0F) {
        output.WriteRawTag(253, 12);
        output.WriteFloat(FadeDuration);
      }
      if (highlightedSprite_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(HighlightedSprite);
      }
      if (pressedSprite_ != null) {
        output.WriteRawTag(162, 13);
        output.WriteMessage(PressedSprite);
      }
      if (disabledSprite_ != null) {
        output.WriteRawTag(170, 13);
        output.WriteMessage(DisabledSprite);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interactable != false) {
        size += 1 + 1;
      }
      if (Transition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Transition);
      }
      if (normalColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NormalColor);
      }
      if (highlightedColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighlightedColor);
      }
      if (pressedColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PressedColor);
      }
      if (disabledColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisabledColor);
      }
      if (ColorMultiplier != 0F) {
        size += 2 + 4;
      }
      if (FadeDuration != 0F) {
        size += 2 + 4;
      }
      if (highlightedSprite_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighlightedSprite);
      }
      if (pressedSprite_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PressedSprite);
      }
      if (disabledSprite_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DisabledSprite);
      }
      if (selectable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selectable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Button other) {
      if (other == null) {
        return;
      }
      if (other.Interactable != false) {
        Interactable = other.Interactable;
      }
      if (other.Transition != 0) {
        Transition = other.Transition;
      }
      if (other.normalColor_ != null) {
        if (normalColor_ == null) {
          normalColor_ = new global::ProtoMath.float4();
        }
        NormalColor.MergeFrom(other.NormalColor);
      }
      if (other.highlightedColor_ != null) {
        if (highlightedColor_ == null) {
          highlightedColor_ = new global::ProtoMath.float4();
        }
        HighlightedColor.MergeFrom(other.HighlightedColor);
      }
      if (other.pressedColor_ != null) {
        if (pressedColor_ == null) {
          pressedColor_ = new global::ProtoMath.float4();
        }
        PressedColor.MergeFrom(other.PressedColor);
      }
      if (other.disabledColor_ != null) {
        if (disabledColor_ == null) {
          disabledColor_ = new global::ProtoMath.float4();
        }
        DisabledColor.MergeFrom(other.DisabledColor);
      }
      if (other.ColorMultiplier != 0F) {
        ColorMultiplier = other.ColorMultiplier;
      }
      if (other.FadeDuration != 0F) {
        FadeDuration = other.FadeDuration;
      }
      if (other.highlightedSprite_ != null) {
        if (highlightedSprite_ == null) {
          highlightedSprite_ = new global::ProtoGui.Sprite();
        }
        HighlightedSprite.MergeFrom(other.HighlightedSprite);
      }
      if (other.pressedSprite_ != null) {
        if (pressedSprite_ == null) {
          pressedSprite_ = new global::ProtoGui.Sprite();
        }
        PressedSprite.MergeFrom(other.PressedSprite);
      }
      if (other.disabledSprite_ != null) {
        if (disabledSprite_ == null) {
          disabledSprite_ = new global::ProtoGui.Sprite();
        }
        DisabledSprite.MergeFrom(other.DisabledSprite);
      }
      if (other.selectable_ != null) {
        if (selectable_ == null) {
          selectable_ = new global::ProtoGui.Selectable();
        }
        Selectable.MergeFrom(other.Selectable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Interactable = input.ReadBool();
            break;
          }
          case 16: {
            Transition = input.ReadUInt32();
            break;
          }
          case 26: {
            if (selectable_ == null) {
              selectable_ = new global::ProtoGui.Selectable();
            }
            input.ReadMessage(selectable_);
            break;
          }
          case 1610: {
            if (normalColor_ == null) {
              normalColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(normalColor_);
            break;
          }
          case 1626: {
            if (highlightedColor_ == null) {
              highlightedColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(highlightedColor_);
            break;
          }
          case 1634: {
            if (pressedColor_ == null) {
              pressedColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(pressedColor_);
            break;
          }
          case 1642: {
            if (disabledColor_ == null) {
              disabledColor_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(disabledColor_);
            break;
          }
          case 1653: {
            ColorMultiplier = input.ReadFloat();
            break;
          }
          case 1661: {
            FadeDuration = input.ReadFloat();
            break;
          }
          case 1690: {
            if (highlightedSprite_ == null) {
              highlightedSprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(highlightedSprite_);
            break;
          }
          case 1698: {
            if (pressedSprite_ == null) {
              pressedSprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(pressedSprite_);
            break;
          }
          case 1706: {
            if (disabledSprite_ == null) {
              disabledSprite_ = new global::ProtoGui.Sprite();
            }
            input.ReadMessage(disabledSprite_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputField : pb::IMessage<InputField> {
    private static readonly pb::MessageParser<InputField> _parser = new pb::MessageParser<InputField>(() => new InputField());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputField(InputField other) : this() {
      Selectable = other.selectable_ != null ? other.Selectable.Clone() : null;
      characterLimit_ = other.characterLimit_;
      characterValidation_ = other.characterValidation_;
      contentType_ = other.contentType_;
      inputType_ = other.inputType_;
      keyboardType_ = other.keyboardType_;
      lineType_ = other.lineType_;
      multiLine_ = other.multiLine_;
      placeholderHashid_ = other.placeholderHashid_;
      shouldHideMobileInput_ = other.shouldHideMobileInput_;
      text_ = other.text_;
      textComponentHashid_ = other.textComponentHashid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputField Clone() {
      return new InputField(this);
    }

    /// <summary>Field number for the "selectable" field.</summary>
    public const int SelectableFieldNumber = 3;
    private global::ProtoGui.Selectable selectable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Selectable Selectable {
      get { return selectable_; }
      set {
        selectable_ = value;
      }
    }

    /// <summary>Field number for the "character_limit" field.</summary>
    public const int CharacterLimitFieldNumber = 401;
    private uint characterLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CharacterLimit {
      get { return characterLimit_; }
      set {
        characterLimit_ = value;
      }
    }

    /// <summary>Field number for the "character_validation" field.</summary>
    public const int CharacterValidationFieldNumber = 402;
    private uint characterValidation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CharacterValidation {
      get { return characterValidation_; }
      set {
        characterValidation_ = value;
      }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 403;
    private uint contentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    /// <summary>Field number for the "input_type" field.</summary>
    public const int InputTypeFieldNumber = 404;
    private uint inputType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InputType {
      get { return inputType_; }
      set {
        inputType_ = value;
      }
    }

    /// <summary>Field number for the "keyboard_type" field.</summary>
    public const int KeyboardTypeFieldNumber = 406;
    private uint keyboardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KeyboardType {
      get { return keyboardType_; }
      set {
        keyboardType_ = value;
      }
    }

    /// <summary>Field number for the "line_type" field.</summary>
    public const int LineTypeFieldNumber = 407;
    private uint lineType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LineType {
      get { return lineType_; }
      set {
        lineType_ = value;
      }
    }

    /// <summary>Field number for the "multi_line" field.</summary>
    public const int MultiLineFieldNumber = 408;
    private bool multiLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MultiLine {
      get { return multiLine_; }
      set {
        multiLine_ = value;
      }
    }

    /// <summary>Field number for the "placeholder_hashid" field.</summary>
    public const int PlaceholderHashidFieldNumber = 409;
    private int placeholderHashid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaceholderHashid {
      get { return placeholderHashid_; }
      set {
        placeholderHashid_ = value;
      }
    }

    /// <summary>Field number for the "should_hide_mobile_input" field.</summary>
    public const int ShouldHideMobileInputFieldNumber = 410;
    private bool shouldHideMobileInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldHideMobileInput {
      get { return shouldHideMobileInput_; }
      set {
        shouldHideMobileInput_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 411;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text_component_hashid" field.</summary>
    public const int TextComponentHashidFieldNumber = 412;
    private int textComponentHashid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TextComponentHashid {
      get { return textComponentHashid_; }
      set {
        textComponentHashid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selectable, other.Selectable)) return false;
      if (CharacterLimit != other.CharacterLimit) return false;
      if (CharacterValidation != other.CharacterValidation) return false;
      if (ContentType != other.ContentType) return false;
      if (InputType != other.InputType) return false;
      if (KeyboardType != other.KeyboardType) return false;
      if (LineType != other.LineType) return false;
      if (MultiLine != other.MultiLine) return false;
      if (PlaceholderHashid != other.PlaceholderHashid) return false;
      if (ShouldHideMobileInput != other.ShouldHideMobileInput) return false;
      if (Text != other.Text) return false;
      if (TextComponentHashid != other.TextComponentHashid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selectable_ != null) hash ^= Selectable.GetHashCode();
      if (CharacterLimit != 0) hash ^= CharacterLimit.GetHashCode();
      if (CharacterValidation != 0) hash ^= CharacterValidation.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (InputType != 0) hash ^= InputType.GetHashCode();
      if (KeyboardType != 0) hash ^= KeyboardType.GetHashCode();
      if (LineType != 0) hash ^= LineType.GetHashCode();
      if (MultiLine != false) hash ^= MultiLine.GetHashCode();
      if (PlaceholderHashid != 0) hash ^= PlaceholderHashid.GetHashCode();
      if (ShouldHideMobileInput != false) hash ^= ShouldHideMobileInput.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (TextComponentHashid != 0) hash ^= TextComponentHashid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selectable_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Selectable);
      }
      if (CharacterLimit != 0) {
        output.WriteRawTag(136, 25);
        output.WriteUInt32(CharacterLimit);
      }
      if (CharacterValidation != 0) {
        output.WriteRawTag(144, 25);
        output.WriteUInt32(CharacterValidation);
      }
      if (ContentType != 0) {
        output.WriteRawTag(152, 25);
        output.WriteUInt32(ContentType);
      }
      if (InputType != 0) {
        output.WriteRawTag(160, 25);
        output.WriteUInt32(InputType);
      }
      if (KeyboardType != 0) {
        output.WriteRawTag(176, 25);
        output.WriteUInt32(KeyboardType);
      }
      if (LineType != 0) {
        output.WriteRawTag(184, 25);
        output.WriteUInt32(LineType);
      }
      if (MultiLine != false) {
        output.WriteRawTag(192, 25);
        output.WriteBool(MultiLine);
      }
      if (PlaceholderHashid != 0) {
        output.WriteRawTag(200, 25);
        output.WriteInt32(PlaceholderHashid);
      }
      if (ShouldHideMobileInput != false) {
        output.WriteRawTag(208, 25);
        output.WriteBool(ShouldHideMobileInput);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(218, 25);
        output.WriteString(Text);
      }
      if (TextComponentHashid != 0) {
        output.WriteRawTag(224, 25);
        output.WriteInt32(TextComponentHashid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selectable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selectable);
      }
      if (CharacterLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CharacterLimit);
      }
      if (CharacterValidation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CharacterValidation);
      }
      if (ContentType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ContentType);
      }
      if (InputType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InputType);
      }
      if (KeyboardType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KeyboardType);
      }
      if (LineType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LineType);
      }
      if (MultiLine != false) {
        size += 2 + 1;
      }
      if (PlaceholderHashid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlaceholderHashid);
      }
      if (ShouldHideMobileInput != false) {
        size += 2 + 1;
      }
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (TextComponentHashid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TextComponentHashid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputField other) {
      if (other == null) {
        return;
      }
      if (other.selectable_ != null) {
        if (selectable_ == null) {
          selectable_ = new global::ProtoGui.Selectable();
        }
        Selectable.MergeFrom(other.Selectable);
      }
      if (other.CharacterLimit != 0) {
        CharacterLimit = other.CharacterLimit;
      }
      if (other.CharacterValidation != 0) {
        CharacterValidation = other.CharacterValidation;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      if (other.InputType != 0) {
        InputType = other.InputType;
      }
      if (other.KeyboardType != 0) {
        KeyboardType = other.KeyboardType;
      }
      if (other.LineType != 0) {
        LineType = other.LineType;
      }
      if (other.MultiLine != false) {
        MultiLine = other.MultiLine;
      }
      if (other.PlaceholderHashid != 0) {
        PlaceholderHashid = other.PlaceholderHashid;
      }
      if (other.ShouldHideMobileInput != false) {
        ShouldHideMobileInput = other.ShouldHideMobileInput;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.TextComponentHashid != 0) {
        TextComponentHashid = other.TextComponentHashid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (selectable_ == null) {
              selectable_ = new global::ProtoGui.Selectable();
            }
            input.ReadMessage(selectable_);
            break;
          }
          case 3208: {
            CharacterLimit = input.ReadUInt32();
            break;
          }
          case 3216: {
            CharacterValidation = input.ReadUInt32();
            break;
          }
          case 3224: {
            ContentType = input.ReadUInt32();
            break;
          }
          case 3232: {
            InputType = input.ReadUInt32();
            break;
          }
          case 3248: {
            KeyboardType = input.ReadUInt32();
            break;
          }
          case 3256: {
            LineType = input.ReadUInt32();
            break;
          }
          case 3264: {
            MultiLine = input.ReadBool();
            break;
          }
          case 3272: {
            PlaceholderHashid = input.ReadInt32();
            break;
          }
          case 3280: {
            ShouldHideMobileInput = input.ReadBool();
            break;
          }
          case 3290: {
            Text = input.ReadString();
            break;
          }
          case 3296: {
            TextComponentHashid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CanvasRenderer : pb::IMessage<CanvasRenderer> {
    private static readonly pb::MessageParser<CanvasRenderer> _parser = new pb::MessageParser<CanvasRenderer>(() => new CanvasRenderer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanvasRenderer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoGui.GUIReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasRenderer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasRenderer(CanvasRenderer other) : this() {
      Image = other.image_ != null ? other.Image.Clone() : null;
      RawImage = other.rawImage_ != null ? other.RawImage.Clone() : null;
      Text = other.text_ != null ? other.Text.Clone() : null;
      layerOrder_ = other.layerOrder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasRenderer Clone() {
      return new CanvasRenderer(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 201;
    private global::ProtoGui.Image image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Image Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "raw_image" field.</summary>
    public const int RawImageFieldNumber = 202;
    private global::ProtoGui.RawImage rawImage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.RawImage RawImage {
      get { return rawImage_; }
      set {
        rawImage_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 203;
    private global::ProtoGui.Text text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Text Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "layer_order" field.</summary>
    public const int LayerOrderFieldNumber = 301;
    private int layerOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LayerOrder {
      get { return layerOrder_; }
      set {
        layerOrder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanvasRenderer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanvasRenderer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(RawImage, other.RawImage)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (LayerOrder != other.LayerOrder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (rawImage_ != null) hash ^= RawImage.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (LayerOrder != 0) hash ^= LayerOrder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Image);
      }
      if (rawImage_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(RawImage);
      }
      if (text_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(Text);
      }
      if (LayerOrder != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(LayerOrder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (rawImage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RawImage);
      }
      if (text_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (LayerOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LayerOrder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanvasRenderer other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::ProtoGui.Image();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.rawImage_ != null) {
        if (rawImage_ == null) {
          rawImage_ = new global::ProtoGui.RawImage();
        }
        RawImage.MergeFrom(other.RawImage);
      }
      if (other.text_ != null) {
        if (text_ == null) {
          text_ = new global::ProtoGui.Text();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.LayerOrder != 0) {
        LayerOrder = other.LayerOrder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 1610: {
            if (image_ == null) {
              image_ = new global::ProtoGui.Image();
            }
            input.ReadMessage(image_);
            break;
          }
          case 1618: {
            if (rawImage_ == null) {
              rawImage_ = new global::ProtoGui.RawImage();
            }
            input.ReadMessage(rawImage_);
            break;
          }
          case 1626: {
            if (text_ == null) {
              text_ = new global::ProtoGui.Text();
            }
            input.ReadMessage(text_);
            break;
          }
          case 2408: {
            LayerOrder = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
