// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoMath {

  /// <summary>Holder for reflection information generated from math.proto</summary>
  public static partial class MathReflection {

    #region Descriptor
    /// <summary>File descriptor for math.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MathReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgptYXRoLnByb3RvEgpwcm90b19tYXRoIh4KBmZsb2F0MhIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAIiKQoGZmxvYXQzEgkKAXgYASABKAISCQoBeRgCIAEoAhIJ",
            "CgF6GAMgASgCIjQKBmZsb2F0NBIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoB",
            "ehgDIAEoAhIJCgF3GAQgASgCIjIKBGludDQSCQoBeBgBIAEoBRIJCgF5GAIg",
            "ASgFEgkKAXoYAyABKAUSCQoBdxgEIAEoBSI4CgpxdWF0ZXJuaW9uEgkKAWkY",
            "ASABKAISCQoBahgCIAEoAhIJCgFrGAMgASgCEgkKAXMYBCABKAIiKQoGbWF0",
            "cml4EgkKAXcYASABKAUSCQoBaBgCIAEoBRIJCgFtGAMgAygCIrsCCgl0cmFu",
            "c2Zvcm0SIQoFc2NhbGUYASABKAsyEi5wcm90b19tYXRoLmZsb2F0MxIwCghy",
            "b3RfdHlwZRgCIAEoDjIeLnByb3RvX21hdGgudHJhbnNmb3JtLlJPVEFUSU9O",
            "EiQKCHJvdGF0aW9uGAMgASgLMhIucHJvdG9fbWF0aC5mbG9hdDQSJQoJdHJh",
            "bnNsYXRlGAQgASgLMhIucHJvdG9fbWF0aC5mbG9hdDMiiwEKCFJPVEFUSU9O",
            "EggKBE5PTkUQABILCgdERUZBVUxUEAESDgoKUVVBVEVSTklPThACEg0KCUVV",
            "TEFSX1hZWhADEg0KCUVVTEFSX1laWBAEEg0KCUVVTEFSX1pYWRAFEg0KCUVV",
            "TEFSX1haWRAGEg0KCUVVTEFSX1lYWhAHEg0KCUVVTEFSX1pZWBAIIssCCg1S",
            "ZWN0VHJhbnNmb3JtEi0KEWFuY2hvcmVkX3Bvc2l0aW9uGGUgASgLMhIucHJv",
            "dG9fbWF0aC5mbG9hdDMSJgoKYW5jaG9yX21heBhmIAEoCzISLnByb3RvX21h",
            "dGguZmxvYXQyEiYKCmFuY2hvcl9taW4YZyABKAsyEi5wcm90b19tYXRoLmZs",
            "b2F0MhIhCgVwaXZvdBhoIAEoCzISLnByb3RvX21hdGguZmxvYXQyEiAKBHJl",
            "Y3QYaSABKAsyEi5wcm90b19tYXRoLmZsb2F0NBImCgpvZmZzZXRfbWF4GGog",
            "ASgLMhIucHJvdG9fbWF0aC5mbG9hdDISJgoKb2Zmc2V0X21pbhhrIAEoCzIS",
            "LnByb3RvX21hdGguZmxvYXQyEiYKCnNpemVfZGVsdGEYbCABKAsyEi5wcm90",
            "b19tYXRoLmZsb2F0MkICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.float2), global::ProtoMath.float2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.float3), global::ProtoMath.float3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.float4), global::ProtoMath.float4.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.int4), global::ProtoMath.int4.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.quaternion), global::ProtoMath.quaternion.Parser, new[]{ "I", "J", "K", "S" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.matrix), global::ProtoMath.matrix.Parser, new[]{ "W", "H", "M" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.transform), global::ProtoMath.transform.Parser, new[]{ "Scale", "RotType", "Rotation", "Translate" }, null, new[]{ typeof(global::ProtoMath.transform.Types.ROTATION) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoMath.RectTransform), global::ProtoMath.RectTransform.Parser, new[]{ "AnchoredPosition", "AnchorMax", "AnchorMin", "Pivot", "Rect", "OffsetMax", "OffsetMin", "SizeDelta" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class float2 : pb::IMessage<float2> {
    private static readonly pb::MessageParser<float2> _parser = new pb::MessageParser<float2>(() => new float2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<float2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float2(float2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float2 Clone() {
      return new float2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as float2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(float2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(float2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class float3 : pb::IMessage<float3> {
    private static readonly pb::MessageParser<float3> _parser = new pb::MessageParser<float3>(() => new float3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<float3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float3(float3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float3 Clone() {
      return new float3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as float3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(float3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(float3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class float4 : pb::IMessage<float4> {
    private static readonly pb::MessageParser<float4> _parser = new pb::MessageParser<float4>(() => new float4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<float4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float4(float4 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float4 Clone() {
      return new float4(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as float4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(float4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (W != 0F) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(float4 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class int4 : pb::IMessage<int4> {
    private static readonly pb::MessageParser<int4> _parser = new pb::MessageParser<int4>(() => new int4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<int4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int4(int4 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int4 Clone() {
      return new int4(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private int w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as int4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(int4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (W != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(int4 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      if (other.W != 0) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            W = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class quaternion : pb::IMessage<quaternion> {
    private static readonly pb::MessageParser<quaternion> _parser = new pb::MessageParser<quaternion>(() => new quaternion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quaternion(quaternion other) : this() {
      i_ = other.i_;
      j_ = other.j_;
      k_ = other.k_;
      s_ = other.s_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public quaternion Clone() {
      return new quaternion(this);
    }

    /// <summary>Field number for the "i" field.</summary>
    public const int IFieldNumber = 1;
    private float i_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float I {
      get { return i_; }
      set {
        i_ = value;
      }
    }

    /// <summary>Field number for the "j" field.</summary>
    public const int JFieldNumber = 2;
    private float j_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float J {
      get { return j_; }
      set {
        j_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 3;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "s" field.</summary>
    public const int SFieldNumber = 4;
    private float s_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float S {
      get { return s_; }
      set {
        s_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (I != other.I) return false;
      if (J != other.J) return false;
      if (K != other.K) return false;
      if (S != other.S) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (I != 0F) hash ^= I.GetHashCode();
      if (J != 0F) hash ^= J.GetHashCode();
      if (K != 0F) hash ^= K.GetHashCode();
      if (S != 0F) hash ^= S.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (I != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(I);
      }
      if (J != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(J);
      }
      if (K != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(K);
      }
      if (S != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(S);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (I != 0F) {
        size += 1 + 4;
      }
      if (J != 0F) {
        size += 1 + 4;
      }
      if (K != 0F) {
        size += 1 + 4;
      }
      if (S != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(quaternion other) {
      if (other == null) {
        return;
      }
      if (other.I != 0F) {
        I = other.I;
      }
      if (other.J != 0F) {
        J = other.J;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.S != 0F) {
        S = other.S;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            I = input.ReadFloat();
            break;
          }
          case 21: {
            J = input.ReadFloat();
            break;
          }
          case 29: {
            K = input.ReadFloat();
            break;
          }
          case 37: {
            S = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class matrix : pb::IMessage<matrix> {
    private static readonly pb::MessageParser<matrix> _parser = new pb::MessageParser<matrix>(() => new matrix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<matrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public matrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public matrix(matrix other) : this() {
      w_ = other.w_;
      h_ = other.h_;
      m_ = other.m_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public matrix Clone() {
      return new matrix(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private int w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 2;
    private int h_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_m_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> m_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as matrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(matrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (W != other.W) return false;
      if (H != other.H) return false;
      if(!m_.Equals(other.m_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (W != 0) hash ^= W.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      hash ^= m_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (W != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(W);
      }
      if (H != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(H);
      }
      m_.WriteTo(output, _repeated_m_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
      }
      size += m_.CalculateSize(_repeated_m_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(matrix other) {
      if (other == null) {
        return;
      }
      if (other.W != 0) {
        W = other.W;
      }
      if (other.H != 0) {
        H = other.H;
      }
      m_.Add(other.m_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            W = input.ReadInt32();
            break;
          }
          case 16: {
            H = input.ReadInt32();
            break;
          }
          case 26:
          case 29: {
            m_.AddEntriesFrom(input, _repeated_m_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class transform : pb::IMessage<transform> {
    private static readonly pb::MessageParser<transform> _parser = new pb::MessageParser<transform>(() => new transform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public transform(transform other) : this() {
      Scale = other.scale_ != null ? other.Scale.Clone() : null;
      rotType_ = other.rotType_;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      Translate = other.translate_ != null ? other.Translate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public transform Clone() {
      return new transform(this);
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 1;
    private global::ProtoMath.float3 scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rot_type" field.</summary>
    public const int RotTypeFieldNumber = 2;
    private global::ProtoMath.transform.Types.ROTATION rotType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.transform.Types.ROTATION RotType {
      get { return rotType_; }
      set {
        rotType_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::ProtoMath.float4 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "translate" field.</summary>
    public const int TranslateFieldNumber = 4;
    private global::ProtoMath.float3 translate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Translate {
      get { return translate_; }
      set {
        translate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Scale, other.Scale)) return false;
      if (RotType != other.RotType) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Translate, other.Translate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (RotType != 0) hash ^= RotType.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (translate_ != null) hash ^= Translate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scale_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Scale);
      }
      if (RotType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RotType);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (translate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Translate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (RotType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RotType);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (translate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(transform other) {
      if (other == null) {
        return;
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          scale_ = new global::ProtoMath.float3();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.RotType != 0) {
        RotType = other.RotType;
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::ProtoMath.float4();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.translate_ != null) {
        if (translate_ == null) {
          translate_ = new global::ProtoMath.float3();
        }
        Translate.MergeFrom(other.Translate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (scale_ == null) {
              scale_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(scale_);
            break;
          }
          case 16: {
            rotType_ = (global::ProtoMath.transform.Types.ROTATION) input.ReadEnum();
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 34: {
            if (translate_ == null) {
              translate_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(translate_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the transform message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ROTATION {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("DEFAULT")] Default = 1,
        [pbr::OriginalName("QUATERNION")] Quaternion = 2,
        [pbr::OriginalName("EULAR_XYZ")] EularXyz = 3,
        [pbr::OriginalName("EULAR_YZX")] EularYzx = 4,
        [pbr::OriginalName("EULAR_ZXY")] EularZxy = 5,
        [pbr::OriginalName("EULAR_XZY")] EularXzy = 6,
        [pbr::OriginalName("EULAR_YXZ")] EularYxz = 7,
        [pbr::OriginalName("EULAR_ZYX")] EularZyx = 8,
      }

    }
    #endregion

  }

  public sealed partial class RectTransform : pb::IMessage<RectTransform> {
    private static readonly pb::MessageParser<RectTransform> _parser = new pb::MessageParser<RectTransform>(() => new RectTransform());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RectTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoMath.MathReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RectTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RectTransform(RectTransform other) : this() {
      AnchoredPosition = other.anchoredPosition_ != null ? other.AnchoredPosition.Clone() : null;
      AnchorMax = other.anchorMax_ != null ? other.AnchorMax.Clone() : null;
      AnchorMin = other.anchorMin_ != null ? other.AnchorMin.Clone() : null;
      Pivot = other.pivot_ != null ? other.Pivot.Clone() : null;
      Rect = other.rect_ != null ? other.Rect.Clone() : null;
      OffsetMax = other.offsetMax_ != null ? other.OffsetMax.Clone() : null;
      OffsetMin = other.offsetMin_ != null ? other.OffsetMin.Clone() : null;
      SizeDelta = other.sizeDelta_ != null ? other.SizeDelta.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RectTransform Clone() {
      return new RectTransform(this);
    }

    /// <summary>Field number for the "anchored_position" field.</summary>
    public const int AnchoredPositionFieldNumber = 101;
    private global::ProtoMath.float3 anchoredPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 AnchoredPosition {
      get { return anchoredPosition_; }
      set {
        anchoredPosition_ = value;
      }
    }

    /// <summary>Field number for the "anchor_max" field.</summary>
    public const int AnchorMaxFieldNumber = 102;
    private global::ProtoMath.float2 anchorMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 AnchorMax {
      get { return anchorMax_; }
      set {
        anchorMax_ = value;
      }
    }

    /// <summary>Field number for the "anchor_min" field.</summary>
    public const int AnchorMinFieldNumber = 103;
    private global::ProtoMath.float2 anchorMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 AnchorMin {
      get { return anchorMin_; }
      set {
        anchorMin_ = value;
      }
    }

    /// <summary>Field number for the "pivot" field.</summary>
    public const int PivotFieldNumber = 104;
    private global::ProtoMath.float2 pivot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 Pivot {
      get { return pivot_; }
      set {
        pivot_ = value;
      }
    }

    /// <summary>Field number for the "rect" field.</summary>
    public const int RectFieldNumber = 105;
    private global::ProtoMath.float4 rect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Rect {
      get { return rect_; }
      set {
        rect_ = value;
      }
    }

    /// <summary>Field number for the "offset_max" field.</summary>
    public const int OffsetMaxFieldNumber = 106;
    private global::ProtoMath.float2 offsetMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 OffsetMax {
      get { return offsetMax_; }
      set {
        offsetMax_ = value;
      }
    }

    /// <summary>Field number for the "offset_min" field.</summary>
    public const int OffsetMinFieldNumber = 107;
    private global::ProtoMath.float2 offsetMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 OffsetMin {
      get { return offsetMin_; }
      set {
        offsetMin_ = value;
      }
    }

    /// <summary>Field number for the "size_delta" field.</summary>
    public const int SizeDeltaFieldNumber = 108;
    private global::ProtoMath.float2 sizeDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float2 SizeDelta {
      get { return sizeDelta_; }
      set {
        sizeDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RectTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RectTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AnchoredPosition, other.AnchoredPosition)) return false;
      if (!object.Equals(AnchorMax, other.AnchorMax)) return false;
      if (!object.Equals(AnchorMin, other.AnchorMin)) return false;
      if (!object.Equals(Pivot, other.Pivot)) return false;
      if (!object.Equals(Rect, other.Rect)) return false;
      if (!object.Equals(OffsetMax, other.OffsetMax)) return false;
      if (!object.Equals(OffsetMin, other.OffsetMin)) return false;
      if (!object.Equals(SizeDelta, other.SizeDelta)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (anchoredPosition_ != null) hash ^= AnchoredPosition.GetHashCode();
      if (anchorMax_ != null) hash ^= AnchorMax.GetHashCode();
      if (anchorMin_ != null) hash ^= AnchorMin.GetHashCode();
      if (pivot_ != null) hash ^= Pivot.GetHashCode();
      if (rect_ != null) hash ^= Rect.GetHashCode();
      if (offsetMax_ != null) hash ^= OffsetMax.GetHashCode();
      if (offsetMin_ != null) hash ^= OffsetMin.GetHashCode();
      if (sizeDelta_ != null) hash ^= SizeDelta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (anchoredPosition_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(AnchoredPosition);
      }
      if (anchorMax_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(AnchorMax);
      }
      if (anchorMin_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(AnchorMin);
      }
      if (pivot_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(Pivot);
      }
      if (rect_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(Rect);
      }
      if (offsetMax_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(OffsetMax);
      }
      if (offsetMin_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(OffsetMin);
      }
      if (sizeDelta_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(SizeDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (anchoredPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchoredPosition);
      }
      if (anchorMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchorMax);
      }
      if (anchorMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AnchorMin);
      }
      if (pivot_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pivot);
      }
      if (rect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rect);
      }
      if (offsetMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OffsetMax);
      }
      if (offsetMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OffsetMin);
      }
      if (sizeDelta_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SizeDelta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RectTransform other) {
      if (other == null) {
        return;
      }
      if (other.anchoredPosition_ != null) {
        if (anchoredPosition_ == null) {
          anchoredPosition_ = new global::ProtoMath.float3();
        }
        AnchoredPosition.MergeFrom(other.AnchoredPosition);
      }
      if (other.anchorMax_ != null) {
        if (anchorMax_ == null) {
          anchorMax_ = new global::ProtoMath.float2();
        }
        AnchorMax.MergeFrom(other.AnchorMax);
      }
      if (other.anchorMin_ != null) {
        if (anchorMin_ == null) {
          anchorMin_ = new global::ProtoMath.float2();
        }
        AnchorMin.MergeFrom(other.AnchorMin);
      }
      if (other.pivot_ != null) {
        if (pivot_ == null) {
          pivot_ = new global::ProtoMath.float2();
        }
        Pivot.MergeFrom(other.Pivot);
      }
      if (other.rect_ != null) {
        if (rect_ == null) {
          rect_ = new global::ProtoMath.float4();
        }
        Rect.MergeFrom(other.Rect);
      }
      if (other.offsetMax_ != null) {
        if (offsetMax_ == null) {
          offsetMax_ = new global::ProtoMath.float2();
        }
        OffsetMax.MergeFrom(other.OffsetMax);
      }
      if (other.offsetMin_ != null) {
        if (offsetMin_ == null) {
          offsetMin_ = new global::ProtoMath.float2();
        }
        OffsetMin.MergeFrom(other.OffsetMin);
      }
      if (other.sizeDelta_ != null) {
        if (sizeDelta_ == null) {
          sizeDelta_ = new global::ProtoMath.float2();
        }
        SizeDelta.MergeFrom(other.SizeDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            if (anchoredPosition_ == null) {
              anchoredPosition_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(anchoredPosition_);
            break;
          }
          case 818: {
            if (anchorMax_ == null) {
              anchorMax_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(anchorMax_);
            break;
          }
          case 826: {
            if (anchorMin_ == null) {
              anchorMin_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(anchorMin_);
            break;
          }
          case 834: {
            if (pivot_ == null) {
              pivot_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(pivot_);
            break;
          }
          case 842: {
            if (rect_ == null) {
              rect_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(rect_);
            break;
          }
          case 850: {
            if (offsetMax_ == null) {
              offsetMax_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(offsetMax_);
            break;
          }
          case 858: {
            if (offsetMin_ == null) {
              offsetMin_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(offsetMin_);
            break;
          }
          case 866: {
            if (sizeDelta_ == null) {
              sizeDelta_ = new global::ProtoMath.float2();
            }
            input.ReadMessage(sizeDelta_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
