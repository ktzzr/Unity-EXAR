// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoWorld {

  /// <summary>Holder for reflection information generated from animation.proto</summary>
  public static partial class AnimationReflection {

    #region Descriptor
    /// <summary>File descriptor for animation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnimationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hbmltYXRpb24ucHJvdG8SC3Byb3RvX3dvcmxkIpkBCgVDdXJ2ZRIMCgRu",
            "YW1lGGUgASgJEg8KBnRhcmdldBjJASABKAkSEQoIcHJvcGVydHkYygEgASgJ",
            "EhIKCWNvbXBvbmVudBjLASABKAkSDgoFaW5kZXgYzAEgASgFEgwKA2RpbRit",
            "AiABKAUSDQoEdGltZRiuAiADKAISDQoEZGF0YRivAiADKAISDgoFa2V5SUQY",
            "kQMgASgFIkwKBkV2ZW50cxIMCgRuYW1lGGUgASgJEg0KBHRpbWUYyQEgASgC",
            "EhEKCGZ1bmN0aW9uGK0CIAEoCRISCglwYXJhbWV0ZXIYrgIgASgJIoUBCgRD",
            "bGlwEgwKBG5hbWUYZSABKAkSDgoFc3RhcnQYyQEgASgCEg8KBmxlbmd0aBjK",
            "ASABKAISDQoEbG9vcBjLASABKAgSGQoQZnJhbWVfcGVyX3NlY29uZBjMASAB",
            "KAISJAoGZXZlbnRzGK0CIAMoCzITLnByb3RvX3dvcmxkLkV2ZW50cyKsAQoJ",
            "QW5pbWF0aW9uEg8KB3ZlcnNpb24YASABKAkSDAoEbmFtZRhlIAEoCRIMCgRm",
            "aWxlGGYgASgJEg8KBmxlbmd0aBjJASABKAISGQoQZnJhbWVfcGVyX3NlY29u",
            "ZBjKASABKAISIwoGY3VydmVzGK0CIAMoCzISLnByb3RvX3dvcmxkLkN1cnZl",
            "EiEKBWNsaXBzGK4CIAMoCzIRLnByb3RvX3dvcmxkLkNsaXBCAkgDYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Curve), global::ProtoWorld.Curve.Parser, new[]{ "Name", "Target", "Property", "Component", "Index", "Dim", "Time", "Data", "KeyID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Events), global::ProtoWorld.Events.Parser, new[]{ "Name", "Time", "Function", "Parameter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Clip), global::ProtoWorld.Clip.Parser, new[]{ "Name", "Start", "Length", "Loop", "FramePerSecond", "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Animation), global::ProtoWorld.Animation.Parser, new[]{ "Version", "Name", "File", "Length", "FramePerSecond", "Curves", "Clips" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Curve : pb::IMessage<Curve> {
    private static readonly pb::MessageParser<Curve> _parser = new pb::MessageParser<Curve>(() => new Curve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Curve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curve(Curve other) : this() {
      name_ = other.name_;
      target_ = other.target_;
      property_ = other.property_;
      component_ = other.component_;
      index_ = other.index_;
      dim_ = other.dim_;
      time_ = other.time_.Clone();
      data_ = other.data_.Clone();
      keyID_ = other.keyID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Curve Clone() {
      return new Curve(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 201;
    private string target_ = "";
    /// <summary>
    /// path to the joint
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 202;
    private string property_ = "";
    /// <summary>
    /// "translate.x;translate.y;translate.z"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 203;
    private string component_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Component {
      get { return component_; }
      set {
        component_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 204;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "dim" field.</summary>
    public const int DimFieldNumber = 301;
    private int dim_;
    /// <summary>
    /// dimension
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dim {
      get { return dim_; }
      set {
        dim_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 302;
    private static readonly pb::FieldCodec<float> _repeated_time_codec
        = pb::FieldCodec.ForFloat(2418);
    private readonly pbc::RepeatedField<float> time_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Time {
      get { return time_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 303;
    private static readonly pb::FieldCodec<float> _repeated_data_codec
        = pb::FieldCodec.ForFloat(2426);
    private readonly pbc::RepeatedField<float> data_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "keyID" field.</summary>
    public const int KeyIDFieldNumber = 401;
    private int keyID_;
    /// <summary>
    /// (target + property).GetHashCode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyID {
      get { return keyID_; }
      set {
        keyID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Curve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Curve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Target != other.Target) return false;
      if (Property != other.Property) return false;
      if (Component != other.Component) return false;
      if (Index != other.Index) return false;
      if (Dim != other.Dim) return false;
      if(!time_.Equals(other.time_)) return false;
      if(!data_.Equals(other.data_)) return false;
      if (KeyID != other.KeyID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      if (Component.Length != 0) hash ^= Component.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Dim != 0) hash ^= Dim.GetHashCode();
      hash ^= time_.GetHashCode();
      hash ^= data_.GetHashCode();
      if (KeyID != 0) hash ^= KeyID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Target);
      }
      if (Property.Length != 0) {
        output.WriteRawTag(210, 12);
        output.WriteString(Property);
      }
      if (Component.Length != 0) {
        output.WriteRawTag(218, 12);
        output.WriteString(Component);
      }
      if (Index != 0) {
        output.WriteRawTag(224, 12);
        output.WriteInt32(Index);
      }
      if (Dim != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(Dim);
      }
      time_.WriteTo(output, _repeated_time_codec);
      data_.WriteTo(output, _repeated_data_codec);
      if (KeyID != 0) {
        output.WriteRawTag(136, 25);
        output.WriteInt32(KeyID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Target.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (Property.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      if (Component.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Component);
      }
      if (Index != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Dim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Dim);
      }
      size += time_.CalculateSize(_repeated_time_codec);
      size += data_.CalculateSize(_repeated_data_codec);
      if (KeyID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(KeyID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Curve other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      if (other.Component.Length != 0) {
        Component = other.Component;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Dim != 0) {
        Dim = other.Dim;
      }
      time_.Add(other.time_);
      data_.Add(other.data_);
      if (other.KeyID != 0) {
        KeyID = other.KeyID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            Target = input.ReadString();
            break;
          }
          case 1618: {
            Property = input.ReadString();
            break;
          }
          case 1626: {
            Component = input.ReadString();
            break;
          }
          case 1632: {
            Index = input.ReadInt32();
            break;
          }
          case 2408: {
            Dim = input.ReadInt32();
            break;
          }
          case 2418:
          case 2421: {
            time_.AddEntriesFrom(input, _repeated_time_codec);
            break;
          }
          case 2426:
          case 2429: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 3208: {
            KeyID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Events : pb::IMessage<Events> {
    private static readonly pb::MessageParser<Events> _parser = new pb::MessageParser<Events>(() => new Events());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Events> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Events() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Events(Events other) : this() {
      name_ = other.name_;
      time_ = other.time_;
      function_ = other.function_;
      parameter_ = other.parameter_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Events Clone() {
      return new Events(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 201;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 301;
    private string function_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Function {
      get { return function_; }
      set {
        function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameter" field.</summary>
    public const int ParameterFieldNumber = 302;
    private string parameter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parameter {
      get { return parameter_; }
      set {
        parameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Events);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Events other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Time != other.Time) return false;
      if (Function != other.Function) return false;
      if (Parameter != other.Parameter) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Function.Length != 0) hash ^= Function.GetHashCode();
      if (Parameter.Length != 0) hash ^= Parameter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Time != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Time);
      }
      if (Function.Length != 0) {
        output.WriteRawTag(234, 18);
        output.WriteString(Function);
      }
      if (Parameter.Length != 0) {
        output.WriteRawTag(242, 18);
        output.WriteString(Parameter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Time != 0F) {
        size += 2 + 4;
      }
      if (Function.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Function);
      }
      if (Parameter.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Parameter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Events other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Function.Length != 0) {
        Function = other.Function;
      }
      if (other.Parameter.Length != 0) {
        Parameter = other.Parameter;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1613: {
            Time = input.ReadFloat();
            break;
          }
          case 2410: {
            Function = input.ReadString();
            break;
          }
          case 2418: {
            Parameter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Clip : pb::IMessage<Clip> {
    private static readonly pb::MessageParser<Clip> _parser = new pb::MessageParser<Clip>(() => new Clip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Clip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Clip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Clip(Clip other) : this() {
      name_ = other.name_;
      start_ = other.start_;
      length_ = other.length_;
      loop_ = other.loop_;
      framePerSecond_ = other.framePerSecond_;
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Clip Clone() {
      return new Clip(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 201;
    private float start_;
    /// <summary>
    /// starting time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 202;
    private float length_;
    /// <summary>
    /// length
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 203;
    private bool loop_;
    /// <summary>
    /// can loop?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "frame_per_second" field.</summary>
    public const int FramePerSecondFieldNumber = 204;
    private float framePerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FramePerSecond {
      get { return framePerSecond_; }
      set {
        framePerSecond_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.Events> _repeated_events_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.Events.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.Events> events_ = new pbc::RepeatedField<global::ProtoWorld.Events>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.Events> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Clip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Clip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      if (Loop != other.Loop) return false;
      if (FramePerSecond != other.FramePerSecond) return false;
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Start != 0F) hash ^= Start.GetHashCode();
      if (Length != 0F) hash ^= Length.GetHashCode();
      if (Loop != false) hash ^= Loop.GetHashCode();
      if (FramePerSecond != 0F) hash ^= FramePerSecond.GetHashCode();
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Start != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Start);
      }
      if (Length != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Length);
      }
      if (Loop != false) {
        output.WriteRawTag(216, 12);
        output.WriteBool(Loop);
      }
      if (FramePerSecond != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(FramePerSecond);
      }
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Start != 0F) {
        size += 2 + 4;
      }
      if (Length != 0F) {
        size += 2 + 4;
      }
      if (Loop != false) {
        size += 2 + 1;
      }
      if (FramePerSecond != 0F) {
        size += 2 + 4;
      }
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Clip other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Start != 0F) {
        Start = other.Start;
      }
      if (other.Length != 0F) {
        Length = other.Length;
      }
      if (other.Loop != false) {
        Loop = other.Loop;
      }
      if (other.FramePerSecond != 0F) {
        FramePerSecond = other.FramePerSecond;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1613: {
            Start = input.ReadFloat();
            break;
          }
          case 1621: {
            Length = input.ReadFloat();
            break;
          }
          case 1624: {
            Loop = input.ReadBool();
            break;
          }
          case 1637: {
            FramePerSecond = input.ReadFloat();
            break;
          }
          case 2410: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO 等完全使用新架构的动画时，就把Animation去掉，curve放在clip里
  /// </summary>
  public sealed partial class Animation : pb::IMessage<Animation> {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimationReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      version_ = other.version_;
      name_ = other.name_;
      file_ = other.file_;
      length_ = other.length_;
      framePerSecond_ = other.framePerSecond_;
      curves_ = other.curves_.Clone();
      clips_ = other.clips_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 102;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 201;
    private float length_;
    /// <summary>
    /// time in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "frame_per_second" field.</summary>
    public const int FramePerSecondFieldNumber = 202;
    private float framePerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FramePerSecond {
      get { return framePerSecond_; }
      set {
        framePerSecond_ = value;
      }
    }

    /// <summary>Field number for the "curves" field.</summary>
    public const int CurvesFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.Curve> _repeated_curves_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.Curve.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.Curve> curves_ = new pbc::RepeatedField<global::ProtoWorld.Curve>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.Curve> Curves {
      get { return curves_; }
    }

    /// <summary>Field number for the "clips" field.</summary>
    public const int ClipsFieldNumber = 302;
    private static readonly pb::FieldCodec<global::ProtoWorld.Clip> _repeated_clips_codec
        = pb::FieldCodec.ForMessage(2418, global::ProtoWorld.Clip.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.Clip> clips_ = new pbc::RepeatedField<global::ProtoWorld.Clip>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.Clip> Clips {
      get { return clips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (File != other.File) return false;
      if (Length != other.Length) return false;
      if (FramePerSecond != other.FramePerSecond) return false;
      if(!curves_.Equals(other.curves_)) return false;
      if(!clips_.Equals(other.clips_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (Length != 0F) hash ^= Length.GetHashCode();
      if (FramePerSecond != 0F) hash ^= FramePerSecond.GetHashCode();
      hash ^= curves_.GetHashCode();
      hash ^= clips_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (File.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(File);
      }
      if (Length != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Length);
      }
      if (FramePerSecond != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(FramePerSecond);
      }
      curves_.WriteTo(output, _repeated_curves_codec);
      clips_.WriteTo(output, _repeated_clips_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (File.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (Length != 0F) {
        size += 2 + 4;
      }
      if (FramePerSecond != 0F) {
        size += 2 + 4;
      }
      size += curves_.CalculateSize(_repeated_curves_codec);
      size += clips_.CalculateSize(_repeated_clips_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.Length != 0F) {
        Length = other.Length;
      }
      if (other.FramePerSecond != 0F) {
        FramePerSecond = other.FramePerSecond;
      }
      curves_.Add(other.curves_);
      clips_.Add(other.clips_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 818: {
            File = input.ReadString();
            break;
          }
          case 1613: {
            Length = input.ReadFloat();
            break;
          }
          case 1621: {
            FramePerSecond = input.ReadFloat();
            break;
          }
          case 2410: {
            curves_.AddEntriesFrom(input, _repeated_curves_codec);
            break;
          }
          case 2418: {
            clips_.AddEntriesFrom(input, _repeated_clips_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
