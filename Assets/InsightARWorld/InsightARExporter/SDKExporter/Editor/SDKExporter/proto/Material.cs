// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: material.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoWorld {

  /// <summary>Holder for reflection information generated from material.proto</summary>
  public static partial class MaterialReflection {

    #region Descriptor
    /// <summary>File descriptor for material.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MaterialReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tYXRlcmlhbC5wcm90bxILcHJvdG9fd29ybGQaCm1hdGgucHJvdG8aC2Vu",
            "dW1zLnByb3RvItIHCgRQYXNzEgwKBG5hbWUYZSABKAkSFAoLc2hhZGVyX2Zp",
            "bGUYyQEgASgJEjEKC2JsZW5kX2NvbG9yGK0CIAEoDjIbLnByb3RvX3dvcmxk",
            "LkJMRU5EX09QRVJBVE9SEjEKC2JsZW5kX2FscGhhGK4CIAEoDjIbLnByb3Rv",
            "X3dvcmxkLkJMRU5EX09QRVJBVE9SEjMKD2JsZW5kX2NvbG9yX3NyYxivAiAB",
            "KA4yGS5wcm90b193b3JsZC5CTEVORF9GQUNUT1ISNAoQYmxlbmRfY29sb3Jf",
            "ZGVzdBiwAiABKA4yGS5wcm90b193b3JsZC5CTEVORF9GQUNUT1ISMwoPYmxl",
            "bmRfYWxwaGFfc3JjGLECIAEoDjIZLnByb3RvX3dvcmxkLkJMRU5EX0ZBQ1RP",
            "UhI0ChBibGVuZF9hbHBoYV9kZXN0GLICIAEoDjIZLnByb3RvX3dvcmxkLkJM",
            "RU5EX0ZBQ1RPUhIqCgljdWxsX21vZGUYswIgASgOMhYucHJvdG9fd29ybGQu",
            "Q1VMTF9NT0RFEiwKCmRlcHRoX2Z1bmMYtAIgASgOMhcucHJvdG9fd29ybGQu",
            "REVQVEhfRlVOQxIUCgtkZXB0aF93cml0ZRi1AiABKAgSEwoKY29sb3JfbWFz",
            "axi2AiABKAUSFgoNYWxwaGFfdG9fbWFzaxi3AiABKAUSFgoNb2Zmc2V0X2Zh",
            "Y3Rvchi4AiABKAUSFQoMb2Zmc2V0X3VuaXRzGLkCIAEoBRIUCgtzdGVuY2ls",
            "X3JlZhi6AiABKAUSGgoRc3RlbmNpbF9yZWFkX21hc2sYuwIgASgFEhsKEnN0",
            "ZW5jaWxfd3JpdGVfbWFzaxi8AiABKAUSLgoMc3RlbmNpbF9jb21wGL0CIAEo",
            "DjIXLnByb3RvX3dvcmxkLkRFUFRIX0ZVTkMSMQoPc3RlbmNpbF9vcF9wYXNz",
            "GL4CIAEoDjIXLnByb3RvX3dvcmxkLlNURU5DSUxfT1ASMQoPc3RlbmNpbF9v",
            "cF9mYWlsGL8CIAEoDjIXLnByb3RvX3dvcmxkLlNURU5DSUxfT1ASMgoQc3Rl",
            "bmNpbF9vcF96ZmFpbBjAAiABKA4yFy5wcm90b193b3JsZC5TVEVOQ0lMX09Q",
            "EioKBHRhZ3MYkQMgAygLMhsucHJvdG9fd29ybGQuUGFzcy5UYWdzRW50cnkS",
            "LAoKbGlnaHRfbW9kZRj1AyABKA4yFy5wcm90b193b3JsZC5MSUdIVF9NT0RF",
            "GisKCVRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgB",
            "IjsKB01QQ29sb3ISDAoEbmFtZRhlIAEoCRIiCgV2YWx1ZRjJASABKAsyEi5w",
            "cm90b19tYXRoLmZsb2F0NCInCgdNUEZsb2F0EgwKBG5hbWUYZSABKAkSDgoF",
            "dmFsdWUYyQEgASgCIjwKCE1QRmxvYXQ0EgwKBG5hbWUYZSABKAkSIgoFdmFs",
            "dWUYyQEgASgLMhIucHJvdG9fbWF0aC5mbG9hdDQiVQoHTVBSYW5nZRIMCgRu",
            "YW1lGGUgASgJEg4KBXZhbHVlGMkBIAEoAhIMCgNtaW4YygEgASgCEgwKA21h",
            "eBjLASABKAISEAoHZGVmYXVsdBjMASABKAIijQEKDU1QVmlkZW9QbGF5ZXIS",
            "DAoEbmFtZRhlIAEoCRIWCg1wbGF5X29uX2F3YWtlGMkBIAEoCBINCgRsb29w",
            "GMoBIAEoCBITCgpsb29wX2JlZ2luGMsBIAEoAhIRCghsb29wX2VuZBjMASAB",
            "KAISDwoGdm9sdW1lGM0BIAEoAhIOCgVzcGVlZBjOASABKAIiagoJTVBUZXh0",
            "dXJlEgwKBG5hbWUYZSABKAkSDgoFdmFsdWUYyQEgASgJEhIKCXVzZV9kZXB0",
            "aBjKASABKAgSKwoGcGxheWVyGMsBIAEoCzIaLnByb3RvX3dvcmxkLk1QVmlk",
            "ZW9QbGF5ZXIiPwoJUGFzc0dyb3VwEg4KBXVzYWdlGMkBIAEoCRIiCgZwYXNz",
            "ZXMYrQIgAygLMhEucHJvdG9fd29ybGQuUGFzcyK9BAoITWF0ZXJpYWwSDwoH",
            "dmVyc2lvbhgBIAEoCRIMCgRuYW1lGGUgASgJEgwKBGZpbGUYZiABKAkSJQoG",
            "Y29sb3JzGMkBIAMoCzIULnByb3RvX3dvcmxkLk1QQ29sb3ISJwoHZmxvYXQ0",
            "cxjKASADKAsyFS5wcm90b193b3JsZC5NUEZsb2F0NBIlCgZmbG9hdHMYywEg",
            "AygLMhQucHJvdG9fd29ybGQuTVBGbG9hdBIlCgZyYW5nZXMYzAEgAygLMhQu",
            "cHJvdG9fd29ybGQuTVBSYW5nZRIpCgh0ZXh0dXJlcxjNASADKAsyFi5wcm90",
            "b193b3JsZC5NUFRleHR1cmUSIgoGcGFzc2VzGK0CIAMoCzIRLnByb3RvX3dv",
            "cmxkLlBhc3MSLAoLcGFzc19ncm91cHMYrgIgAygLMhYucHJvdG9fd29ybGQu",
            "UGFzc0dyb3VwEjYKCGtleXdvcmRzGJEDIAMoCzIjLnByb3RvX3dvcmxkLk1h",
            "dGVyaWFsLktleXdvcmRzRW50cnkSLgoEdGFncxiSAyADKAsyHy5wcm90b193",
            "b3JsZC5NYXRlcmlhbC5UYWdzRW50cnkSDAoDbG9kGJMDIAEoBRIVCgxyZW5k",
            "ZXJfcXVldWUY9QMgASgFGi8KDUtleXdvcmRzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgIOgI4ARorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4AUICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ProtoMath.MathReflection.Descriptor, global::ProtoWorld.EnumsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Pass), global::ProtoWorld.Pass.Parser, new[]{ "Name", "ShaderFile", "BlendColor", "BlendAlpha", "BlendColorSrc", "BlendColorDest", "BlendAlphaSrc", "BlendAlphaDest", "CullMode", "DepthFunc", "DepthWrite", "ColorMask", "AlphaToMask", "OffsetFactor", "OffsetUnits", "StencilRef", "StencilReadMask", "StencilWriteMask", "StencilComp", "StencilOpPass", "StencilOpFail", "StencilOpZfail", "Tags", "LightMode" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.MPColor), global::ProtoWorld.MPColor.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.MPFloat), global::ProtoWorld.MPFloat.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.MPFloat4), global::ProtoWorld.MPFloat4.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.MPRange), global::ProtoWorld.MPRange.Parser, new[]{ "Name", "Value", "Min", "Max", "Default" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.MPVideoPlayer), global::ProtoWorld.MPVideoPlayer.Parser, new[]{ "Name", "PlayOnAwake", "Loop", "LoopBegin", "LoopEnd", "Volume", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.MPTexture), global::ProtoWorld.MPTexture.Parser, new[]{ "Name", "Value", "UseDepth", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.PassGroup), global::ProtoWorld.PassGroup.Parser, new[]{ "Usage", "Passes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Material), global::ProtoWorld.Material.Parser, new[]{ "Version", "Name", "File", "Colors", "Float4S", "Floats", "Ranges", "Textures", "Passes", "PassGroups", "Keywords", "Tags", "Lod", "RenderQueue" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Pass : pb::IMessage<Pass> {
    private static readonly pb::MessageParser<Pass> _parser = new pb::MessageParser<Pass>(() => new Pass());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pass() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pass(Pass other) : this() {
      name_ = other.name_;
      shaderFile_ = other.shaderFile_;
      blendColor_ = other.blendColor_;
      blendAlpha_ = other.blendAlpha_;
      blendColorSrc_ = other.blendColorSrc_;
      blendColorDest_ = other.blendColorDest_;
      blendAlphaSrc_ = other.blendAlphaSrc_;
      blendAlphaDest_ = other.blendAlphaDest_;
      cullMode_ = other.cullMode_;
      depthFunc_ = other.depthFunc_;
      depthWrite_ = other.depthWrite_;
      colorMask_ = other.colorMask_;
      alphaToMask_ = other.alphaToMask_;
      offsetFactor_ = other.offsetFactor_;
      offsetUnits_ = other.offsetUnits_;
      stencilRef_ = other.stencilRef_;
      stencilReadMask_ = other.stencilReadMask_;
      stencilWriteMask_ = other.stencilWriteMask_;
      stencilComp_ = other.stencilComp_;
      stencilOpPass_ = other.stencilOpPass_;
      stencilOpFail_ = other.stencilOpFail_;
      stencilOpZfail_ = other.stencilOpZfail_;
      tags_ = other.tags_.Clone();
      lightMode_ = other.lightMode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pass Clone() {
      return new Pass(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shader_file" field.</summary>
    public const int ShaderFileFieldNumber = 201;
    private string shaderFile_ = "";
    /// <summary>
    /// name of shader
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShaderFile {
      get { return shaderFile_; }
      set {
        shaderFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blend_color" field.</summary>
    public const int BlendColorFieldNumber = 301;
    private global::ProtoWorld.BLEND_OPERATOR blendColor_ = 0;
    /// <summary>
    /// BLEND MODE and CULL MODE
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BLEND_OPERATOR BlendColor {
      get { return blendColor_; }
      set {
        blendColor_ = value;
      }
    }

    /// <summary>Field number for the "blend_alpha" field.</summary>
    public const int BlendAlphaFieldNumber = 302;
    private global::ProtoWorld.BLEND_OPERATOR blendAlpha_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BLEND_OPERATOR BlendAlpha {
      get { return blendAlpha_; }
      set {
        blendAlpha_ = value;
      }
    }

    /// <summary>Field number for the "blend_color_src" field.</summary>
    public const int BlendColorSrcFieldNumber = 303;
    private global::ProtoWorld.BLEND_FACTOR blendColorSrc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BLEND_FACTOR BlendColorSrc {
      get { return blendColorSrc_; }
      set {
        blendColorSrc_ = value;
      }
    }

    /// <summary>Field number for the "blend_color_dest" field.</summary>
    public const int BlendColorDestFieldNumber = 304;
    private global::ProtoWorld.BLEND_FACTOR blendColorDest_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BLEND_FACTOR BlendColorDest {
      get { return blendColorDest_; }
      set {
        blendColorDest_ = value;
      }
    }

    /// <summary>Field number for the "blend_alpha_src" field.</summary>
    public const int BlendAlphaSrcFieldNumber = 305;
    private global::ProtoWorld.BLEND_FACTOR blendAlphaSrc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BLEND_FACTOR BlendAlphaSrc {
      get { return blendAlphaSrc_; }
      set {
        blendAlphaSrc_ = value;
      }
    }

    /// <summary>Field number for the "blend_alpha_dest" field.</summary>
    public const int BlendAlphaDestFieldNumber = 306;
    private global::ProtoWorld.BLEND_FACTOR blendAlphaDest_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BLEND_FACTOR BlendAlphaDest {
      get { return blendAlphaDest_; }
      set {
        blendAlphaDest_ = value;
      }
    }

    /// <summary>Field number for the "cull_mode" field.</summary>
    public const int CullModeFieldNumber = 307;
    private global::ProtoWorld.CULL_MODE cullMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.CULL_MODE CullMode {
      get { return cullMode_; }
      set {
        cullMode_ = value;
      }
    }

    /// <summary>Field number for the "depth_func" field.</summary>
    public const int DepthFuncFieldNumber = 308;
    private global::ProtoWorld.DEPTH_FUNC depthFunc_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.DEPTH_FUNC DepthFunc {
      get { return depthFunc_; }
      set {
        depthFunc_ = value;
      }
    }

    /// <summary>Field number for the "depth_write" field.</summary>
    public const int DepthWriteFieldNumber = 309;
    private bool depthWrite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DepthWrite {
      get { return depthWrite_; }
      set {
        depthWrite_ = value;
      }
    }

    /// <summary>Field number for the "color_mask" field.</summary>
    public const int ColorMaskFieldNumber = 310;
    private int colorMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorMask {
      get { return colorMask_; }
      set {
        colorMask_ = value;
      }
    }

    /// <summary>Field number for the "alpha_to_mask" field.</summary>
    public const int AlphaToMaskFieldNumber = 311;
    private int alphaToMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AlphaToMask {
      get { return alphaToMask_; }
      set {
        alphaToMask_ = value;
      }
    }

    /// <summary>Field number for the "offset_factor" field.</summary>
    public const int OffsetFactorFieldNumber = 312;
    private int offsetFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetFactor {
      get { return offsetFactor_; }
      set {
        offsetFactor_ = value;
      }
    }

    /// <summary>Field number for the "offset_units" field.</summary>
    public const int OffsetUnitsFieldNumber = 313;
    private int offsetUnits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetUnits {
      get { return offsetUnits_; }
      set {
        offsetUnits_ = value;
      }
    }

    /// <summary>Field number for the "stencil_ref" field.</summary>
    public const int StencilRefFieldNumber = 314;
    private int stencilRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StencilRef {
      get { return stencilRef_; }
      set {
        stencilRef_ = value;
      }
    }

    /// <summary>Field number for the "stencil_read_mask" field.</summary>
    public const int StencilReadMaskFieldNumber = 315;
    private int stencilReadMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StencilReadMask {
      get { return stencilReadMask_; }
      set {
        stencilReadMask_ = value;
      }
    }

    /// <summary>Field number for the "stencil_write_mask" field.</summary>
    public const int StencilWriteMaskFieldNumber = 316;
    private int stencilWriteMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StencilWriteMask {
      get { return stencilWriteMask_; }
      set {
        stencilWriteMask_ = value;
      }
    }

    /// <summary>Field number for the "stencil_comp" field.</summary>
    public const int StencilCompFieldNumber = 317;
    private global::ProtoWorld.DEPTH_FUNC stencilComp_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.DEPTH_FUNC StencilComp {
      get { return stencilComp_; }
      set {
        stencilComp_ = value;
      }
    }

    /// <summary>Field number for the "stencil_op_pass" field.</summary>
    public const int StencilOpPassFieldNumber = 318;
    private global::ProtoWorld.STENCIL_OP stencilOpPass_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.STENCIL_OP StencilOpPass {
      get { return stencilOpPass_; }
      set {
        stencilOpPass_ = value;
      }
    }

    /// <summary>Field number for the "stencil_op_fail" field.</summary>
    public const int StencilOpFailFieldNumber = 319;
    private global::ProtoWorld.STENCIL_OP stencilOpFail_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.STENCIL_OP StencilOpFail {
      get { return stencilOpFail_; }
      set {
        stencilOpFail_ = value;
      }
    }

    /// <summary>Field number for the "stencil_op_zfail" field.</summary>
    public const int StencilOpZfailFieldNumber = 320;
    private global::ProtoWorld.STENCIL_OP stencilOpZfail_ = 0;
    /// <summary>
    /// ---------------------------------------
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.STENCIL_OP StencilOpZfail {
      get { return stencilOpZfail_; }
      set {
        stencilOpZfail_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 401;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 3210);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// tags only valid in passes - LightMode / PassFlags / RequireOptions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "light_mode" field.</summary>
    public const int LightModeFieldNumber = 501;
    private global::ProtoWorld.LIGHT_MODE lightMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.LIGHT_MODE LightMode {
      get { return lightMode_; }
      set {
        lightMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pass other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShaderFile != other.ShaderFile) return false;
      if (BlendColor != other.BlendColor) return false;
      if (BlendAlpha != other.BlendAlpha) return false;
      if (BlendColorSrc != other.BlendColorSrc) return false;
      if (BlendColorDest != other.BlendColorDest) return false;
      if (BlendAlphaSrc != other.BlendAlphaSrc) return false;
      if (BlendAlphaDest != other.BlendAlphaDest) return false;
      if (CullMode != other.CullMode) return false;
      if (DepthFunc != other.DepthFunc) return false;
      if (DepthWrite != other.DepthWrite) return false;
      if (ColorMask != other.ColorMask) return false;
      if (AlphaToMask != other.AlphaToMask) return false;
      if (OffsetFactor != other.OffsetFactor) return false;
      if (OffsetUnits != other.OffsetUnits) return false;
      if (StencilRef != other.StencilRef) return false;
      if (StencilReadMask != other.StencilReadMask) return false;
      if (StencilWriteMask != other.StencilWriteMask) return false;
      if (StencilComp != other.StencilComp) return false;
      if (StencilOpPass != other.StencilOpPass) return false;
      if (StencilOpFail != other.StencilOpFail) return false;
      if (StencilOpZfail != other.StencilOpZfail) return false;
      if (!Tags.Equals(other.Tags)) return false;
      if (LightMode != other.LightMode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShaderFile.Length != 0) hash ^= ShaderFile.GetHashCode();
      if (BlendColor != 0) hash ^= BlendColor.GetHashCode();
      if (BlendAlpha != 0) hash ^= BlendAlpha.GetHashCode();
      if (BlendColorSrc != 0) hash ^= BlendColorSrc.GetHashCode();
      if (BlendColorDest != 0) hash ^= BlendColorDest.GetHashCode();
      if (BlendAlphaSrc != 0) hash ^= BlendAlphaSrc.GetHashCode();
      if (BlendAlphaDest != 0) hash ^= BlendAlphaDest.GetHashCode();
      if (CullMode != 0) hash ^= CullMode.GetHashCode();
      if (DepthFunc != 0) hash ^= DepthFunc.GetHashCode();
      if (DepthWrite != false) hash ^= DepthWrite.GetHashCode();
      if (ColorMask != 0) hash ^= ColorMask.GetHashCode();
      if (AlphaToMask != 0) hash ^= AlphaToMask.GetHashCode();
      if (OffsetFactor != 0) hash ^= OffsetFactor.GetHashCode();
      if (OffsetUnits != 0) hash ^= OffsetUnits.GetHashCode();
      if (StencilRef != 0) hash ^= StencilRef.GetHashCode();
      if (StencilReadMask != 0) hash ^= StencilReadMask.GetHashCode();
      if (StencilWriteMask != 0) hash ^= StencilWriteMask.GetHashCode();
      if (StencilComp != 0) hash ^= StencilComp.GetHashCode();
      if (StencilOpPass != 0) hash ^= StencilOpPass.GetHashCode();
      if (StencilOpFail != 0) hash ^= StencilOpFail.GetHashCode();
      if (StencilOpZfail != 0) hash ^= StencilOpZfail.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (LightMode != 0) hash ^= LightMode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (ShaderFile.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(ShaderFile);
      }
      if (BlendColor != 0) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) BlendColor);
      }
      if (BlendAlpha != 0) {
        output.WriteRawTag(240, 18);
        output.WriteEnum((int) BlendAlpha);
      }
      if (BlendColorSrc != 0) {
        output.WriteRawTag(248, 18);
        output.WriteEnum((int) BlendColorSrc);
      }
      if (BlendColorDest != 0) {
        output.WriteRawTag(128, 19);
        output.WriteEnum((int) BlendColorDest);
      }
      if (BlendAlphaSrc != 0) {
        output.WriteRawTag(136, 19);
        output.WriteEnum((int) BlendAlphaSrc);
      }
      if (BlendAlphaDest != 0) {
        output.WriteRawTag(144, 19);
        output.WriteEnum((int) BlendAlphaDest);
      }
      if (CullMode != 0) {
        output.WriteRawTag(152, 19);
        output.WriteEnum((int) CullMode);
      }
      if (DepthFunc != 0) {
        output.WriteRawTag(160, 19);
        output.WriteEnum((int) DepthFunc);
      }
      if (DepthWrite != false) {
        output.WriteRawTag(168, 19);
        output.WriteBool(DepthWrite);
      }
      if (ColorMask != 0) {
        output.WriteRawTag(176, 19);
        output.WriteInt32(ColorMask);
      }
      if (AlphaToMask != 0) {
        output.WriteRawTag(184, 19);
        output.WriteInt32(AlphaToMask);
      }
      if (OffsetFactor != 0) {
        output.WriteRawTag(192, 19);
        output.WriteInt32(OffsetFactor);
      }
      if (OffsetUnits != 0) {
        output.WriteRawTag(200, 19);
        output.WriteInt32(OffsetUnits);
      }
      if (StencilRef != 0) {
        output.WriteRawTag(208, 19);
        output.WriteInt32(StencilRef);
      }
      if (StencilReadMask != 0) {
        output.WriteRawTag(216, 19);
        output.WriteInt32(StencilReadMask);
      }
      if (StencilWriteMask != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(StencilWriteMask);
      }
      if (StencilComp != 0) {
        output.WriteRawTag(232, 19);
        output.WriteEnum((int) StencilComp);
      }
      if (StencilOpPass != 0) {
        output.WriteRawTag(240, 19);
        output.WriteEnum((int) StencilOpPass);
      }
      if (StencilOpFail != 0) {
        output.WriteRawTag(248, 19);
        output.WriteEnum((int) StencilOpFail);
      }
      if (StencilOpZfail != 0) {
        output.WriteRawTag(128, 20);
        output.WriteEnum((int) StencilOpZfail);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (LightMode != 0) {
        output.WriteRawTag(168, 31);
        output.WriteEnum((int) LightMode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShaderFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShaderFile);
      }
      if (BlendColor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlendColor);
      }
      if (BlendAlpha != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlendAlpha);
      }
      if (BlendColorSrc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlendColorSrc);
      }
      if (BlendColorDest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlendColorDest);
      }
      if (BlendAlphaSrc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlendAlphaSrc);
      }
      if (BlendAlphaDest != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BlendAlphaDest);
      }
      if (CullMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CullMode);
      }
      if (DepthFunc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DepthFunc);
      }
      if (DepthWrite != false) {
        size += 2 + 1;
      }
      if (ColorMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ColorMask);
      }
      if (AlphaToMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AlphaToMask);
      }
      if (OffsetFactor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OffsetFactor);
      }
      if (OffsetUnits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OffsetUnits);
      }
      if (StencilRef != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StencilRef);
      }
      if (StencilReadMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StencilReadMask);
      }
      if (StencilWriteMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StencilWriteMask);
      }
      if (StencilComp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StencilComp);
      }
      if (StencilOpPass != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StencilOpPass);
      }
      if (StencilOpFail != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StencilOpFail);
      }
      if (StencilOpZfail != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StencilOpZfail);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (LightMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LightMode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pass other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShaderFile.Length != 0) {
        ShaderFile = other.ShaderFile;
      }
      if (other.BlendColor != 0) {
        BlendColor = other.BlendColor;
      }
      if (other.BlendAlpha != 0) {
        BlendAlpha = other.BlendAlpha;
      }
      if (other.BlendColorSrc != 0) {
        BlendColorSrc = other.BlendColorSrc;
      }
      if (other.BlendColorDest != 0) {
        BlendColorDest = other.BlendColorDest;
      }
      if (other.BlendAlphaSrc != 0) {
        BlendAlphaSrc = other.BlendAlphaSrc;
      }
      if (other.BlendAlphaDest != 0) {
        BlendAlphaDest = other.BlendAlphaDest;
      }
      if (other.CullMode != 0) {
        CullMode = other.CullMode;
      }
      if (other.DepthFunc != 0) {
        DepthFunc = other.DepthFunc;
      }
      if (other.DepthWrite != false) {
        DepthWrite = other.DepthWrite;
      }
      if (other.ColorMask != 0) {
        ColorMask = other.ColorMask;
      }
      if (other.AlphaToMask != 0) {
        AlphaToMask = other.AlphaToMask;
      }
      if (other.OffsetFactor != 0) {
        OffsetFactor = other.OffsetFactor;
      }
      if (other.OffsetUnits != 0) {
        OffsetUnits = other.OffsetUnits;
      }
      if (other.StencilRef != 0) {
        StencilRef = other.StencilRef;
      }
      if (other.StencilReadMask != 0) {
        StencilReadMask = other.StencilReadMask;
      }
      if (other.StencilWriteMask != 0) {
        StencilWriteMask = other.StencilWriteMask;
      }
      if (other.StencilComp != 0) {
        StencilComp = other.StencilComp;
      }
      if (other.StencilOpPass != 0) {
        StencilOpPass = other.StencilOpPass;
      }
      if (other.StencilOpFail != 0) {
        StencilOpFail = other.StencilOpFail;
      }
      if (other.StencilOpZfail != 0) {
        StencilOpZfail = other.StencilOpZfail;
      }
      tags_.Add(other.tags_);
      if (other.LightMode != 0) {
        LightMode = other.LightMode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            ShaderFile = input.ReadString();
            break;
          }
          case 2408: {
            blendColor_ = (global::ProtoWorld.BLEND_OPERATOR) input.ReadEnum();
            break;
          }
          case 2416: {
            blendAlpha_ = (global::ProtoWorld.BLEND_OPERATOR) input.ReadEnum();
            break;
          }
          case 2424: {
            blendColorSrc_ = (global::ProtoWorld.BLEND_FACTOR) input.ReadEnum();
            break;
          }
          case 2432: {
            blendColorDest_ = (global::ProtoWorld.BLEND_FACTOR) input.ReadEnum();
            break;
          }
          case 2440: {
            blendAlphaSrc_ = (global::ProtoWorld.BLEND_FACTOR) input.ReadEnum();
            break;
          }
          case 2448: {
            blendAlphaDest_ = (global::ProtoWorld.BLEND_FACTOR) input.ReadEnum();
            break;
          }
          case 2456: {
            cullMode_ = (global::ProtoWorld.CULL_MODE) input.ReadEnum();
            break;
          }
          case 2464: {
            depthFunc_ = (global::ProtoWorld.DEPTH_FUNC) input.ReadEnum();
            break;
          }
          case 2472: {
            DepthWrite = input.ReadBool();
            break;
          }
          case 2480: {
            ColorMask = input.ReadInt32();
            break;
          }
          case 2488: {
            AlphaToMask = input.ReadInt32();
            break;
          }
          case 2496: {
            OffsetFactor = input.ReadInt32();
            break;
          }
          case 2504: {
            OffsetUnits = input.ReadInt32();
            break;
          }
          case 2512: {
            StencilRef = input.ReadInt32();
            break;
          }
          case 2520: {
            StencilReadMask = input.ReadInt32();
            break;
          }
          case 2528: {
            StencilWriteMask = input.ReadInt32();
            break;
          }
          case 2536: {
            stencilComp_ = (global::ProtoWorld.DEPTH_FUNC) input.ReadEnum();
            break;
          }
          case 2544: {
            stencilOpPass_ = (global::ProtoWorld.STENCIL_OP) input.ReadEnum();
            break;
          }
          case 2552: {
            stencilOpFail_ = (global::ProtoWorld.STENCIL_OP) input.ReadEnum();
            break;
          }
          case 2560: {
            stencilOpZfail_ = (global::ProtoWorld.STENCIL_OP) input.ReadEnum();
            break;
          }
          case 3210: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 4008: {
            lightMode_ = (global::ProtoWorld.LIGHT_MODE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MPColor : pb::IMessage<MPColor> {
    private static readonly pb::MessageParser<MPColor> _parser = new pb::MessageParser<MPColor>(() => new MPColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPColor(MPColor other) : this() {
      name_ = other.name_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPColor Clone() {
      return new MPColor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 201;
    private global::ProtoMath.float4 value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (value_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (value_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPColor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::ProtoMath.float4();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            if (value_ == null) {
              value_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MPFloat : pb::IMessage<MPFloat> {
    private static readonly pb::MessageParser<MPFloat> _parser = new pb::MessageParser<MPFloat>(() => new MPFloat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPFloat(MPFloat other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPFloat Clone() {
      return new MPFloat(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 201;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Value != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPFloat other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1613: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MPFloat4 : pb::IMessage<MPFloat4> {
    private static readonly pb::MessageParser<MPFloat4> _parser = new pb::MessageParser<MPFloat4>(() => new MPFloat4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPFloat4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPFloat4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPFloat4(MPFloat4 other) : this() {
      name_ = other.name_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPFloat4 Clone() {
      return new MPFloat4(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 201;
    private global::ProtoMath.float4 value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPFloat4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPFloat4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (value_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (value_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPFloat4 other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::ProtoMath.float4();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            if (value_ == null) {
              value_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MPRange : pb::IMessage<MPRange> {
    private static readonly pb::MessageParser<MPRange> _parser = new pb::MessageParser<MPRange>(() => new MPRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPRange(MPRange other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      min_ = other.min_;
      max_ = other.max_;
      default_ = other.default_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPRange Clone() {
      return new MPRange(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 201;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 202;
    private float min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 203;
    private float max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 204;
    private float default_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Default {
      get { return default_; }
      set {
        default_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      if (Default != other.Default) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      if (Min != 0F) hash ^= Min.GetHashCode();
      if (Max != 0F) hash ^= Max.GetHashCode();
      if (Default != 0F) hash ^= Default.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Value != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Value);
      }
      if (Min != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(Max);
      }
      if (Default != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(Default);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0F) {
        size += 2 + 4;
      }
      if (Min != 0F) {
        size += 2 + 4;
      }
      if (Max != 0F) {
        size += 2 + 4;
      }
      if (Default != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPRange other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      if (other.Default != 0F) {
        Default = other.Default;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1613: {
            Value = input.ReadFloat();
            break;
          }
          case 1621: {
            Min = input.ReadFloat();
            break;
          }
          case 1629: {
            Max = input.ReadFloat();
            break;
          }
          case 1637: {
            Default = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///TODO useless after 1.7
  /// </summary>
  public sealed partial class MPVideoPlayer : pb::IMessage<MPVideoPlayer> {
    private static readonly pb::MessageParser<MPVideoPlayer> _parser = new pb::MessageParser<MPVideoPlayer>(() => new MPVideoPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPVideoPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPVideoPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPVideoPlayer(MPVideoPlayer other) : this() {
      name_ = other.name_;
      playOnAwake_ = other.playOnAwake_;
      loop_ = other.loop_;
      loopBegin_ = other.loopBegin_;
      loopEnd_ = other.loopEnd_;
      volume_ = other.volume_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPVideoPlayer Clone() {
      return new MPVideoPlayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "play_on_awake" field.</summary>
    public const int PlayOnAwakeFieldNumber = 201;
    private bool playOnAwake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayOnAwake {
      get { return playOnAwake_; }
      set {
        playOnAwake_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 202;
    private bool loop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "loop_begin" field.</summary>
    public const int LoopBeginFieldNumber = 203;
    private float loopBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoopBegin {
      get { return loopBegin_; }
      set {
        loopBegin_ = value;
      }
    }

    /// <summary>Field number for the "loop_end" field.</summary>
    public const int LoopEndFieldNumber = 204;
    private float loopEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LoopEnd {
      get { return loopEnd_; }
      set {
        loopEnd_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 205;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 206;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPVideoPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPVideoPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PlayOnAwake != other.PlayOnAwake) return false;
      if (Loop != other.Loop) return false;
      if (LoopBegin != other.LoopBegin) return false;
      if (LoopEnd != other.LoopEnd) return false;
      if (Volume != other.Volume) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PlayOnAwake != false) hash ^= PlayOnAwake.GetHashCode();
      if (Loop != false) hash ^= Loop.GetHashCode();
      if (LoopBegin != 0F) hash ^= LoopBegin.GetHashCode();
      if (LoopEnd != 0F) hash ^= LoopEnd.GetHashCode();
      if (Volume != 0F) hash ^= Volume.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (PlayOnAwake != false) {
        output.WriteRawTag(200, 12);
        output.WriteBool(PlayOnAwake);
      }
      if (Loop != false) {
        output.WriteRawTag(208, 12);
        output.WriteBool(Loop);
      }
      if (LoopBegin != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(LoopBegin);
      }
      if (LoopEnd != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(LoopEnd);
      }
      if (Volume != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(Volume);
      }
      if (Speed != 0F) {
        output.WriteRawTag(245, 12);
        output.WriteFloat(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PlayOnAwake != false) {
        size += 2 + 1;
      }
      if (Loop != false) {
        size += 2 + 1;
      }
      if (LoopBegin != 0F) {
        size += 2 + 4;
      }
      if (LoopEnd != 0F) {
        size += 2 + 4;
      }
      if (Volume != 0F) {
        size += 2 + 4;
      }
      if (Speed != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPVideoPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PlayOnAwake != false) {
        PlayOnAwake = other.PlayOnAwake;
      }
      if (other.Loop != false) {
        Loop = other.Loop;
      }
      if (other.LoopBegin != 0F) {
        LoopBegin = other.LoopBegin;
      }
      if (other.LoopEnd != 0F) {
        LoopEnd = other.LoopEnd;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1608: {
            PlayOnAwake = input.ReadBool();
            break;
          }
          case 1616: {
            Loop = input.ReadBool();
            break;
          }
          case 1629: {
            LoopBegin = input.ReadFloat();
            break;
          }
          case 1637: {
            LoopEnd = input.ReadFloat();
            break;
          }
          case 1645: {
            Volume = input.ReadFloat();
            break;
          }
          case 1653: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MPTexture : pb::IMessage<MPTexture> {
    private static readonly pb::MessageParser<MPTexture> _parser = new pb::MessageParser<MPTexture>(() => new MPTexture());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPTexture> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPTexture() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPTexture(MPTexture other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      useDepth_ = other.useDepth_;
      Player = other.player_ != null ? other.Player.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPTexture Clone() {
      return new MPTexture(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 201;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_depth" field.</summary>
    public const int UseDepthFieldNumber = 202;
    private bool useDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDepth {
      get { return useDepth_; }
      set {
        useDepth_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 203;
    private global::ProtoWorld.MPVideoPlayer player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.MPVideoPlayer Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPTexture);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPTexture other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (UseDepth != other.UseDepth) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (UseDepth != false) hash ^= UseDepth.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Value);
      }
      if (UseDepth != false) {
        output.WriteRawTag(208, 12);
        output.WriteBool(UseDepth);
      }
      if (player_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (UseDepth != false) {
        size += 2 + 1;
      }
      if (player_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPTexture other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.UseDepth != false) {
        UseDepth = other.UseDepth;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::ProtoWorld.MPVideoPlayer();
        }
        Player.MergeFrom(other.Player);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            Value = input.ReadString();
            break;
          }
          case 1616: {
            UseDepth = input.ReadBool();
            break;
          }
          case 1626: {
            if (player_ == null) {
              player_ = new global::ProtoWorld.MPVideoPlayer();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassGroup : pb::IMessage<PassGroup> {
    private static readonly pb::MessageParser<PassGroup> _parser = new pb::MessageParser<PassGroup>(() => new PassGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGroup(PassGroup other) : this() {
      usage_ = other.usage_;
      passes_ = other.passes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassGroup Clone() {
      return new PassGroup(this);
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 201;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passes" field.</summary>
    public const int PassesFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.Pass> _repeated_passes_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.Pass.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.Pass> passes_ = new pbc::RepeatedField<global::ProtoWorld.Pass>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.Pass> Passes {
      get { return passes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Usage != other.Usage) return false;
      if(!passes_.Equals(other.passes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      hash ^= passes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Usage.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Usage);
      }
      passes_.WriteTo(output, _repeated_passes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Usage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      size += passes_.CalculateSize(_repeated_passes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassGroup other) {
      if (other == null) {
        return;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      passes_.Add(other.passes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 1610: {
            Usage = input.ReadString();
            break;
          }
          case 2410: {
            passes_.AddEntriesFrom(input, _repeated_passes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.MaterialReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material(Material other) : this() {
      version_ = other.version_;
      name_ = other.name_;
      file_ = other.file_;
      colors_ = other.colors_.Clone();
      float4S_ = other.float4S_.Clone();
      floats_ = other.floats_.Clone();
      ranges_ = other.ranges_.Clone();
      textures_ = other.textures_.Clone();
      passes_ = other.passes_.Clone();
      passGroups_ = other.passGroups_.Clone();
      keywords_ = other.keywords_.Clone();
      tags_ = other.tags_.Clone();
      lod_ = other.lod_;
      renderQueue_ = other.renderQueue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 102;
    private string file_ = "";
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 201;
    private static readonly pb::FieldCodec<global::ProtoWorld.MPColor> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(1610, global::ProtoWorld.MPColor.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.MPColor> colors_ = new pbc::RepeatedField<global::ProtoWorld.MPColor>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.MPColor> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "float4s" field.</summary>
    public const int Float4SFieldNumber = 202;
    private static readonly pb::FieldCodec<global::ProtoWorld.MPFloat4> _repeated_float4S_codec
        = pb::FieldCodec.ForMessage(1618, global::ProtoWorld.MPFloat4.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.MPFloat4> float4S_ = new pbc::RepeatedField<global::ProtoWorld.MPFloat4>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.MPFloat4> Float4S {
      get { return float4S_; }
    }

    /// <summary>Field number for the "floats" field.</summary>
    public const int FloatsFieldNumber = 203;
    private static readonly pb::FieldCodec<global::ProtoWorld.MPFloat> _repeated_floats_codec
        = pb::FieldCodec.ForMessage(1626, global::ProtoWorld.MPFloat.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.MPFloat> floats_ = new pbc::RepeatedField<global::ProtoWorld.MPFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.MPFloat> Floats {
      get { return floats_; }
    }

    /// <summary>Field number for the "ranges" field.</summary>
    public const int RangesFieldNumber = 204;
    private static readonly pb::FieldCodec<global::ProtoWorld.MPRange> _repeated_ranges_codec
        = pb::FieldCodec.ForMessage(1634, global::ProtoWorld.MPRange.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.MPRange> ranges_ = new pbc::RepeatedField<global::ProtoWorld.MPRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.MPRange> Ranges {
      get { return ranges_; }
    }

    /// <summary>Field number for the "textures" field.</summary>
    public const int TexturesFieldNumber = 205;
    private static readonly pb::FieldCodec<global::ProtoWorld.MPTexture> _repeated_textures_codec
        = pb::FieldCodec.ForMessage(1642, global::ProtoWorld.MPTexture.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.MPTexture> textures_ = new pbc::RepeatedField<global::ProtoWorld.MPTexture>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.MPTexture> Textures {
      get { return textures_; }
    }

    /// <summary>Field number for the "passes" field.</summary>
    public const int PassesFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.Pass> _repeated_passes_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.Pass.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.Pass> passes_ = new pbc::RepeatedField<global::ProtoWorld.Pass>();
    /// <summary>
    /// deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.Pass> Passes {
      get { return passes_; }
    }

    /// <summary>Field number for the "pass_groups" field.</summary>
    public const int PassGroupsFieldNumber = 302;
    private static readonly pb::FieldCodec<global::ProtoWorld.PassGroup> _repeated_passGroups_codec
        = pb::FieldCodec.ForMessage(2418, global::ProtoWorld.PassGroup.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.PassGroup> passGroups_ = new pbc::RepeatedField<global::ProtoWorld.PassGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.PassGroup> PassGroups {
      get { return passGroups_; }
    }

    /// <summary>Field number for the "keywords" field.</summary>
    public const int KeywordsFieldNumber = 401;
    private static readonly pbc::MapField<string, bool>.Codec _map_keywords_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 3210);
    private readonly pbc::MapField<string, bool> keywords_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Keywords {
      get { return keywords_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 402;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 3218);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "lod" field.</summary>
    public const int LodFieldNumber = 403;
    private int lod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lod {
      get { return lod_; }
      set {
        lod_ = value;
      }
    }

    /// <summary>Field number for the "render_queue" field.</summary>
    public const int RenderQueueFieldNumber = 501;
    private int renderQueue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RenderQueue {
      get { return renderQueue_; }
      set {
        renderQueue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (File != other.File) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if(!float4S_.Equals(other.float4S_)) return false;
      if(!floats_.Equals(other.floats_)) return false;
      if(!ranges_.Equals(other.ranges_)) return false;
      if(!textures_.Equals(other.textures_)) return false;
      if(!passes_.Equals(other.passes_)) return false;
      if(!passGroups_.Equals(other.passGroups_)) return false;
      if (!Keywords.Equals(other.Keywords)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      if (Lod != other.Lod) return false;
      if (RenderQueue != other.RenderQueue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      hash ^= colors_.GetHashCode();
      hash ^= float4S_.GetHashCode();
      hash ^= floats_.GetHashCode();
      hash ^= ranges_.GetHashCode();
      hash ^= textures_.GetHashCode();
      hash ^= passes_.GetHashCode();
      hash ^= passGroups_.GetHashCode();
      hash ^= Keywords.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (Lod != 0) hash ^= Lod.GetHashCode();
      if (RenderQueue != 0) hash ^= RenderQueue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (File.Length != 0) {
        output.WriteRawTag(178, 6);
        output.WriteString(File);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
      float4S_.WriteTo(output, _repeated_float4S_codec);
      floats_.WriteTo(output, _repeated_floats_codec);
      ranges_.WriteTo(output, _repeated_ranges_codec);
      textures_.WriteTo(output, _repeated_textures_codec);
      passes_.WriteTo(output, _repeated_passes_codec);
      passGroups_.WriteTo(output, _repeated_passGroups_codec);
      keywords_.WriteTo(output, _map_keywords_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (Lod != 0) {
        output.WriteRawTag(152, 25);
        output.WriteInt32(Lod);
      }
      if (RenderQueue != 0) {
        output.WriteRawTag(168, 31);
        output.WriteInt32(RenderQueue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (File.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      size += float4S_.CalculateSize(_repeated_float4S_codec);
      size += floats_.CalculateSize(_repeated_floats_codec);
      size += ranges_.CalculateSize(_repeated_ranges_codec);
      size += textures_.CalculateSize(_repeated_textures_codec);
      size += passes_.CalculateSize(_repeated_passes_codec);
      size += passGroups_.CalculateSize(_repeated_passGroups_codec);
      size += keywords_.CalculateSize(_map_keywords_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (Lod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lod);
      }
      if (RenderQueue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RenderQueue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      colors_.Add(other.colors_);
      float4S_.Add(other.float4S_);
      floats_.Add(other.floats_);
      ranges_.Add(other.ranges_);
      textures_.Add(other.textures_);
      passes_.Add(other.passes_);
      passGroups_.Add(other.passGroups_);
      keywords_.Add(other.keywords_);
      tags_.Add(other.tags_);
      if (other.Lod != 0) {
        Lod = other.Lod;
      }
      if (other.RenderQueue != 0) {
        RenderQueue = other.RenderQueue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 818: {
            File = input.ReadString();
            break;
          }
          case 1610: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 1618: {
            float4S_.AddEntriesFrom(input, _repeated_float4S_codec);
            break;
          }
          case 1626: {
            floats_.AddEntriesFrom(input, _repeated_floats_codec);
            break;
          }
          case 1634: {
            ranges_.AddEntriesFrom(input, _repeated_ranges_codec);
            break;
          }
          case 1642: {
            textures_.AddEntriesFrom(input, _repeated_textures_codec);
            break;
          }
          case 2410: {
            passes_.AddEntriesFrom(input, _repeated_passes_codec);
            break;
          }
          case 2418: {
            passGroups_.AddEntriesFrom(input, _repeated_passGroups_codec);
            break;
          }
          case 3210: {
            keywords_.AddEntriesFrom(input, _map_keywords_codec);
            break;
          }
          case 3218: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
          case 3224: {
            Lod = input.ReadInt32();
            break;
          }
          case 4008: {
            RenderQueue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
