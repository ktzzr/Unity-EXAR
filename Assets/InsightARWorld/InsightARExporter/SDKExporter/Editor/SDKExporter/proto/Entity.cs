// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoWorld {

  /// <summary>Holder for reflection information generated from entity.proto</summary>
  public static partial class EntityReflection {

    #region Descriptor
    /// <summary>File descriptor for entity.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EntityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxlbnRpdHkucHJvdG8SC3Byb3RvX3dvcmxkGgptYXRoLnByb3RvGgtlbnVt",
            "cy5wcm90bxoJR1VJLnByb3RvIs4BCghSZW5kZXJlchIPCgdlbmFibGVkGGYg",
            "ASgIEhMKCm1vZGVsX2ZpbGUYyQEgASgJEhcKDm1hdGVyaWFsX2ZpbGVzGMsB",
            "IAMoCRISCglyb290X2JvbmUYzAEgASgJEhQKC2Nhc3Rfc2hhZG93GK0CIAEo",
            "BRIXCg5yZWNlaXZlX3NoYWRvdxiuAiABKAgSQAoUcmVmbGVjdGlvblByb2Jl",
            "VXNhZ2UYkQMgASgOMiEucHJvdG9fd29ybGQuUmVmbGVjdGlvblByb2JlVXNh",
            "Z2UivQEKD1JlZmxlY3Rpb25Qcm9iZRIRCghmaWxlbmFtZRjJASABKAkSIAoD",
            "bWluGMoBIAEoCzISLnByb3RvX21hdGguZmxvYXQ0EiAKA21heBjLASABKAsy",
            "Ei5wcm90b19tYXRoLmZsb2F0NBIgCgNwb3MYzAEgASgLMhIucHJvdG9fbWF0",
            "aC5mbG9hdDQSDwoGcmFkaXVzGM0BIAEoAhIgCgNoZHIYzgEgASgLMhIucHJv",
            "dG9fbWF0aC5mbG9hdDQiPwoKUG9zdEVmZmVjdBIMCgRuYW1lGGUgASgJEhEK",
            "CG1hdGVyaWFsGMkBIAEoCRIQCgd0YXJnZXRzGK4CIAMoCSLmAwoGQ2FtZXJh",
            "Eg8KB2hhc2hfaWQYASABKAUSDwoHZW5hYmxlZBhmIAEoCBIMCgNmb3YYyQEg",
            "ASgCEg8KBmFzcGVjdBjKASABKAISDQoEbmVhchjLASABKAISDAoDZmFyGMwB",
            "IAEoAhIlCgh2aWV3cmVjdBjNASABKAsyEi5wcm90b19tYXRoLmZsb2F0NBIP",
            "CgZ0YXJnZXQYrQIgASgJEg4KBW9yZGVyGK4CIAEoAhINCgRtYXNrGK8CIAEo",
            "BBIUCgtmcmVlX2NhbWVyYRiwAiABKAgSKQoFY2xlYXIYsQIgASgOMhkucHJv",
            "dG9fd29ybGQuQ0FNRVJBX0NMRUFSEiwKCmJhY2tncm91bmQYsgIgASgOMhcu",
            "cHJvdG9fd29ybGQuQkFDS0dST1VORBIPCgZza3lib3gYkQMgASgJEjgKEXJl",
            "ZmxlY3Rpb25fcHJvYmVzGJIDIAMoCzIcLnByb3RvX3dvcmxkLlJlZmxlY3Rp",
            "b25Qcm9iZRIhChhzcGhlcmVfaGFybW9uaWNfbGlnaHRpbmcYkwMgAygCEhoK",
            "EXVzZV9jdXN0b21fc2t5Ym94GJQDIAEoCBIuCgxwb3N0X2VmZmVjdHMY9QMg",
            "AygLMhcucHJvdG9fd29ybGQuUG9zdEVmZmVjdCK1AwoFTGlnaHQSJQoEdHlw",
            "ZRhlIAEoDjIXLnByb3RvX3dvcmxkLkxpZ2h0LlRZUEUSDwoHZW5hYmxlZBhm",
            "IAEoCBIiCgVjb2xvchjJASABKAsyEi5wcm90b19tYXRoLmZsb2F0NBISCglp",
            "bnRlbnNpdHkYygEgASgCEg4KBXJhbmdlGMsBIAEoAhIOCgVhbmdsZRjMASAB",
            "KAISNAoLc2hhZG93X3R5cGUYrQIgASgOMh4ucHJvdG9fd29ybGQuTGlnaHQu",
            "U0hBRE9XX1RZUEUSGAoPc2hhZG93X3N0cmVuZ3RoGK4CIAEoAhIrCg5vcnRo",
            "b19wb3NpdGlvbhivAiABKAsyEi5wcm90b19tYXRoLmZsb2F0MxITCgpvcnRo",
            "b19zaXplGLACIAEoAhITCgpvcnRob19uZWFyGLECIAEoAhISCglvcnRob19m",
            "YXIYsgIgASgCIjYKBFRZUEUSDwoLRElSRUNUSU9OQUwQABIJCgVQT0lOVBAB",
            "EggKBFNQT1QQAhIICgRBUkVBEAMiKQoLU0hBRE9XX1RZUEUSBgoCTk8QABII",
            "CgRIQVJEEAESCAoEU09GVBACIswBCg9QaHlzaWNzTWF0ZXJpYWwSGAoQZHlu",
            "YW1pY19mcmljdGlvbhhlIAEoAhIXCg9zdGF0aWNfZnJpY3Rpb24YZiABKAIS",
            "EwoLcmVzdGl0dXRpb24YZyABKAISNgoQZnJpY3Rpb25fY29tYmluZRhoIAEo",
            "DjIcLnByb3RvX3dvcmxkLlBIWVNJQ1NfQ09NQklORRI5ChNyZXN0aXR1dGlv",
            "bl9jb21iaW5lGGkgASgOMhwucHJvdG9fd29ybGQuUEhZU0lDU19DT01CSU5F",
            "IsgBCgtDb2xsaWRlckJveBIPCgdlbmFibGVkGGYgASgIEhIKCmhhc0VuYWJs",
            "ZWQYZyABKAgSIwoGY2VudGVyGMkBIAEoCzISLnByb3RvX21hdGguZmxvYXQz",
            "EiEKBHNpemUYygEgASgLMhIucHJvdG9fbWF0aC5mbG9hdDMSNwoQcGh5c2lj",
            "c19tYXRlcmlhbBitAiABKAsyHC5wcm90b193b3JsZC5QaHlzaWNzTWF0ZXJp",
            "YWwSEwoKaXNfdHJpZ2dlchiRAyABKAgiuQEKDkNvbGxpZGVyU3BoZXJlEg8K",
            "B2VuYWJsZWQYZiABKAgSEgoKaGFzRW5hYmxlZBhnIAEoCBIjCgZjZW50ZXIY",
            "yQEgASgLMhIucHJvdG9fbWF0aC5mbG9hdDMSDwoGcmFkaXVzGMoBIAEoAhI3",
            "ChBwaHlzaWNzX21hdGVyaWFsGK0CIAEoCzIcLnByb3RvX3dvcmxkLlBoeXNp",
            "Y3NNYXRlcmlhbBITCgppc190cmlnZ2VyGJEDIAEoCCKZAQoJUmlnaWRib2R5",
            "Eg8KB2VuYWJsZWQYZiABKAgSDQoEbWFzcxjJASABKAISFAoLbGluZWFyX2Ry",
            "YWcYygEgASgCEhUKDGFuZ3VsYXJfZHJhZxjLASABKAISFAoLdXNlX2dyYXZp",
            "dHkYzAEgASgIEhIKCWlzX3N0YXRpYxjNASABKAgSFQoMaXNfa2luZW1hdGlj",
            "GM4BIAEoCCKsAgoKSGluZ2VKb2ludBIPCgdlbmFibGVkGGYgASgIEhcKDmNv",
            "bm5lY3RlZF9ib2R5GMkBIAEoCRIjCgZhbmNob3IYygEgASgLMhIucHJvdG9f",
            "bWF0aC5mbG9hdDMSIQoEYXhpcxjLASABKAsyEi5wcm90b19tYXRoLmZsb2F0",
            "MxIdChR1c2VfY29udGludW91c19tb3RvchiRAyABKAgSKQogY29udGludW91",
            "c19tb3Rvcl90YXJnZXRfdmVsb2NpdHkYkgMgASgCEiMKGmNvbnRpbnVvdXNf",
            "bW90b3JfbWF4X2ZvcmNlGJMDIAEoAhITCgp1c2VfbGltaXRzGPUDIAEoCBIT",
            "CgpsaW1pdHNfbWluGPYDIAEoAhITCgpsaW1pdHNfbWF4GPcDIAEoAiI1CgxT",
            "Y3JpcHRSdW5uZXISDwoHZW5hYmxlZBhmIAEoCBIUCgtzY3JpcHRfZmlsZRjJ",
            "ASABKAkipQEKCFdpbmRab25lEicKBG1vZGUYASABKA4yGS5wcm90b193b3Js",
            "ZC5XaW5kWm9uZU1vZGUSDgoGcmFkaXVzGAIgASgCEhAKCHdpbmRNYWluGAMg",
            "ASgCEhYKDndpbmRUdXJidWxlbmNlGAQgASgCEhoKEndpbmRQdWxzZU1hZ25p",
            "dHVkZRgFIAEoAhIaChJ3aW5kUHVsc2VGcmVxdWVuY3kYBiABKAIiiwQKC0F1",
            "ZGlvU291cmNlEg8KB3ZlcnNpb24YASABKAkSDAoEbmFtZRhlIAEoCRIPCgdl",
            "bmFibGVkGGYgASgIEhEKCGZpbGVuYW1lGMkBIAEoCRINCgRtdXRlGOkHIAEo",
            "CBIWCg1ieXBhc3NfZWZmZWN0GOoHIAEoCBIfChZieXBhc3NfbGlzdGVuZXJf",
            "ZWZmZWN0GOsHIAEoCBIcChNieXBhc3NfcmV2ZXJiX3pvbmVzGOwHIAEoCBIW",
            "Cg1wbGF5X29uX2F3YWtlGO0HIAEoCBINCgRsb29wGO4HIAEoCBIRCghwcmlv",
            "cml0eRjNCCABKAUSDwoGdm9sdW1lGM4IIAEoAhIOCgVwaXRjaBjPCCABKAIS",
            "EwoKc3RlcmVvX3BhbhjQCCABKAISFgoNc3BhdGlhbF9ibGVuZBjRCCABKAIS",
            "GAoPcmV2ZXJiX3pvbmVfbWl4GNIIIAEoAhIWCg1kb3BwbGVyX2xldmVsGLEJ",
            "IAEoAhIPCgZzcHJlYWQYsgkgASgCEjIKB3JvbGxvZmYYswkgASgOMiAucHJv",
            "dG9fd29ybGQuQXVkaW9Tb3VyY2UuUk9MTE9GRhIVCgxtaW5fZGlzdGFuY2UY",
            "tAkgASgCEhUKDG1heF9kaXN0YW5jZRi1CSABKAIiJgoHUk9MTE9GRhIPCgtM",
            "T0dBUklUSE1JQxAAEgoKBkxJTkVBUhABIq8BCgtWaWRlb1BsYXllchIMCgRu",
            "YW1lGGUgASgJEhMKCnZpZGVvX2NsaXAYyQEgASgJEg8KBmVudGl0eRitAiAB",
            "KAkSEQoIbWF0ZXJpYWwYrgIgASgFEhEKCHByb3BlcnR5GK8CIAEoCRIWCg1w",
            "bGF5X29uX2F3YWtlGJEDIAEoCBINCgRsb29wGJIDIAEoCBIOCgVzcGVlZBiV",
            "AyABKAISDwoGdm9sdW1lGKUDIAEoAiLeBwoGRW50aXR5Eg8KB3ZlcnNpb24Y",
            "ASABKAkSDAoEbmFtZRhlIAEoCRIpCgl0cmFuc2Zvcm0YyQEgASgLMhUucHJv",
            "dG9fbWF0aC50cmFuc2Zvcm0SEAoHZW5hYmxlZBjKASABKAgSDQoEbWFzaxjL",
            "ASABKAQSFgoNZnJ1c3R1bUN1bGxlZBjMASABKAgSJgoIY2hpbGRyZW4YrQIg",
            "AygLMhMucHJvdG9fd29ybGQuRW50aXR5EigKCHJlbmRlcmVyGJEDIAEoCzIV",
            "LnByb3RvX3dvcmxkLlJlbmRlcmVyEiQKBmNhbWVyYRiSAyABKAsyEy5wcm90",
            "b193b3JsZC5DYW1lcmESEgoJYW5pbWF0aW9uGJMDIAEoCRIYCg9hbmltYXRp",
            "b25fY2xpcHMYlwMgAygJEhwKE2FuaW1hdG9yX2NvbnRyb2xsZXIYlgMgASgJ",
            "EiIKBWxpZ2h0GJQDIAEoCzISLnByb3RvX3dvcmxkLkxpZ2h0EhEKCHBhcnRp",
            "Y2xlGJUDIAEoCRIrCgdzY3JpcHRzGPUDIAMoCzIZLnByb3RvX3dvcmxkLlNj",
            "cmlwdFJ1bm5lchIvCgxjb2xsaWRlcl9ib3gY2QQgAygLMhgucHJvdG9fd29y",
            "bGQuQ29sbGlkZXJCb3gSNQoPY29sbGlkZXJfc3BoZXJlGNoEIAMoCzIbLnBy",
            "b3RvX3dvcmxkLkNvbGxpZGVyU3BoZXJlEjIKDnJlY3RfdHJhbnNmb3JtGL0F",
            "IAEoCzIZLnByb3RvX21hdGguUmVjdFRyYW5zZm9ybRIzCg9jYW52YXNfcmVu",
            "ZGVyZXIYvgUgASgLMhkucHJvdG9fZ3VpLkNhbnZhc1JlbmRlcmVyEiIKBmNh",
            "bnZhcxi/BSABKAsyES5wcm90b19ndWkuQ2FudmFzEiIKBmJ1dHRvbhjABSAB",
            "KAsyES5wcm90b19ndWkuQnV0dG9uEisKC2lucHV0X2ZpZWxkGMEFIAEoCzIV",
            "LnByb3RvX2d1aS5JbnB1dEZpZWxkEioKCXJpZ2lkYm9keRihBiABKAsyFi5w",
            "cm90b193b3JsZC5SaWdpZGJvZHkSLQoLaGluZ2Vfam9pbnQYogYgASgLMhcu",
            "cHJvdG9fd29ybGQuSGluZ2VKb2ludBIkCgR3aW5kGIUHIAEoCzIVLnByb3Rv",
            "X3dvcmxkLldpbmRab25lEjAKDWF1ZGlvX3NvdXJjZXMY6QcgAygLMhgucHJv",
            "dG9fd29ybGQuQXVkaW9Tb3VyY2USMAoNdmlkZW9fcGxheWVycxjRDyADKAsy",
            "GC5wcm90b193b3JsZC5WaWRlb1BsYXllckICSANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ProtoMath.MathReflection.Descriptor, global::ProtoWorld.EnumsReflection.Descriptor, global::ProtoGui.GUIReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Renderer), global::ProtoWorld.Renderer.Parser, new[]{ "Enabled", "ModelFile", "MaterialFiles", "RootBone", "CastShadow", "ReceiveShadow", "ReflectionProbeUsage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.ReflectionProbe), global::ProtoWorld.ReflectionProbe.Parser, new[]{ "Filename", "Min", "Max", "Pos", "Radius", "Hdr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.PostEffect), global::ProtoWorld.PostEffect.Parser, new[]{ "Name", "Material", "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Camera), global::ProtoWorld.Camera.Parser, new[]{ "HashId", "Enabled", "Fov", "Aspect", "Near", "Far", "Viewrect", "Target", "Order", "Mask", "FreeCamera", "Clear", "Background", "Skybox", "ReflectionProbes", "SphereHarmonicLighting", "UseCustomSkybox", "PostEffects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Light), global::ProtoWorld.Light.Parser, new[]{ "Type", "Enabled", "Color", "Intensity", "Range", "Angle", "ShadowType", "ShadowStrength", "OrthoPosition", "OrthoSize", "OrthoNear", "OrthoFar" }, null, new[]{ typeof(global::ProtoWorld.Light.Types.TYPE), typeof(global::ProtoWorld.Light.Types.SHADOW_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.PhysicsMaterial), global::ProtoWorld.PhysicsMaterial.Parser, new[]{ "DynamicFriction", "StaticFriction", "Restitution", "FrictionCombine", "RestitutionCombine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.ColliderBox), global::ProtoWorld.ColliderBox.Parser, new[]{ "Enabled", "HasEnabled", "Center", "Size", "PhysicsMaterial", "IsTrigger" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.ColliderSphere), global::ProtoWorld.ColliderSphere.Parser, new[]{ "Enabled", "HasEnabled", "Center", "Radius", "PhysicsMaterial", "IsTrigger" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Rigidbody), global::ProtoWorld.Rigidbody.Parser, new[]{ "Enabled", "Mass", "LinearDrag", "AngularDrag", "UseGravity", "IsStatic", "IsKinematic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.HingeJoint), global::ProtoWorld.HingeJoint.Parser, new[]{ "Enabled", "ConnectedBody", "Anchor", "Axis", "UseContinuousMotor", "ContinuousMotorTargetVelocity", "ContinuousMotorMaxForce", "UseLimits", "LimitsMin", "LimitsMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.ScriptRunner), global::ProtoWorld.ScriptRunner.Parser, new[]{ "Enabled", "ScriptFile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.WindZone), global::ProtoWorld.WindZone.Parser, new[]{ "Mode", "Radius", "WindMain", "WindTurbulence", "WindPulseMagnitude", "WindPulseFrequency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AudioSource), global::ProtoWorld.AudioSource.Parser, new[]{ "Version", "Name", "Enabled", "Filename", "Mute", "BypassEffect", "BypassListenerEffect", "BypassReverbZones", "PlayOnAwake", "Loop", "Priority", "Volume", "Pitch", "StereoPan", "SpatialBlend", "ReverbZoneMix", "DopplerLevel", "Spread", "Rolloff", "MinDistance", "MaxDistance" }, null, new[]{ typeof(global::ProtoWorld.AudioSource.Types.ROLLOFF) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.VideoPlayer), global::ProtoWorld.VideoPlayer.Parser, new[]{ "Name", "VideoClip", "Entity", "Material", "Property", "PlayOnAwake", "Loop", "Speed", "Volume" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.Entity), global::ProtoWorld.Entity.Parser, new[]{ "Version", "Name", "Transform", "Enabled", "Mask", "FrustumCulled", "Children", "Renderer", "Camera", "Animation", "AnimationClips", "AnimatorController", "Light", "Particle", "Scripts", "ColliderBox", "ColliderSphere", "RectTransform", "CanvasRenderer", "Canvas", "Button", "InputField", "Rigidbody", "HingeJoint", "Wind", "AudioSources", "VideoPlayers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Renderer : pb::IMessage<Renderer> {
    private static readonly pb::MessageParser<Renderer> _parser = new pb::MessageParser<Renderer>(() => new Renderer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Renderer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Renderer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Renderer(Renderer other) : this() {
      enabled_ = other.enabled_;
      modelFile_ = other.modelFile_;
      materialFiles_ = other.materialFiles_.Clone();
      rootBone_ = other.rootBone_;
      castShadow_ = other.castShadow_;
      receiveShadow_ = other.receiveShadow_;
      reflectionProbeUsage_ = other.reflectionProbeUsage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Renderer Clone() {
      return new Renderer(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "model_file" field.</summary>
    public const int ModelFileFieldNumber = 201;
    private string modelFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelFile {
      get { return modelFile_; }
      set {
        modelFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "material_files" field.</summary>
    public const int MaterialFilesFieldNumber = 203;
    private static readonly pb::FieldCodec<string> _repeated_materialFiles_codec
        = pb::FieldCodec.ForString(1626);
    private readonly pbc::RepeatedField<string> materialFiles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MaterialFiles {
      get { return materialFiles_; }
    }

    /// <summary>Field number for the "root_bone" field.</summary>
    public const int RootBoneFieldNumber = 204;
    private string rootBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootBone {
      get { return rootBone_; }
      set {
        rootBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cast_shadow" field.</summary>
    public const int CastShadowFieldNumber = 301;
    private int castShadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CastShadow {
      get { return castShadow_; }
      set {
        castShadow_ = value;
      }
    }

    /// <summary>Field number for the "receive_shadow" field.</summary>
    public const int ReceiveShadowFieldNumber = 302;
    private bool receiveShadow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveShadow {
      get { return receiveShadow_; }
      set {
        receiveShadow_ = value;
      }
    }

    /// <summary>Field number for the "reflectionProbeUsage" field.</summary>
    public const int ReflectionProbeUsageFieldNumber = 401;
    private global::ProtoWorld.ReflectionProbeUsage reflectionProbeUsage_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.ReflectionProbeUsage ReflectionProbeUsage {
      get { return reflectionProbeUsage_; }
      set {
        reflectionProbeUsage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Renderer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Renderer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (ModelFile != other.ModelFile) return false;
      if(!materialFiles_.Equals(other.materialFiles_)) return false;
      if (RootBone != other.RootBone) return false;
      if (CastShadow != other.CastShadow) return false;
      if (ReceiveShadow != other.ReceiveShadow) return false;
      if (ReflectionProbeUsage != other.ReflectionProbeUsage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ModelFile.Length != 0) hash ^= ModelFile.GetHashCode();
      hash ^= materialFiles_.GetHashCode();
      if (RootBone.Length != 0) hash ^= RootBone.GetHashCode();
      if (CastShadow != 0) hash ^= CastShadow.GetHashCode();
      if (ReceiveShadow != false) hash ^= ReceiveShadow.GetHashCode();
      if (ReflectionProbeUsage != 0) hash ^= ReflectionProbeUsage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (ModelFile.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(ModelFile);
      }
      materialFiles_.WriteTo(output, _repeated_materialFiles_codec);
      if (RootBone.Length != 0) {
        output.WriteRawTag(226, 12);
        output.WriteString(RootBone);
      }
      if (CastShadow != 0) {
        output.WriteRawTag(232, 18);
        output.WriteInt32(CastShadow);
      }
      if (ReceiveShadow != false) {
        output.WriteRawTag(240, 18);
        output.WriteBool(ReceiveShadow);
      }
      if (ReflectionProbeUsage != 0) {
        output.WriteRawTag(136, 25);
        output.WriteEnum((int) ReflectionProbeUsage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (ModelFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ModelFile);
      }
      size += materialFiles_.CalculateSize(_repeated_materialFiles_codec);
      if (RootBone.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RootBone);
      }
      if (CastShadow != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CastShadow);
      }
      if (ReceiveShadow != false) {
        size += 2 + 1;
      }
      if (ReflectionProbeUsage != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ReflectionProbeUsage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Renderer other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ModelFile.Length != 0) {
        ModelFile = other.ModelFile;
      }
      materialFiles_.Add(other.materialFiles_);
      if (other.RootBone.Length != 0) {
        RootBone = other.RootBone;
      }
      if (other.CastShadow != 0) {
        CastShadow = other.CastShadow;
      }
      if (other.ReceiveShadow != false) {
        ReceiveShadow = other.ReceiveShadow;
      }
      if (other.ReflectionProbeUsage != 0) {
        ReflectionProbeUsage = other.ReflectionProbeUsage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1610: {
            ModelFile = input.ReadString();
            break;
          }
          case 1626: {
            materialFiles_.AddEntriesFrom(input, _repeated_materialFiles_codec);
            break;
          }
          case 1634: {
            RootBone = input.ReadString();
            break;
          }
          case 2408: {
            CastShadow = input.ReadInt32();
            break;
          }
          case 2416: {
            ReceiveShadow = input.ReadBool();
            break;
          }
          case 3208: {
            reflectionProbeUsage_ = (global::ProtoWorld.ReflectionProbeUsage) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReflectionProbe : pb::IMessage<ReflectionProbe> {
    private static readonly pb::MessageParser<ReflectionProbe> _parser = new pb::MessageParser<ReflectionProbe>(() => new ReflectionProbe());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReflectionProbe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReflectionProbe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReflectionProbe(ReflectionProbe other) : this() {
      filename_ = other.filename_;
      Min = other.min_ != null ? other.Min.Clone() : null;
      Max = other.max_ != null ? other.Max.Clone() : null;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      radius_ = other.radius_;
      Hdr = other.hdr_ != null ? other.Hdr.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReflectionProbe Clone() {
      return new ReflectionProbe(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 201;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 202;
    private global::ProtoMath.float4 min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 203;
    private global::ProtoMath.float4 max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 204;
    private global::ProtoMath.float4 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 205;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 206;
    private global::ProtoMath.float4 hdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReflectionProbe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReflectionProbe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      if (!object.Equals(Min, other.Min)) return false;
      if (!object.Equals(Max, other.Max)) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Radius != other.Radius) return false;
      if (!object.Equals(Hdr, other.Hdr)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (min_ != null) hash ^= Min.GetHashCode();
      if (max_ != null) hash ^= Max.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (hdr_ != null) hash ^= Hdr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filename.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Filename);
      }
      if (min_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(Min);
      }
      if (max_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(Max);
      }
      if (pos_ != null) {
        output.WriteRawTag(226, 12);
        output.WriteMessage(Pos);
      }
      if (Radius != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(Radius);
      }
      if (hdr_ != null) {
        output.WriteRawTag(242, 12);
        output.WriteMessage(Hdr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Filename.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (min_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Min);
      }
      if (max_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Max);
      }
      if (pos_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Radius != 0F) {
        size += 2 + 4;
      }
      if (hdr_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReflectionProbe other) {
      if (other == null) {
        return;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.min_ != null) {
        if (min_ == null) {
          min_ = new global::ProtoMath.float4();
        }
        Min.MergeFrom(other.Min);
      }
      if (other.max_ != null) {
        if (max_ == null) {
          max_ = new global::ProtoMath.float4();
        }
        Max.MergeFrom(other.Max);
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::ProtoMath.float4();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.hdr_ != null) {
        if (hdr_ == null) {
          hdr_ = new global::ProtoMath.float4();
        }
        Hdr.MergeFrom(other.Hdr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 1610: {
            Filename = input.ReadString();
            break;
          }
          case 1618: {
            if (min_ == null) {
              min_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(min_);
            break;
          }
          case 1626: {
            if (max_ == null) {
              max_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(max_);
            break;
          }
          case 1634: {
            if (pos_ == null) {
              pos_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 1645: {
            Radius = input.ReadFloat();
            break;
          }
          case 1650: {
            if (hdr_ == null) {
              hdr_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(hdr_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PostEffect : pb::IMessage<PostEffect> {
    private static readonly pb::MessageParser<PostEffect> _parser = new pb::MessageParser<PostEffect>(() => new PostEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostEffect(PostEffect other) : this() {
      name_ = other.name_;
      material_ = other.material_;
      targets_ = other.targets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostEffect Clone() {
      return new PostEffect(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 201;
    private string material_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Material {
      get { return material_; }
      set {
        material_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 302;
    private static readonly pb::FieldCodec<string> _repeated_targets_codec
        = pb::FieldCodec.ForString(2418);
    private readonly pbc::RepeatedField<string> targets_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Material != other.Material) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Material.Length != 0) hash ^= Material.GetHashCode();
      hash ^= targets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Material.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Material);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Material.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Material);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostEffect other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Material.Length != 0) {
        Material = other.Material;
      }
      targets_.Add(other.targets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            Material = input.ReadString();
            break;
          }
          case 2418: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Camera : pb::IMessage<Camera> {
    private static readonly pb::MessageParser<Camera> _parser = new pb::MessageParser<Camera>(() => new Camera());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Camera> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera(Camera other) : this() {
      hashId_ = other.hashId_;
      enabled_ = other.enabled_;
      fov_ = other.fov_;
      aspect_ = other.aspect_;
      near_ = other.near_;
      far_ = other.far_;
      Viewrect = other.viewrect_ != null ? other.Viewrect.Clone() : null;
      target_ = other.target_;
      order_ = other.order_;
      mask_ = other.mask_;
      freeCamera_ = other.freeCamera_;
      clear_ = other.clear_;
      background_ = other.background_;
      skybox_ = other.skybox_;
      reflectionProbes_ = other.reflectionProbes_.Clone();
      sphereHarmonicLighting_ = other.sphereHarmonicLighting_.Clone();
      useCustomSkybox_ = other.useCustomSkybox_;
      postEffects_ = other.postEffects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camera Clone() {
      return new Camera(this);
    }

    /// <summary>Field number for the "hash_id" field.</summary>
    public const int HashIdFieldNumber = 1;
    private int hashId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashId {
      get { return hashId_; }
      set {
        hashId_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 201;
    private float fov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    /// <summary>Field number for the "aspect" field.</summary>
    public const int AspectFieldNumber = 202;
    private float aspect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Aspect {
      get { return aspect_; }
      set {
        aspect_ = value;
      }
    }

    /// <summary>Field number for the "near" field.</summary>
    public const int NearFieldNumber = 203;
    private float near_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Near {
      get { return near_; }
      set {
        near_ = value;
      }
    }

    /// <summary>Field number for the "far" field.</summary>
    public const int FarFieldNumber = 204;
    private float far_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Far {
      get { return far_; }
      set {
        far_ = value;
      }
    }

    /// <summary>Field number for the "viewrect" field.</summary>
    public const int ViewrectFieldNumber = 205;
    private global::ProtoMath.float4 viewrect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Viewrect {
      get { return viewrect_; }
      set {
        viewrect_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 301;
    private string target_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 302;
    private float order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 303;
    private ulong mask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "free_camera" field.</summary>
    public const int FreeCameraFieldNumber = 304;
    private bool freeCamera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FreeCamera {
      get { return freeCamera_; }
      set {
        freeCamera_ = value;
      }
    }

    /// <summary>Field number for the "clear" field.</summary>
    public const int ClearFieldNumber = 305;
    private global::ProtoWorld.CAMERA_CLEAR clear_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.CAMERA_CLEAR Clear {
      get { return clear_; }
      set {
        clear_ = value;
      }
    }

    /// <summary>Field number for the "background" field.</summary>
    public const int BackgroundFieldNumber = 306;
    private global::ProtoWorld.BACKGROUND background_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.BACKGROUND Background {
      get { return background_; }
      set {
        background_ = value;
      }
    }

    /// <summary>Field number for the "skybox" field.</summary>
    public const int SkyboxFieldNumber = 401;
    private string skybox_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Skybox {
      get { return skybox_; }
      set {
        skybox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reflection_probes" field.</summary>
    public const int ReflectionProbesFieldNumber = 402;
    private static readonly pb::FieldCodec<global::ProtoWorld.ReflectionProbe> _repeated_reflectionProbes_codec
        = pb::FieldCodec.ForMessage(3218, global::ProtoWorld.ReflectionProbe.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.ReflectionProbe> reflectionProbes_ = new pbc::RepeatedField<global::ProtoWorld.ReflectionProbe>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.ReflectionProbe> ReflectionProbes {
      get { return reflectionProbes_; }
    }

    /// <summary>Field number for the "sphere_harmonic_lighting" field.</summary>
    public const int SphereHarmonicLightingFieldNumber = 403;
    private static readonly pb::FieldCodec<float> _repeated_sphereHarmonicLighting_codec
        = pb::FieldCodec.ForFloat(3226);
    private readonly pbc::RepeatedField<float> sphereHarmonicLighting_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SphereHarmonicLighting {
      get { return sphereHarmonicLighting_; }
    }

    /// <summary>Field number for the "use_custom_skybox" field.</summary>
    public const int UseCustomSkyboxFieldNumber = 404;
    private bool useCustomSkybox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCustomSkybox {
      get { return useCustomSkybox_; }
      set {
        useCustomSkybox_ = value;
      }
    }

    /// <summary>Field number for the "post_effects" field.</summary>
    public const int PostEffectsFieldNumber = 501;
    private static readonly pb::FieldCodec<global::ProtoWorld.PostEffect> _repeated_postEffects_codec
        = pb::FieldCodec.ForMessage(4010, global::ProtoWorld.PostEffect.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.PostEffect> postEffects_ = new pbc::RepeatedField<global::ProtoWorld.PostEffect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.PostEffect> PostEffects {
      get { return postEffects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Camera);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Camera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HashId != other.HashId) return false;
      if (Enabled != other.Enabled) return false;
      if (Fov != other.Fov) return false;
      if (Aspect != other.Aspect) return false;
      if (Near != other.Near) return false;
      if (Far != other.Far) return false;
      if (!object.Equals(Viewrect, other.Viewrect)) return false;
      if (Target != other.Target) return false;
      if (Order != other.Order) return false;
      if (Mask != other.Mask) return false;
      if (FreeCamera != other.FreeCamera) return false;
      if (Clear != other.Clear) return false;
      if (Background != other.Background) return false;
      if (Skybox != other.Skybox) return false;
      if(!reflectionProbes_.Equals(other.reflectionProbes_)) return false;
      if(!sphereHarmonicLighting_.Equals(other.sphereHarmonicLighting_)) return false;
      if (UseCustomSkybox != other.UseCustomSkybox) return false;
      if(!postEffects_.Equals(other.postEffects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HashId != 0) hash ^= HashId.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Fov != 0F) hash ^= Fov.GetHashCode();
      if (Aspect != 0F) hash ^= Aspect.GetHashCode();
      if (Near != 0F) hash ^= Near.GetHashCode();
      if (Far != 0F) hash ^= Far.GetHashCode();
      if (viewrect_ != null) hash ^= Viewrect.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (Order != 0F) hash ^= Order.GetHashCode();
      if (Mask != 0UL) hash ^= Mask.GetHashCode();
      if (FreeCamera != false) hash ^= FreeCamera.GetHashCode();
      if (Clear != 0) hash ^= Clear.GetHashCode();
      if (Background != 0) hash ^= Background.GetHashCode();
      if (Skybox.Length != 0) hash ^= Skybox.GetHashCode();
      hash ^= reflectionProbes_.GetHashCode();
      hash ^= sphereHarmonicLighting_.GetHashCode();
      if (UseCustomSkybox != false) hash ^= UseCustomSkybox.GetHashCode();
      hash ^= postEffects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HashId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HashId);
      }
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (Fov != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Fov);
      }
      if (Aspect != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Aspect);
      }
      if (Near != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(Near);
      }
      if (Far != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(Far);
      }
      if (viewrect_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(Viewrect);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(234, 18);
        output.WriteString(Target);
      }
      if (Order != 0F) {
        output.WriteRawTag(245, 18);
        output.WriteFloat(Order);
      }
      if (Mask != 0UL) {
        output.WriteRawTag(248, 18);
        output.WriteUInt64(Mask);
      }
      if (FreeCamera != false) {
        output.WriteRawTag(128, 19);
        output.WriteBool(FreeCamera);
      }
      if (Clear != 0) {
        output.WriteRawTag(136, 19);
        output.WriteEnum((int) Clear);
      }
      if (Background != 0) {
        output.WriteRawTag(144, 19);
        output.WriteEnum((int) Background);
      }
      if (Skybox.Length != 0) {
        output.WriteRawTag(138, 25);
        output.WriteString(Skybox);
      }
      reflectionProbes_.WriteTo(output, _repeated_reflectionProbes_codec);
      sphereHarmonicLighting_.WriteTo(output, _repeated_sphereHarmonicLighting_codec);
      if (UseCustomSkybox != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(UseCustomSkybox);
      }
      postEffects_.WriteTo(output, _repeated_postEffects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HashId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HashId);
      }
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (Fov != 0F) {
        size += 2 + 4;
      }
      if (Aspect != 0F) {
        size += 2 + 4;
      }
      if (Near != 0F) {
        size += 2 + 4;
      }
      if (Far != 0F) {
        size += 2 + 4;
      }
      if (viewrect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Viewrect);
      }
      if (Target.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (Order != 0F) {
        size += 2 + 4;
      }
      if (Mask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Mask);
      }
      if (FreeCamera != false) {
        size += 2 + 1;
      }
      if (Clear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Clear);
      }
      if (Background != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Background);
      }
      if (Skybox.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Skybox);
      }
      size += reflectionProbes_.CalculateSize(_repeated_reflectionProbes_codec);
      size += sphereHarmonicLighting_.CalculateSize(_repeated_sphereHarmonicLighting_codec);
      if (UseCustomSkybox != false) {
        size += 2 + 1;
      }
      size += postEffects_.CalculateSize(_repeated_postEffects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Camera other) {
      if (other == null) {
        return;
      }
      if (other.HashId != 0) {
        HashId = other.HashId;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
      if (other.Aspect != 0F) {
        Aspect = other.Aspect;
      }
      if (other.Near != 0F) {
        Near = other.Near;
      }
      if (other.Far != 0F) {
        Far = other.Far;
      }
      if (other.viewrect_ != null) {
        if (viewrect_ == null) {
          viewrect_ = new global::ProtoMath.float4();
        }
        Viewrect.MergeFrom(other.Viewrect);
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.Order != 0F) {
        Order = other.Order;
      }
      if (other.Mask != 0UL) {
        Mask = other.Mask;
      }
      if (other.FreeCamera != false) {
        FreeCamera = other.FreeCamera;
      }
      if (other.Clear != 0) {
        Clear = other.Clear;
      }
      if (other.Background != 0) {
        Background = other.Background;
      }
      if (other.Skybox.Length != 0) {
        Skybox = other.Skybox;
      }
      reflectionProbes_.Add(other.reflectionProbes_);
      sphereHarmonicLighting_.Add(other.sphereHarmonicLighting_);
      if (other.UseCustomSkybox != false) {
        UseCustomSkybox = other.UseCustomSkybox;
      }
      postEffects_.Add(other.postEffects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HashId = input.ReadInt32();
            break;
          }
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1613: {
            Fov = input.ReadFloat();
            break;
          }
          case 1621: {
            Aspect = input.ReadFloat();
            break;
          }
          case 1629: {
            Near = input.ReadFloat();
            break;
          }
          case 1637: {
            Far = input.ReadFloat();
            break;
          }
          case 1642: {
            if (viewrect_ == null) {
              viewrect_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(viewrect_);
            break;
          }
          case 2410: {
            Target = input.ReadString();
            break;
          }
          case 2421: {
            Order = input.ReadFloat();
            break;
          }
          case 2424: {
            Mask = input.ReadUInt64();
            break;
          }
          case 2432: {
            FreeCamera = input.ReadBool();
            break;
          }
          case 2440: {
            clear_ = (global::ProtoWorld.CAMERA_CLEAR) input.ReadEnum();
            break;
          }
          case 2448: {
            background_ = (global::ProtoWorld.BACKGROUND) input.ReadEnum();
            break;
          }
          case 3210: {
            Skybox = input.ReadString();
            break;
          }
          case 3218: {
            reflectionProbes_.AddEntriesFrom(input, _repeated_reflectionProbes_codec);
            break;
          }
          case 3226:
          case 3229: {
            sphereHarmonicLighting_.AddEntriesFrom(input, _repeated_sphereHarmonicLighting_codec);
            break;
          }
          case 3232: {
            UseCustomSkybox = input.ReadBool();
            break;
          }
          case 4010: {
            postEffects_.AddEntriesFrom(input, _repeated_postEffects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Light : pb::IMessage<Light> {
    private static readonly pb::MessageParser<Light> _parser = new pb::MessageParser<Light>(() => new Light());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Light> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light(Light other) : this() {
      type_ = other.type_;
      enabled_ = other.enabled_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      intensity_ = other.intensity_;
      range_ = other.range_;
      angle_ = other.angle_;
      shadowType_ = other.shadowType_;
      shadowStrength_ = other.shadowStrength_;
      OrthoPosition = other.orthoPosition_ != null ? other.OrthoPosition.Clone() : null;
      orthoSize_ = other.orthoSize_;
      orthoNear_ = other.orthoNear_;
      orthoFar_ = other.orthoFar_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Light Clone() {
      return new Light(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 101;
    private global::ProtoWorld.Light.Types.TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.Light.Types.TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 201;
    private global::ProtoMath.float4 color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float4 Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 202;
    private float intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 203;
    private float range_;
    /// <summary>
    /// point light and spot light.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 204;
    private float angle_;
    /// <summary>
    /// spot light only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "shadow_type" field.</summary>
    public const int ShadowTypeFieldNumber = 301;
    private global::ProtoWorld.Light.Types.SHADOW_TYPE shadowType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.Light.Types.SHADOW_TYPE ShadowType {
      get { return shadowType_; }
      set {
        shadowType_ = value;
      }
    }

    /// <summary>Field number for the "shadow_strength" field.</summary>
    public const int ShadowStrengthFieldNumber = 302;
    private float shadowStrength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShadowStrength {
      get { return shadowStrength_; }
      set {
        shadowStrength_ = value;
      }
    }

    /// <summary>Field number for the "ortho_position" field.</summary>
    public const int OrthoPositionFieldNumber = 303;
    private global::ProtoMath.float3 orthoPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 OrthoPosition {
      get { return orthoPosition_; }
      set {
        orthoPosition_ = value;
      }
    }

    /// <summary>Field number for the "ortho_size" field.</summary>
    public const int OrthoSizeFieldNumber = 304;
    private float orthoSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OrthoSize {
      get { return orthoSize_; }
      set {
        orthoSize_ = value;
      }
    }

    /// <summary>Field number for the "ortho_near" field.</summary>
    public const int OrthoNearFieldNumber = 305;
    private float orthoNear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OrthoNear {
      get { return orthoNear_; }
      set {
        orthoNear_ = value;
      }
    }

    /// <summary>Field number for the "ortho_far" field.</summary>
    public const int OrthoFarFieldNumber = 306;
    private float orthoFar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OrthoFar {
      get { return orthoFar_; }
      set {
        orthoFar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Light);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Light other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Enabled != other.Enabled) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Intensity != other.Intensity) return false;
      if (Range != other.Range) return false;
      if (Angle != other.Angle) return false;
      if (ShadowType != other.ShadowType) return false;
      if (ShadowStrength != other.ShadowStrength) return false;
      if (!object.Equals(OrthoPosition, other.OrthoPosition)) return false;
      if (OrthoSize != other.OrthoSize) return false;
      if (OrthoNear != other.OrthoNear) return false;
      if (OrthoFar != other.OrthoFar) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Intensity != 0F) hash ^= Intensity.GetHashCode();
      if (Range != 0F) hash ^= Range.GetHashCode();
      if (Angle != 0F) hash ^= Angle.GetHashCode();
      if (ShadowType != 0) hash ^= ShadowType.GetHashCode();
      if (ShadowStrength != 0F) hash ^= ShadowStrength.GetHashCode();
      if (orthoPosition_ != null) hash ^= OrthoPosition.GetHashCode();
      if (OrthoSize != 0F) hash ^= OrthoSize.GetHashCode();
      if (OrthoNear != 0F) hash ^= OrthoNear.GetHashCode();
      if (OrthoFar != 0F) hash ^= OrthoFar.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(168, 6);
        output.WriteEnum((int) Type);
      }
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (color_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Color);
      }
      if (Intensity != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Intensity);
      }
      if (Range != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(Range);
      }
      if (Angle != 0F) {
        output.WriteRawTag(229, 12);
        output.WriteFloat(Angle);
      }
      if (ShadowType != 0) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) ShadowType);
      }
      if (ShadowStrength != 0F) {
        output.WriteRawTag(245, 18);
        output.WriteFloat(ShadowStrength);
      }
      if (orthoPosition_ != null) {
        output.WriteRawTag(250, 18);
        output.WriteMessage(OrthoPosition);
      }
      if (OrthoSize != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(OrthoSize);
      }
      if (OrthoNear != 0F) {
        output.WriteRawTag(141, 19);
        output.WriteFloat(OrthoNear);
      }
      if (OrthoFar != 0F) {
        output.WriteRawTag(149, 19);
        output.WriteFloat(OrthoFar);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (color_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Intensity != 0F) {
        size += 2 + 4;
      }
      if (Range != 0F) {
        size += 2 + 4;
      }
      if (Angle != 0F) {
        size += 2 + 4;
      }
      if (ShadowType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShadowType);
      }
      if (ShadowStrength != 0F) {
        size += 2 + 4;
      }
      if (orthoPosition_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrthoPosition);
      }
      if (OrthoSize != 0F) {
        size += 2 + 4;
      }
      if (OrthoNear != 0F) {
        size += 2 + 4;
      }
      if (OrthoFar != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Light other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::ProtoMath.float4();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Intensity != 0F) {
        Intensity = other.Intensity;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.ShadowType != 0) {
        ShadowType = other.ShadowType;
      }
      if (other.ShadowStrength != 0F) {
        ShadowStrength = other.ShadowStrength;
      }
      if (other.orthoPosition_ != null) {
        if (orthoPosition_ == null) {
          orthoPosition_ = new global::ProtoMath.float3();
        }
        OrthoPosition.MergeFrom(other.OrthoPosition);
      }
      if (other.OrthoSize != 0F) {
        OrthoSize = other.OrthoSize;
      }
      if (other.OrthoNear != 0F) {
        OrthoNear = other.OrthoNear;
      }
      if (other.OrthoFar != 0F) {
        OrthoFar = other.OrthoFar;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 808: {
            type_ = (global::ProtoWorld.Light.Types.TYPE) input.ReadEnum();
            break;
          }
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1610: {
            if (color_ == null) {
              color_ = new global::ProtoMath.float4();
            }
            input.ReadMessage(color_);
            break;
          }
          case 1621: {
            Intensity = input.ReadFloat();
            break;
          }
          case 1629: {
            Range = input.ReadFloat();
            break;
          }
          case 1637: {
            Angle = input.ReadFloat();
            break;
          }
          case 2408: {
            shadowType_ = (global::ProtoWorld.Light.Types.SHADOW_TYPE) input.ReadEnum();
            break;
          }
          case 2421: {
            ShadowStrength = input.ReadFloat();
            break;
          }
          case 2426: {
            if (orthoPosition_ == null) {
              orthoPosition_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(orthoPosition_);
            break;
          }
          case 2437: {
            OrthoSize = input.ReadFloat();
            break;
          }
          case 2445: {
            OrthoNear = input.ReadFloat();
            break;
          }
          case 2453: {
            OrthoFar = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Light message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TYPE {
        [pbr::OriginalName("DIRECTIONAL")] Directional = 0,
        [pbr::OriginalName("POINT")] Point = 1,
        [pbr::OriginalName("SPOT")] Spot = 2,
        [pbr::OriginalName("AREA")] Area = 3,
      }

      public enum SHADOW_TYPE {
        [pbr::OriginalName("NO")] No = 0,
        [pbr::OriginalName("HARD")] Hard = 1,
        [pbr::OriginalName("SOFT")] Soft = 2,
      }

    }
    #endregion

  }

  public sealed partial class PhysicsMaterial : pb::IMessage<PhysicsMaterial> {
    private static readonly pb::MessageParser<PhysicsMaterial> _parser = new pb::MessageParser<PhysicsMaterial>(() => new PhysicsMaterial());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhysicsMaterial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicsMaterial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicsMaterial(PhysicsMaterial other) : this() {
      dynamicFriction_ = other.dynamicFriction_;
      staticFriction_ = other.staticFriction_;
      restitution_ = other.restitution_;
      frictionCombine_ = other.frictionCombine_;
      restitutionCombine_ = other.restitutionCombine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicsMaterial Clone() {
      return new PhysicsMaterial(this);
    }

    /// <summary>Field number for the "dynamic_friction" field.</summary>
    public const int DynamicFrictionFieldNumber = 101;
    private float dynamicFriction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DynamicFriction {
      get { return dynamicFriction_; }
      set {
        dynamicFriction_ = value;
      }
    }

    /// <summary>Field number for the "static_friction" field.</summary>
    public const int StaticFrictionFieldNumber = 102;
    private float staticFriction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaticFriction {
      get { return staticFriction_; }
      set {
        staticFriction_ = value;
      }
    }

    /// <summary>Field number for the "restitution" field.</summary>
    public const int RestitutionFieldNumber = 103;
    private float restitution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Restitution {
      get { return restitution_; }
      set {
        restitution_ = value;
      }
    }

    /// <summary>Field number for the "friction_combine" field.</summary>
    public const int FrictionCombineFieldNumber = 104;
    private global::ProtoWorld.PHYSICS_COMBINE frictionCombine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.PHYSICS_COMBINE FrictionCombine {
      get { return frictionCombine_; }
      set {
        frictionCombine_ = value;
      }
    }

    /// <summary>Field number for the "restitution_combine" field.</summary>
    public const int RestitutionCombineFieldNumber = 105;
    private global::ProtoWorld.PHYSICS_COMBINE restitutionCombine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.PHYSICS_COMBINE RestitutionCombine {
      get { return restitutionCombine_; }
      set {
        restitutionCombine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhysicsMaterial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhysicsMaterial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DynamicFriction != other.DynamicFriction) return false;
      if (StaticFriction != other.StaticFriction) return false;
      if (Restitution != other.Restitution) return false;
      if (FrictionCombine != other.FrictionCombine) return false;
      if (RestitutionCombine != other.RestitutionCombine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DynamicFriction != 0F) hash ^= DynamicFriction.GetHashCode();
      if (StaticFriction != 0F) hash ^= StaticFriction.GetHashCode();
      if (Restitution != 0F) hash ^= Restitution.GetHashCode();
      if (FrictionCombine != 0) hash ^= FrictionCombine.GetHashCode();
      if (RestitutionCombine != 0) hash ^= RestitutionCombine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DynamicFriction != 0F) {
        output.WriteRawTag(173, 6);
        output.WriteFloat(DynamicFriction);
      }
      if (StaticFriction != 0F) {
        output.WriteRawTag(181, 6);
        output.WriteFloat(StaticFriction);
      }
      if (Restitution != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(Restitution);
      }
      if (FrictionCombine != 0) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) FrictionCombine);
      }
      if (RestitutionCombine != 0) {
        output.WriteRawTag(200, 6);
        output.WriteEnum((int) RestitutionCombine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DynamicFriction != 0F) {
        size += 2 + 4;
      }
      if (StaticFriction != 0F) {
        size += 2 + 4;
      }
      if (Restitution != 0F) {
        size += 2 + 4;
      }
      if (FrictionCombine != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FrictionCombine);
      }
      if (RestitutionCombine != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RestitutionCombine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhysicsMaterial other) {
      if (other == null) {
        return;
      }
      if (other.DynamicFriction != 0F) {
        DynamicFriction = other.DynamicFriction;
      }
      if (other.StaticFriction != 0F) {
        StaticFriction = other.StaticFriction;
      }
      if (other.Restitution != 0F) {
        Restitution = other.Restitution;
      }
      if (other.FrictionCombine != 0) {
        FrictionCombine = other.FrictionCombine;
      }
      if (other.RestitutionCombine != 0) {
        RestitutionCombine = other.RestitutionCombine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 813: {
            DynamicFriction = input.ReadFloat();
            break;
          }
          case 821: {
            StaticFriction = input.ReadFloat();
            break;
          }
          case 829: {
            Restitution = input.ReadFloat();
            break;
          }
          case 832: {
            frictionCombine_ = (global::ProtoWorld.PHYSICS_COMBINE) input.ReadEnum();
            break;
          }
          case 840: {
            restitutionCombine_ = (global::ProtoWorld.PHYSICS_COMBINE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderBox : pb::IMessage<ColliderBox> {
    private static readonly pb::MessageParser<ColliderBox> _parser = new pb::MessageParser<ColliderBox>(() => new ColliderBox());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColliderBox> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderBox() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderBox(ColliderBox other) : this() {
      enabled_ = other.enabled_;
      hasEnabled_ = other.hasEnabled_;
      Center = other.center_ != null ? other.Center.Clone() : null;
      Size = other.size_ != null ? other.Size.Clone() : null;
      PhysicsMaterial = other.physicsMaterial_ != null ? other.PhysicsMaterial.Clone() : null;
      isTrigger_ = other.isTrigger_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderBox Clone() {
      return new ColliderBox(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "hasEnabled" field.</summary>
    public const int HasEnabledFieldNumber = 103;
    private bool hasEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnabled {
      get { return hasEnabled_; }
      set {
        hasEnabled_ = value;
      }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 201;
    private global::ProtoMath.float3 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 202;
    private global::ProtoMath.float3 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "physics_material" field.</summary>
    public const int PhysicsMaterialFieldNumber = 301;
    private global::ProtoWorld.PhysicsMaterial physicsMaterial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.PhysicsMaterial PhysicsMaterial {
      get { return physicsMaterial_; }
      set {
        physicsMaterial_ = value;
      }
    }

    /// <summary>Field number for the "is_trigger" field.</summary>
    public const int IsTriggerFieldNumber = 401;
    private bool isTrigger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrigger {
      get { return isTrigger_; }
      set {
        isTrigger_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColliderBox);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColliderBox other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (HasEnabled != other.HasEnabled) return false;
      if (!object.Equals(Center, other.Center)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if (!object.Equals(PhysicsMaterial, other.PhysicsMaterial)) return false;
      if (IsTrigger != other.IsTrigger) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (HasEnabled != false) hash ^= HasEnabled.GetHashCode();
      if (center_ != null) hash ^= Center.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      if (physicsMaterial_ != null) hash ^= PhysicsMaterial.GetHashCode();
      if (IsTrigger != false) hash ^= IsTrigger.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (HasEnabled != false) {
        output.WriteRawTag(184, 6);
        output.WriteBool(HasEnabled);
      }
      if (center_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Center);
      }
      if (size_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(Size);
      }
      if (physicsMaterial_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(PhysicsMaterial);
      }
      if (IsTrigger != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(IsTrigger);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (HasEnabled != false) {
        size += 2 + 1;
      }
      if (center_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (size_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      if (physicsMaterial_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PhysicsMaterial);
      }
      if (IsTrigger != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColliderBox other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.HasEnabled != false) {
        HasEnabled = other.HasEnabled;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::ProtoMath.float3();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::ProtoMath.float3();
        }
        Size.MergeFrom(other.Size);
      }
      if (other.physicsMaterial_ != null) {
        if (physicsMaterial_ == null) {
          physicsMaterial_ = new global::ProtoWorld.PhysicsMaterial();
        }
        PhysicsMaterial.MergeFrom(other.PhysicsMaterial);
      }
      if (other.IsTrigger != false) {
        IsTrigger = other.IsTrigger;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 824: {
            HasEnabled = input.ReadBool();
            break;
          }
          case 1610: {
            if (center_ == null) {
              center_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(center_);
            break;
          }
          case 1618: {
            if (size_ == null) {
              size_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(size_);
            break;
          }
          case 2410: {
            if (physicsMaterial_ == null) {
              physicsMaterial_ = new global::ProtoWorld.PhysicsMaterial();
            }
            input.ReadMessage(physicsMaterial_);
            break;
          }
          case 3208: {
            IsTrigger = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ColliderSphere : pb::IMessage<ColliderSphere> {
    private static readonly pb::MessageParser<ColliderSphere> _parser = new pb::MessageParser<ColliderSphere>(() => new ColliderSphere());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColliderSphere> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderSphere() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderSphere(ColliderSphere other) : this() {
      enabled_ = other.enabled_;
      hasEnabled_ = other.hasEnabled_;
      Center = other.center_ != null ? other.Center.Clone() : null;
      radius_ = other.radius_;
      PhysicsMaterial = other.physicsMaterial_ != null ? other.PhysicsMaterial.Clone() : null;
      isTrigger_ = other.isTrigger_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColliderSphere Clone() {
      return new ColliderSphere(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "hasEnabled" field.</summary>
    public const int HasEnabledFieldNumber = 103;
    private bool hasEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEnabled {
      get { return hasEnabled_; }
      set {
        hasEnabled_ = value;
      }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 201;
    private global::ProtoMath.float3 center_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 202;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "physics_material" field.</summary>
    public const int PhysicsMaterialFieldNumber = 301;
    private global::ProtoWorld.PhysicsMaterial physicsMaterial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.PhysicsMaterial PhysicsMaterial {
      get { return physicsMaterial_; }
      set {
        physicsMaterial_ = value;
      }
    }

    /// <summary>Field number for the "is_trigger" field.</summary>
    public const int IsTriggerFieldNumber = 401;
    private bool isTrigger_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrigger {
      get { return isTrigger_; }
      set {
        isTrigger_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColliderSphere);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColliderSphere other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (HasEnabled != other.HasEnabled) return false;
      if (!object.Equals(Center, other.Center)) return false;
      if (Radius != other.Radius) return false;
      if (!object.Equals(PhysicsMaterial, other.PhysicsMaterial)) return false;
      if (IsTrigger != other.IsTrigger) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (HasEnabled != false) hash ^= HasEnabled.GetHashCode();
      if (center_ != null) hash ^= Center.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (physicsMaterial_ != null) hash ^= PhysicsMaterial.GetHashCode();
      if (IsTrigger != false) hash ^= IsTrigger.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (HasEnabled != false) {
        output.WriteRawTag(184, 6);
        output.WriteBool(HasEnabled);
      }
      if (center_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Center);
      }
      if (Radius != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Radius);
      }
      if (physicsMaterial_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(PhysicsMaterial);
      }
      if (IsTrigger != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(IsTrigger);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (HasEnabled != false) {
        size += 2 + 1;
      }
      if (center_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Center);
      }
      if (Radius != 0F) {
        size += 2 + 4;
      }
      if (physicsMaterial_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PhysicsMaterial);
      }
      if (IsTrigger != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColliderSphere other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.HasEnabled != false) {
        HasEnabled = other.HasEnabled;
      }
      if (other.center_ != null) {
        if (center_ == null) {
          center_ = new global::ProtoMath.float3();
        }
        Center.MergeFrom(other.Center);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.physicsMaterial_ != null) {
        if (physicsMaterial_ == null) {
          physicsMaterial_ = new global::ProtoWorld.PhysicsMaterial();
        }
        PhysicsMaterial.MergeFrom(other.PhysicsMaterial);
      }
      if (other.IsTrigger != false) {
        IsTrigger = other.IsTrigger;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 824: {
            HasEnabled = input.ReadBool();
            break;
          }
          case 1610: {
            if (center_ == null) {
              center_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(center_);
            break;
          }
          case 1621: {
            Radius = input.ReadFloat();
            break;
          }
          case 2410: {
            if (physicsMaterial_ == null) {
              physicsMaterial_ = new global::ProtoWorld.PhysicsMaterial();
            }
            input.ReadMessage(physicsMaterial_);
            break;
          }
          case 3208: {
            IsTrigger = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rigidbody : pb::IMessage<Rigidbody> {
    private static readonly pb::MessageParser<Rigidbody> _parser = new pb::MessageParser<Rigidbody>(() => new Rigidbody());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rigidbody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rigidbody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rigidbody(Rigidbody other) : this() {
      enabled_ = other.enabled_;
      mass_ = other.mass_;
      linearDrag_ = other.linearDrag_;
      angularDrag_ = other.angularDrag_;
      useGravity_ = other.useGravity_;
      isStatic_ = other.isStatic_;
      isKinematic_ = other.isKinematic_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rigidbody Clone() {
      return new Rigidbody(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 201;
    private float mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "linear_drag" field.</summary>
    public const int LinearDragFieldNumber = 202;
    private float linearDrag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LinearDrag {
      get { return linearDrag_; }
      set {
        linearDrag_ = value;
      }
    }

    /// <summary>Field number for the "angular_drag" field.</summary>
    public const int AngularDragFieldNumber = 203;
    private float angularDrag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngularDrag {
      get { return angularDrag_; }
      set {
        angularDrag_ = value;
      }
    }

    /// <summary>Field number for the "use_gravity" field.</summary>
    public const int UseGravityFieldNumber = 204;
    private bool useGravity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGravity {
      get { return useGravity_; }
      set {
        useGravity_ = value;
      }
    }

    /// <summary>Field number for the "is_static" field.</summary>
    public const int IsStaticFieldNumber = 205;
    private bool isStatic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStatic {
      get { return isStatic_; }
      set {
        isStatic_ = value;
      }
    }

    /// <summary>Field number for the "is_kinematic" field.</summary>
    public const int IsKinematicFieldNumber = 206;
    private bool isKinematic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKinematic {
      get { return isKinematic_; }
      set {
        isKinematic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rigidbody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rigidbody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (Mass != other.Mass) return false;
      if (LinearDrag != other.LinearDrag) return false;
      if (AngularDrag != other.AngularDrag) return false;
      if (UseGravity != other.UseGravity) return false;
      if (IsStatic != other.IsStatic) return false;
      if (IsKinematic != other.IsKinematic) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Mass != 0F) hash ^= Mass.GetHashCode();
      if (LinearDrag != 0F) hash ^= LinearDrag.GetHashCode();
      if (AngularDrag != 0F) hash ^= AngularDrag.GetHashCode();
      if (UseGravity != false) hash ^= UseGravity.GetHashCode();
      if (IsStatic != false) hash ^= IsStatic.GetHashCode();
      if (IsKinematic != false) hash ^= IsKinematic.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (Mass != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(Mass);
      }
      if (LinearDrag != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(LinearDrag);
      }
      if (AngularDrag != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(AngularDrag);
      }
      if (UseGravity != false) {
        output.WriteRawTag(224, 12);
        output.WriteBool(UseGravity);
      }
      if (IsStatic != false) {
        output.WriteRawTag(232, 12);
        output.WriteBool(IsStatic);
      }
      if (IsKinematic != false) {
        output.WriteRawTag(240, 12);
        output.WriteBool(IsKinematic);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (Mass != 0F) {
        size += 2 + 4;
      }
      if (LinearDrag != 0F) {
        size += 2 + 4;
      }
      if (AngularDrag != 0F) {
        size += 2 + 4;
      }
      if (UseGravity != false) {
        size += 2 + 1;
      }
      if (IsStatic != false) {
        size += 2 + 1;
      }
      if (IsKinematic != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rigidbody other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Mass != 0F) {
        Mass = other.Mass;
      }
      if (other.LinearDrag != 0F) {
        LinearDrag = other.LinearDrag;
      }
      if (other.AngularDrag != 0F) {
        AngularDrag = other.AngularDrag;
      }
      if (other.UseGravity != false) {
        UseGravity = other.UseGravity;
      }
      if (other.IsStatic != false) {
        IsStatic = other.IsStatic;
      }
      if (other.IsKinematic != false) {
        IsKinematic = other.IsKinematic;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1613: {
            Mass = input.ReadFloat();
            break;
          }
          case 1621: {
            LinearDrag = input.ReadFloat();
            break;
          }
          case 1629: {
            AngularDrag = input.ReadFloat();
            break;
          }
          case 1632: {
            UseGravity = input.ReadBool();
            break;
          }
          case 1640: {
            IsStatic = input.ReadBool();
            break;
          }
          case 1648: {
            IsKinematic = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HingeJoint : pb::IMessage<HingeJoint> {
    private static readonly pb::MessageParser<HingeJoint> _parser = new pb::MessageParser<HingeJoint>(() => new HingeJoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HingeJoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeJoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeJoint(HingeJoint other) : this() {
      enabled_ = other.enabled_;
      connectedBody_ = other.connectedBody_;
      Anchor = other.anchor_ != null ? other.Anchor.Clone() : null;
      Axis = other.axis_ != null ? other.Axis.Clone() : null;
      useContinuousMotor_ = other.useContinuousMotor_;
      continuousMotorTargetVelocity_ = other.continuousMotorTargetVelocity_;
      continuousMotorMaxForce_ = other.continuousMotorMaxForce_;
      useLimits_ = other.useLimits_;
      limitsMin_ = other.limitsMin_;
      limitsMax_ = other.limitsMax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeJoint Clone() {
      return new HingeJoint(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "connected_body" field.</summary>
    public const int ConnectedBodyFieldNumber = 201;
    private string connectedBody_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectedBody {
      get { return connectedBody_; }
      set {
        connectedBody_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anchor" field.</summary>
    public const int AnchorFieldNumber = 202;
    private global::ProtoMath.float3 anchor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Anchor {
      get { return anchor_; }
      set {
        anchor_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 203;
    private global::ProtoMath.float3 axis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.float3 Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "use_continuous_motor" field.</summary>
    public const int UseContinuousMotorFieldNumber = 401;
    private bool useContinuousMotor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseContinuousMotor {
      get { return useContinuousMotor_; }
      set {
        useContinuousMotor_ = value;
      }
    }

    /// <summary>Field number for the "continuous_motor_target_velocity" field.</summary>
    public const int ContinuousMotorTargetVelocityFieldNumber = 402;
    private float continuousMotorTargetVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContinuousMotorTargetVelocity {
      get { return continuousMotorTargetVelocity_; }
      set {
        continuousMotorTargetVelocity_ = value;
      }
    }

    /// <summary>Field number for the "continuous_motor_max_force" field.</summary>
    public const int ContinuousMotorMaxForceFieldNumber = 403;
    private float continuousMotorMaxForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ContinuousMotorMaxForce {
      get { return continuousMotorMaxForce_; }
      set {
        continuousMotorMaxForce_ = value;
      }
    }

    /// <summary>Field number for the "use_limits" field.</summary>
    public const int UseLimitsFieldNumber = 501;
    private bool useLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseLimits {
      get { return useLimits_; }
      set {
        useLimits_ = value;
      }
    }

    /// <summary>Field number for the "limits_min" field.</summary>
    public const int LimitsMinFieldNumber = 502;
    private float limitsMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LimitsMin {
      get { return limitsMin_; }
      set {
        limitsMin_ = value;
      }
    }

    /// <summary>Field number for the "limits_max" field.</summary>
    public const int LimitsMaxFieldNumber = 503;
    private float limitsMax_;
    /// <summary>
    ///float softness = 504;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LimitsMax {
      get { return limitsMax_; }
      set {
        limitsMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HingeJoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HingeJoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (ConnectedBody != other.ConnectedBody) return false;
      if (!object.Equals(Anchor, other.Anchor)) return false;
      if (!object.Equals(Axis, other.Axis)) return false;
      if (UseContinuousMotor != other.UseContinuousMotor) return false;
      if (ContinuousMotorTargetVelocity != other.ContinuousMotorTargetVelocity) return false;
      if (ContinuousMotorMaxForce != other.ContinuousMotorMaxForce) return false;
      if (UseLimits != other.UseLimits) return false;
      if (LimitsMin != other.LimitsMin) return false;
      if (LimitsMax != other.LimitsMax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ConnectedBody.Length != 0) hash ^= ConnectedBody.GetHashCode();
      if (anchor_ != null) hash ^= Anchor.GetHashCode();
      if (axis_ != null) hash ^= Axis.GetHashCode();
      if (UseContinuousMotor != false) hash ^= UseContinuousMotor.GetHashCode();
      if (ContinuousMotorTargetVelocity != 0F) hash ^= ContinuousMotorTargetVelocity.GetHashCode();
      if (ContinuousMotorMaxForce != 0F) hash ^= ContinuousMotorMaxForce.GetHashCode();
      if (UseLimits != false) hash ^= UseLimits.GetHashCode();
      if (LimitsMin != 0F) hash ^= LimitsMin.GetHashCode();
      if (LimitsMax != 0F) hash ^= LimitsMax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (ConnectedBody.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(ConnectedBody);
      }
      if (anchor_ != null) {
        output.WriteRawTag(210, 12);
        output.WriteMessage(Anchor);
      }
      if (axis_ != null) {
        output.WriteRawTag(218, 12);
        output.WriteMessage(Axis);
      }
      if (UseContinuousMotor != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(UseContinuousMotor);
      }
      if (ContinuousMotorTargetVelocity != 0F) {
        output.WriteRawTag(149, 25);
        output.WriteFloat(ContinuousMotorTargetVelocity);
      }
      if (ContinuousMotorMaxForce != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(ContinuousMotorMaxForce);
      }
      if (UseLimits != false) {
        output.WriteRawTag(168, 31);
        output.WriteBool(UseLimits);
      }
      if (LimitsMin != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(LimitsMin);
      }
      if (LimitsMax != 0F) {
        output.WriteRawTag(189, 31);
        output.WriteFloat(LimitsMax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (ConnectedBody.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConnectedBody);
      }
      if (anchor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Anchor);
      }
      if (axis_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Axis);
      }
      if (UseContinuousMotor != false) {
        size += 2 + 1;
      }
      if (ContinuousMotorTargetVelocity != 0F) {
        size += 2 + 4;
      }
      if (ContinuousMotorMaxForce != 0F) {
        size += 2 + 4;
      }
      if (UseLimits != false) {
        size += 2 + 1;
      }
      if (LimitsMin != 0F) {
        size += 2 + 4;
      }
      if (LimitsMax != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HingeJoint other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ConnectedBody.Length != 0) {
        ConnectedBody = other.ConnectedBody;
      }
      if (other.anchor_ != null) {
        if (anchor_ == null) {
          anchor_ = new global::ProtoMath.float3();
        }
        Anchor.MergeFrom(other.Anchor);
      }
      if (other.axis_ != null) {
        if (axis_ == null) {
          axis_ = new global::ProtoMath.float3();
        }
        Axis.MergeFrom(other.Axis);
      }
      if (other.UseContinuousMotor != false) {
        UseContinuousMotor = other.UseContinuousMotor;
      }
      if (other.ContinuousMotorTargetVelocity != 0F) {
        ContinuousMotorTargetVelocity = other.ContinuousMotorTargetVelocity;
      }
      if (other.ContinuousMotorMaxForce != 0F) {
        ContinuousMotorMaxForce = other.ContinuousMotorMaxForce;
      }
      if (other.UseLimits != false) {
        UseLimits = other.UseLimits;
      }
      if (other.LimitsMin != 0F) {
        LimitsMin = other.LimitsMin;
      }
      if (other.LimitsMax != 0F) {
        LimitsMax = other.LimitsMax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1610: {
            ConnectedBody = input.ReadString();
            break;
          }
          case 1618: {
            if (anchor_ == null) {
              anchor_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(anchor_);
            break;
          }
          case 1626: {
            if (axis_ == null) {
              axis_ = new global::ProtoMath.float3();
            }
            input.ReadMessage(axis_);
            break;
          }
          case 3208: {
            UseContinuousMotor = input.ReadBool();
            break;
          }
          case 3221: {
            ContinuousMotorTargetVelocity = input.ReadFloat();
            break;
          }
          case 3229: {
            ContinuousMotorMaxForce = input.ReadFloat();
            break;
          }
          case 4008: {
            UseLimits = input.ReadBool();
            break;
          }
          case 4021: {
            LimitsMin = input.ReadFloat();
            break;
          }
          case 4029: {
            LimitsMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScriptRunner : pb::IMessage<ScriptRunner> {
    private static readonly pb::MessageParser<ScriptRunner> _parser = new pb::MessageParser<ScriptRunner>(() => new ScriptRunner());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScriptRunner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptRunner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptRunner(ScriptRunner other) : this() {
      enabled_ = other.enabled_;
      scriptFile_ = other.scriptFile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScriptRunner Clone() {
      return new ScriptRunner(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "script_file" field.</summary>
    public const int ScriptFileFieldNumber = 201;
    private string scriptFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScriptFile {
      get { return scriptFile_; }
      set {
        scriptFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScriptRunner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScriptRunner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      if (ScriptFile != other.ScriptFile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (ScriptFile.Length != 0) hash ^= ScriptFile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (ScriptFile.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(ScriptFile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (ScriptFile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScriptFile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScriptRunner other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.ScriptFile.Length != 0) {
        ScriptFile = other.ScriptFile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1610: {
            ScriptFile = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindZone : pb::IMessage<WindZone> {
    private static readonly pb::MessageParser<WindZone> _parser = new pb::MessageParser<WindZone>(() => new WindZone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindZone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindZone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindZone(WindZone other) : this() {
      mode_ = other.mode_;
      radius_ = other.radius_;
      windMain_ = other.windMain_;
      windTurbulence_ = other.windTurbulence_;
      windPulseMagnitude_ = other.windPulseMagnitude_;
      windPulseFrequency_ = other.windPulseFrequency_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindZone Clone() {
      return new WindZone(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::ProtoWorld.WindZoneMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.WindZoneMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "windMain" field.</summary>
    public const int WindMainFieldNumber = 3;
    private float windMain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindMain {
      get { return windMain_; }
      set {
        windMain_ = value;
      }
    }

    /// <summary>Field number for the "windTurbulence" field.</summary>
    public const int WindTurbulenceFieldNumber = 4;
    private float windTurbulence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindTurbulence {
      get { return windTurbulence_; }
      set {
        windTurbulence_ = value;
      }
    }

    /// <summary>Field number for the "windPulseMagnitude" field.</summary>
    public const int WindPulseMagnitudeFieldNumber = 5;
    private float windPulseMagnitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindPulseMagnitude {
      get { return windPulseMagnitude_; }
      set {
        windPulseMagnitude_ = value;
      }
    }

    /// <summary>Field number for the "windPulseFrequency" field.</summary>
    public const int WindPulseFrequencyFieldNumber = 6;
    private float windPulseFrequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindPulseFrequency {
      get { return windPulseFrequency_; }
      set {
        windPulseFrequency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindZone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindZone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Radius != other.Radius) return false;
      if (WindMain != other.WindMain) return false;
      if (WindTurbulence != other.WindTurbulence) return false;
      if (WindPulseMagnitude != other.WindPulseMagnitude) return false;
      if (WindPulseFrequency != other.WindPulseFrequency) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Radius != 0F) hash ^= Radius.GetHashCode();
      if (WindMain != 0F) hash ^= WindMain.GetHashCode();
      if (WindTurbulence != 0F) hash ^= WindTurbulence.GetHashCode();
      if (WindPulseMagnitude != 0F) hash ^= WindPulseMagnitude.GetHashCode();
      if (WindPulseFrequency != 0F) hash ^= WindPulseFrequency.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (WindMain != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(WindMain);
      }
      if (WindTurbulence != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(WindTurbulence);
      }
      if (WindPulseMagnitude != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(WindPulseMagnitude);
      }
      if (WindPulseFrequency != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(WindPulseFrequency);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (WindMain != 0F) {
        size += 1 + 4;
      }
      if (WindTurbulence != 0F) {
        size += 1 + 4;
      }
      if (WindPulseMagnitude != 0F) {
        size += 1 + 4;
      }
      if (WindPulseFrequency != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindZone other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.WindMain != 0F) {
        WindMain = other.WindMain;
      }
      if (other.WindTurbulence != 0F) {
        WindTurbulence = other.WindTurbulence;
      }
      if (other.WindPulseMagnitude != 0F) {
        WindPulseMagnitude = other.WindPulseMagnitude;
      }
      if (other.WindPulseFrequency != 0F) {
        WindPulseFrequency = other.WindPulseFrequency;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            mode_ = (global::ProtoWorld.WindZoneMode) input.ReadEnum();
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
          case 29: {
            WindMain = input.ReadFloat();
            break;
          }
          case 37: {
            WindTurbulence = input.ReadFloat();
            break;
          }
          case 45: {
            WindPulseMagnitude = input.ReadFloat();
            break;
          }
          case 53: {
            WindPulseFrequency = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AudioSource : pb::IMessage<AudioSource> {
    private static readonly pb::MessageParser<AudioSource> _parser = new pb::MessageParser<AudioSource>(() => new AudioSource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioSource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSource(AudioSource other) : this() {
      version_ = other.version_;
      name_ = other.name_;
      enabled_ = other.enabled_;
      filename_ = other.filename_;
      mute_ = other.mute_;
      bypassEffect_ = other.bypassEffect_;
      bypassListenerEffect_ = other.bypassListenerEffect_;
      bypassReverbZones_ = other.bypassReverbZones_;
      playOnAwake_ = other.playOnAwake_;
      loop_ = other.loop_;
      priority_ = other.priority_;
      volume_ = other.volume_;
      pitch_ = other.pitch_;
      stereoPan_ = other.stereoPan_;
      spatialBlend_ = other.spatialBlend_;
      reverbZoneMix_ = other.reverbZoneMix_;
      dopplerLevel_ = other.dopplerLevel_;
      spread_ = other.spread_;
      rolloff_ = other.rolloff_;
      minDistance_ = other.minDistance_;
      maxDistance_ = other.maxDistance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSource Clone() {
      return new AudioSource(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 102;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 201;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 1001;
    private bool mute_;
    /// <summary>
    /// basic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mute {
      get { return mute_; }
      set {
        mute_ = value;
      }
    }

    /// <summary>Field number for the "bypass_effect" field.</summary>
    public const int BypassEffectFieldNumber = 1002;
    private bool bypassEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BypassEffect {
      get { return bypassEffect_; }
      set {
        bypassEffect_ = value;
      }
    }

    /// <summary>Field number for the "bypass_listener_effect" field.</summary>
    public const int BypassListenerEffectFieldNumber = 1003;
    private bool bypassListenerEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BypassListenerEffect {
      get { return bypassListenerEffect_; }
      set {
        bypassListenerEffect_ = value;
      }
    }

    /// <summary>Field number for the "bypass_reverb_zones" field.</summary>
    public const int BypassReverbZonesFieldNumber = 1004;
    private bool bypassReverbZones_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BypassReverbZones {
      get { return bypassReverbZones_; }
      set {
        bypassReverbZones_ = value;
      }
    }

    /// <summary>Field number for the "play_on_awake" field.</summary>
    public const int PlayOnAwakeFieldNumber = 1005;
    private bool playOnAwake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayOnAwake {
      get { return playOnAwake_; }
      set {
        playOnAwake_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 1006;
    private bool loop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1101;
    private int priority_;
    /// <summary>
    /// basic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 1102;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 1103;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "stereo_pan" field.</summary>
    public const int StereoPanFieldNumber = 1104;
    private float stereoPan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StereoPan {
      get { return stereoPan_; }
      set {
        stereoPan_ = value;
      }
    }

    /// <summary>Field number for the "spatial_blend" field.</summary>
    public const int SpatialBlendFieldNumber = 1105;
    private float spatialBlend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpatialBlend {
      get { return spatialBlend_; }
      set {
        spatialBlend_ = value;
      }
    }

    /// <summary>Field number for the "reverb_zone_mix" field.</summary>
    public const int ReverbZoneMixFieldNumber = 1106;
    private float reverbZoneMix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReverbZoneMix {
      get { return reverbZoneMix_; }
      set {
        reverbZoneMix_ = value;
      }
    }

    /// <summary>Field number for the "doppler_level" field.</summary>
    public const int DopplerLevelFieldNumber = 1201;
    private float dopplerLevel_;
    /// <summary>
    /// 3d sound setting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DopplerLevel {
      get { return dopplerLevel_; }
      set {
        dopplerLevel_ = value;
      }
    }

    /// <summary>Field number for the "spread" field.</summary>
    public const int SpreadFieldNumber = 1202;
    private float spread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Spread {
      get { return spread_; }
      set {
        spread_ = value;
      }
    }

    /// <summary>Field number for the "rolloff" field.</summary>
    public const int RolloffFieldNumber = 1203;
    private global::ProtoWorld.AudioSource.Types.ROLLOFF rolloff_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.AudioSource.Types.ROLLOFF Rolloff {
      get { return rolloff_; }
      set {
        rolloff_ = value;
      }
    }

    /// <summary>Field number for the "min_distance" field.</summary>
    public const int MinDistanceFieldNumber = 1204;
    private float minDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinDistance {
      get { return minDistance_; }
      set {
        minDistance_ = value;
      }
    }

    /// <summary>Field number for the "max_distance" field.</summary>
    public const int MaxDistanceFieldNumber = 1205;
    private float maxDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxDistance {
      get { return maxDistance_; }
      set {
        maxDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioSource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioSource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (Enabled != other.Enabled) return false;
      if (Filename != other.Filename) return false;
      if (Mute != other.Mute) return false;
      if (BypassEffect != other.BypassEffect) return false;
      if (BypassListenerEffect != other.BypassListenerEffect) return false;
      if (BypassReverbZones != other.BypassReverbZones) return false;
      if (PlayOnAwake != other.PlayOnAwake) return false;
      if (Loop != other.Loop) return false;
      if (Priority != other.Priority) return false;
      if (Volume != other.Volume) return false;
      if (Pitch != other.Pitch) return false;
      if (StereoPan != other.StereoPan) return false;
      if (SpatialBlend != other.SpatialBlend) return false;
      if (ReverbZoneMix != other.ReverbZoneMix) return false;
      if (DopplerLevel != other.DopplerLevel) return false;
      if (Spread != other.Spread) return false;
      if (Rolloff != other.Rolloff) return false;
      if (MinDistance != other.MinDistance) return false;
      if (MaxDistance != other.MaxDistance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Mute != false) hash ^= Mute.GetHashCode();
      if (BypassEffect != false) hash ^= BypassEffect.GetHashCode();
      if (BypassListenerEffect != false) hash ^= BypassListenerEffect.GetHashCode();
      if (BypassReverbZones != false) hash ^= BypassReverbZones.GetHashCode();
      if (PlayOnAwake != false) hash ^= PlayOnAwake.GetHashCode();
      if (Loop != false) hash ^= Loop.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Volume != 0F) hash ^= Volume.GetHashCode();
      if (Pitch != 0F) hash ^= Pitch.GetHashCode();
      if (StereoPan != 0F) hash ^= StereoPan.GetHashCode();
      if (SpatialBlend != 0F) hash ^= SpatialBlend.GetHashCode();
      if (ReverbZoneMix != 0F) hash ^= ReverbZoneMix.GetHashCode();
      if (DopplerLevel != 0F) hash ^= DopplerLevel.GetHashCode();
      if (Spread != 0F) hash ^= Spread.GetHashCode();
      if (Rolloff != 0) hash ^= Rolloff.GetHashCode();
      if (MinDistance != 0F) hash ^= MinDistance.GetHashCode();
      if (MaxDistance != 0F) hash ^= MaxDistance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Enabled != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(Enabled);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Filename);
      }
      if (Mute != false) {
        output.WriteRawTag(200, 62);
        output.WriteBool(Mute);
      }
      if (BypassEffect != false) {
        output.WriteRawTag(208, 62);
        output.WriteBool(BypassEffect);
      }
      if (BypassListenerEffect != false) {
        output.WriteRawTag(216, 62);
        output.WriteBool(BypassListenerEffect);
      }
      if (BypassReverbZones != false) {
        output.WriteRawTag(224, 62);
        output.WriteBool(BypassReverbZones);
      }
      if (PlayOnAwake != false) {
        output.WriteRawTag(232, 62);
        output.WriteBool(PlayOnAwake);
      }
      if (Loop != false) {
        output.WriteRawTag(240, 62);
        output.WriteBool(Loop);
      }
      if (Priority != 0) {
        output.WriteRawTag(232, 68);
        output.WriteInt32(Priority);
      }
      if (Volume != 0F) {
        output.WriteRawTag(245, 68);
        output.WriteFloat(Volume);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(253, 68);
        output.WriteFloat(Pitch);
      }
      if (StereoPan != 0F) {
        output.WriteRawTag(133, 69);
        output.WriteFloat(StereoPan);
      }
      if (SpatialBlend != 0F) {
        output.WriteRawTag(141, 69);
        output.WriteFloat(SpatialBlend);
      }
      if (ReverbZoneMix != 0F) {
        output.WriteRawTag(149, 69);
        output.WriteFloat(ReverbZoneMix);
      }
      if (DopplerLevel != 0F) {
        output.WriteRawTag(141, 75);
        output.WriteFloat(DopplerLevel);
      }
      if (Spread != 0F) {
        output.WriteRawTag(149, 75);
        output.WriteFloat(Spread);
      }
      if (Rolloff != 0) {
        output.WriteRawTag(152, 75);
        output.WriteEnum((int) Rolloff);
      }
      if (MinDistance != 0F) {
        output.WriteRawTag(165, 75);
        output.WriteFloat(MinDistance);
      }
      if (MaxDistance != 0F) {
        output.WriteRawTag(173, 75);
        output.WriteFloat(MaxDistance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (Filename.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Mute != false) {
        size += 2 + 1;
      }
      if (BypassEffect != false) {
        size += 2 + 1;
      }
      if (BypassListenerEffect != false) {
        size += 2 + 1;
      }
      if (BypassReverbZones != false) {
        size += 2 + 1;
      }
      if (PlayOnAwake != false) {
        size += 2 + 1;
      }
      if (Loop != false) {
        size += 2 + 1;
      }
      if (Priority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Volume != 0F) {
        size += 2 + 4;
      }
      if (Pitch != 0F) {
        size += 2 + 4;
      }
      if (StereoPan != 0F) {
        size += 2 + 4;
      }
      if (SpatialBlend != 0F) {
        size += 2 + 4;
      }
      if (ReverbZoneMix != 0F) {
        size += 2 + 4;
      }
      if (DopplerLevel != 0F) {
        size += 2 + 4;
      }
      if (Spread != 0F) {
        size += 2 + 4;
      }
      if (Rolloff != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Rolloff);
      }
      if (MinDistance != 0F) {
        size += 2 + 4;
      }
      if (MaxDistance != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioSource other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Mute != false) {
        Mute = other.Mute;
      }
      if (other.BypassEffect != false) {
        BypassEffect = other.BypassEffect;
      }
      if (other.BypassListenerEffect != false) {
        BypassListenerEffect = other.BypassListenerEffect;
      }
      if (other.BypassReverbZones != false) {
        BypassReverbZones = other.BypassReverbZones;
      }
      if (other.PlayOnAwake != false) {
        PlayOnAwake = other.PlayOnAwake;
      }
      if (other.Loop != false) {
        Loop = other.Loop;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.StereoPan != 0F) {
        StereoPan = other.StereoPan;
      }
      if (other.SpatialBlend != 0F) {
        SpatialBlend = other.SpatialBlend;
      }
      if (other.ReverbZoneMix != 0F) {
        ReverbZoneMix = other.ReverbZoneMix;
      }
      if (other.DopplerLevel != 0F) {
        DopplerLevel = other.DopplerLevel;
      }
      if (other.Spread != 0F) {
        Spread = other.Spread;
      }
      if (other.Rolloff != 0) {
        Rolloff = other.Rolloff;
      }
      if (other.MinDistance != 0F) {
        MinDistance = other.MinDistance;
      }
      if (other.MaxDistance != 0F) {
        MaxDistance = other.MaxDistance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 816: {
            Enabled = input.ReadBool();
            break;
          }
          case 1610: {
            Filename = input.ReadString();
            break;
          }
          case 8008: {
            Mute = input.ReadBool();
            break;
          }
          case 8016: {
            BypassEffect = input.ReadBool();
            break;
          }
          case 8024: {
            BypassListenerEffect = input.ReadBool();
            break;
          }
          case 8032: {
            BypassReverbZones = input.ReadBool();
            break;
          }
          case 8040: {
            PlayOnAwake = input.ReadBool();
            break;
          }
          case 8048: {
            Loop = input.ReadBool();
            break;
          }
          case 8808: {
            Priority = input.ReadInt32();
            break;
          }
          case 8821: {
            Volume = input.ReadFloat();
            break;
          }
          case 8829: {
            Pitch = input.ReadFloat();
            break;
          }
          case 8837: {
            StereoPan = input.ReadFloat();
            break;
          }
          case 8845: {
            SpatialBlend = input.ReadFloat();
            break;
          }
          case 8853: {
            ReverbZoneMix = input.ReadFloat();
            break;
          }
          case 9613: {
            DopplerLevel = input.ReadFloat();
            break;
          }
          case 9621: {
            Spread = input.ReadFloat();
            break;
          }
          case 9624: {
            rolloff_ = (global::ProtoWorld.AudioSource.Types.ROLLOFF) input.ReadEnum();
            break;
          }
          case 9637: {
            MinDistance = input.ReadFloat();
            break;
          }
          case 9645: {
            MaxDistance = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AudioSource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ROLLOFF {
        [pbr::OriginalName("LOGARITHMIC")] Logarithmic = 0,
        /// <summary>
        ///CUSTOM = 2;
        /// </summary>
        [pbr::OriginalName("LINEAR")] Linear = 1,
      }

    }
    #endregion

  }

  public sealed partial class VideoPlayer : pb::IMessage<VideoPlayer> {
    private static readonly pb::MessageParser<VideoPlayer> _parser = new pb::MessageParser<VideoPlayer>(() => new VideoPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoPlayer(VideoPlayer other) : this() {
      name_ = other.name_;
      videoClip_ = other.videoClip_;
      entity_ = other.entity_;
      material_ = other.material_;
      property_ = other.property_;
      playOnAwake_ = other.playOnAwake_;
      loop_ = other.loop_;
      speed_ = other.speed_;
      volume_ = other.volume_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoPlayer Clone() {
      return new VideoPlayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "video_clip" field.</summary>
    public const int VideoClipFieldNumber = 201;
    private string videoClip_ = "";
    /// <summary>
    /// source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VideoClip {
      get { return videoClip_; }
      set {
        videoClip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 301;
    private string entity_ = "";
    /// <summary>
    /// target
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 302;
    private int material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 303;
    private string property_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "play_on_awake" field.</summary>
    public const int PlayOnAwakeFieldNumber = 401;
    private bool playOnAwake_;
    /// <summary>
    /// control
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayOnAwake {
      get { return playOnAwake_; }
      set {
        playOnAwake_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 402;
    private bool loop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Loop {
      get { return loop_; }
      set {
        loop_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 405;
    private float speed_;
    /// <summary>
    ///float loop_begin = 403;
    ///float loop_end = 404;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 421;
    private float volume_;
    /// <summary>
    /// audio control
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (VideoClip != other.VideoClip) return false;
      if (Entity != other.Entity) return false;
      if (Material != other.Material) return false;
      if (Property != other.Property) return false;
      if (PlayOnAwake != other.PlayOnAwake) return false;
      if (Loop != other.Loop) return false;
      if (Speed != other.Speed) return false;
      if (Volume != other.Volume) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (VideoClip.Length != 0) hash ^= VideoClip.GetHashCode();
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      if (Material != 0) hash ^= Material.GetHashCode();
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      if (PlayOnAwake != false) hash ^= PlayOnAwake.GetHashCode();
      if (Loop != false) hash ^= Loop.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Volume != 0F) hash ^= Volume.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (VideoClip.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(VideoClip);
      }
      if (Entity.Length != 0) {
        output.WriteRawTag(234, 18);
        output.WriteString(Entity);
      }
      if (Material != 0) {
        output.WriteRawTag(240, 18);
        output.WriteInt32(Material);
      }
      if (Property.Length != 0) {
        output.WriteRawTag(250, 18);
        output.WriteString(Property);
      }
      if (PlayOnAwake != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(PlayOnAwake);
      }
      if (Loop != false) {
        output.WriteRawTag(144, 25);
        output.WriteBool(Loop);
      }
      if (Speed != 0F) {
        output.WriteRawTag(173, 25);
        output.WriteFloat(Speed);
      }
      if (Volume != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(Volume);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (VideoClip.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VideoClip);
      }
      if (Entity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      if (Material != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Material);
      }
      if (Property.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      if (PlayOnAwake != false) {
        size += 2 + 1;
      }
      if (Loop != false) {
        size += 2 + 1;
      }
      if (Speed != 0F) {
        size += 2 + 4;
      }
      if (Volume != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoPlayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.VideoClip.Length != 0) {
        VideoClip = other.VideoClip;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      if (other.Material != 0) {
        Material = other.Material;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      if (other.PlayOnAwake != false) {
        PlayOnAwake = other.PlayOnAwake;
      }
      if (other.Loop != false) {
        Loop = other.Loop;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            VideoClip = input.ReadString();
            break;
          }
          case 2410: {
            Entity = input.ReadString();
            break;
          }
          case 2416: {
            Material = input.ReadInt32();
            break;
          }
          case 2426: {
            Property = input.ReadString();
            break;
          }
          case 3208: {
            PlayOnAwake = input.ReadBool();
            break;
          }
          case 3216: {
            Loop = input.ReadBool();
            break;
          }
          case 3245: {
            Speed = input.ReadFloat();
            break;
          }
          case 3373: {
            Volume = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Entity : pb::IMessage<Entity> {
    private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.EntityReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity(Entity other) : this() {
      version_ = other.version_;
      name_ = other.name_;
      Transform = other.transform_ != null ? other.Transform.Clone() : null;
      enabled_ = other.enabled_;
      mask_ = other.mask_;
      frustumCulled_ = other.frustumCulled_;
      children_ = other.children_.Clone();
      Renderer = other.renderer_ != null ? other.Renderer.Clone() : null;
      Camera = other.camera_ != null ? other.Camera.Clone() : null;
      animation_ = other.animation_;
      animationClips_ = other.animationClips_.Clone();
      animatorController_ = other.animatorController_;
      Light = other.light_ != null ? other.Light.Clone() : null;
      particle_ = other.particle_;
      scripts_ = other.scripts_.Clone();
      colliderBox_ = other.colliderBox_.Clone();
      colliderSphere_ = other.colliderSphere_.Clone();
      RectTransform = other.rectTransform_ != null ? other.RectTransform.Clone() : null;
      CanvasRenderer = other.canvasRenderer_ != null ? other.CanvasRenderer.Clone() : null;
      Canvas = other.canvas_ != null ? other.Canvas.Clone() : null;
      Button = other.button_ != null ? other.Button.Clone() : null;
      InputField = other.inputField_ != null ? other.InputField.Clone() : null;
      Rigidbody = other.rigidbody_ != null ? other.Rigidbody.Clone() : null;
      HingeJoint = other.hingeJoint_ != null ? other.HingeJoint.Clone() : null;
      Wind = other.wind_ != null ? other.Wind.Clone() : null;
      audioSources_ = other.audioSources_.Clone();
      videoPlayers_ = other.videoPlayers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entity Clone() {
      return new Entity(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 201;
    private global::ProtoMath.transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 202;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 203;
    private ulong mask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "frustumCulled" field.</summary>
    public const int FrustumCulledFieldNumber = 204;
    private bool frustumCulled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrustumCulled {
      get { return frustumCulled_; }
      set {
        frustumCulled_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.Entity> _repeated_children_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.Entity.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.Entity> children_ = new pbc::RepeatedField<global::ProtoWorld.Entity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.Entity> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "renderer" field.</summary>
    public const int RendererFieldNumber = 401;
    private global::ProtoWorld.Renderer renderer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.Renderer Renderer {
      get { return renderer_; }
      set {
        renderer_ = value;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 402;
    private global::ProtoWorld.Camera camera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.Camera Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 403;
    private string animation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Animation {
      get { return animation_; }
      set {
        animation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "animation_clips" field.</summary>
    public const int AnimationClipsFieldNumber = 407;
    private static readonly pb::FieldCodec<string> _repeated_animationClips_codec
        = pb::FieldCodec.ForString(3258);
    private readonly pbc::RepeatedField<string> animationClips_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AnimationClips {
      get { return animationClips_; }
    }

    /// <summary>Field number for the "animator_controller" field.</summary>
    public const int AnimatorControllerFieldNumber = 406;
    private string animatorController_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimatorController {
      get { return animatorController_; }
      set {
        animatorController_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 404;
    private global::ProtoWorld.Light light_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.Light Light {
      get { return light_; }
      set {
        light_ = value;
      }
    }

    /// <summary>Field number for the "particle" field.</summary>
    public const int ParticleFieldNumber = 405;
    private string particle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Particle {
      get { return particle_; }
      set {
        particle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scripts" field.</summary>
    public const int ScriptsFieldNumber = 501;
    private static readonly pb::FieldCodec<global::ProtoWorld.ScriptRunner> _repeated_scripts_codec
        = pb::FieldCodec.ForMessage(4010, global::ProtoWorld.ScriptRunner.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.ScriptRunner> scripts_ = new pbc::RepeatedField<global::ProtoWorld.ScriptRunner>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.ScriptRunner> Scripts {
      get { return scripts_; }
    }

    /// <summary>Field number for the "collider_box" field.</summary>
    public const int ColliderBoxFieldNumber = 601;
    private static readonly pb::FieldCodec<global::ProtoWorld.ColliderBox> _repeated_colliderBox_codec
        = pb::FieldCodec.ForMessage(4810, global::ProtoWorld.ColliderBox.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.ColliderBox> colliderBox_ = new pbc::RepeatedField<global::ProtoWorld.ColliderBox>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.ColliderBox> ColliderBox {
      get { return colliderBox_; }
    }

    /// <summary>Field number for the "collider_sphere" field.</summary>
    public const int ColliderSphereFieldNumber = 602;
    private static readonly pb::FieldCodec<global::ProtoWorld.ColliderSphere> _repeated_colliderSphere_codec
        = pb::FieldCodec.ForMessage(4818, global::ProtoWorld.ColliderSphere.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.ColliderSphere> colliderSphere_ = new pbc::RepeatedField<global::ProtoWorld.ColliderSphere>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.ColliderSphere> ColliderSphere {
      get { return colliderSphere_; }
    }

    /// <summary>Field number for the "rect_transform" field.</summary>
    public const int RectTransformFieldNumber = 701;
    private global::ProtoMath.RectTransform rectTransform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoMath.RectTransform RectTransform {
      get { return rectTransform_; }
      set {
        rectTransform_ = value;
      }
    }

    /// <summary>Field number for the "canvas_renderer" field.</summary>
    public const int CanvasRendererFieldNumber = 702;
    private global::ProtoGui.CanvasRenderer canvasRenderer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.CanvasRenderer CanvasRenderer {
      get { return canvasRenderer_; }
      set {
        canvasRenderer_ = value;
      }
    }

    /// <summary>Field number for the "canvas" field.</summary>
    public const int CanvasFieldNumber = 703;
    private global::ProtoGui.Canvas canvas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Canvas Canvas {
      get { return canvas_; }
      set {
        canvas_ = value;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 704;
    private global::ProtoGui.Button button_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.Button Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    /// <summary>Field number for the "input_field" field.</summary>
    public const int InputFieldFieldNumber = 705;
    private global::ProtoGui.InputField inputField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoGui.InputField InputField {
      get { return inputField_; }
      set {
        inputField_ = value;
      }
    }

    /// <summary>Field number for the "rigidbody" field.</summary>
    public const int RigidbodyFieldNumber = 801;
    private global::ProtoWorld.Rigidbody rigidbody_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.Rigidbody Rigidbody {
      get { return rigidbody_; }
      set {
        rigidbody_ = value;
      }
    }

    /// <summary>Field number for the "hinge_joint" field.</summary>
    public const int HingeJointFieldNumber = 802;
    private global::ProtoWorld.HingeJoint hingeJoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.HingeJoint HingeJoint {
      get { return hingeJoint_; }
      set {
        hingeJoint_ = value;
      }
    }

    /// <summary>Field number for the "wind" field.</summary>
    public const int WindFieldNumber = 901;
    private global::ProtoWorld.WindZone wind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.WindZone Wind {
      get { return wind_; }
      set {
        wind_ = value;
      }
    }

    /// <summary>Field number for the "audio_sources" field.</summary>
    public const int AudioSourcesFieldNumber = 1001;
    private static readonly pb::FieldCodec<global::ProtoWorld.AudioSource> _repeated_audioSources_codec
        = pb::FieldCodec.ForMessage(8010, global::ProtoWorld.AudioSource.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AudioSource> audioSources_ = new pbc::RepeatedField<global::ProtoWorld.AudioSource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AudioSource> AudioSources {
      get { return audioSources_; }
    }

    /// <summary>Field number for the "video_players" field.</summary>
    public const int VideoPlayersFieldNumber = 2001;
    private static readonly pb::FieldCodec<global::ProtoWorld.VideoPlayer> _repeated_videoPlayers_codec
        = pb::FieldCodec.ForMessage(16010, global::ProtoWorld.VideoPlayer.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.VideoPlayer> videoPlayers_ = new pbc::RepeatedField<global::ProtoWorld.VideoPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.VideoPlayer> VideoPlayers {
      get { return videoPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if (Enabled != other.Enabled) return false;
      if (Mask != other.Mask) return false;
      if (FrustumCulled != other.FrustumCulled) return false;
      if(!children_.Equals(other.children_)) return false;
      if (!object.Equals(Renderer, other.Renderer)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (Animation != other.Animation) return false;
      if(!animationClips_.Equals(other.animationClips_)) return false;
      if (AnimatorController != other.AnimatorController) return false;
      if (!object.Equals(Light, other.Light)) return false;
      if (Particle != other.Particle) return false;
      if(!scripts_.Equals(other.scripts_)) return false;
      if(!colliderBox_.Equals(other.colliderBox_)) return false;
      if(!colliderSphere_.Equals(other.colliderSphere_)) return false;
      if (!object.Equals(RectTransform, other.RectTransform)) return false;
      if (!object.Equals(CanvasRenderer, other.CanvasRenderer)) return false;
      if (!object.Equals(Canvas, other.Canvas)) return false;
      if (!object.Equals(Button, other.Button)) return false;
      if (!object.Equals(InputField, other.InputField)) return false;
      if (!object.Equals(Rigidbody, other.Rigidbody)) return false;
      if (!object.Equals(HingeJoint, other.HingeJoint)) return false;
      if (!object.Equals(Wind, other.Wind)) return false;
      if(!audioSources_.Equals(other.audioSources_)) return false;
      if(!videoPlayers_.Equals(other.videoPlayers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Mask != 0UL) hash ^= Mask.GetHashCode();
      if (FrustumCulled != false) hash ^= FrustumCulled.GetHashCode();
      hash ^= children_.GetHashCode();
      if (renderer_ != null) hash ^= Renderer.GetHashCode();
      if (camera_ != null) hash ^= Camera.GetHashCode();
      if (Animation.Length != 0) hash ^= Animation.GetHashCode();
      hash ^= animationClips_.GetHashCode();
      if (AnimatorController.Length != 0) hash ^= AnimatorController.GetHashCode();
      if (light_ != null) hash ^= Light.GetHashCode();
      if (Particle.Length != 0) hash ^= Particle.GetHashCode();
      hash ^= scripts_.GetHashCode();
      hash ^= colliderBox_.GetHashCode();
      hash ^= colliderSphere_.GetHashCode();
      if (rectTransform_ != null) hash ^= RectTransform.GetHashCode();
      if (canvasRenderer_ != null) hash ^= CanvasRenderer.GetHashCode();
      if (canvas_ != null) hash ^= Canvas.GetHashCode();
      if (button_ != null) hash ^= Button.GetHashCode();
      if (inputField_ != null) hash ^= InputField.GetHashCode();
      if (rigidbody_ != null) hash ^= Rigidbody.GetHashCode();
      if (hingeJoint_ != null) hash ^= HingeJoint.GetHashCode();
      if (wind_ != null) hash ^= Wind.GetHashCode();
      hash ^= audioSources_.GetHashCode();
      hash ^= videoPlayers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (transform_ != null) {
        output.WriteRawTag(202, 12);
        output.WriteMessage(Transform);
      }
      if (Enabled != false) {
        output.WriteRawTag(208, 12);
        output.WriteBool(Enabled);
      }
      if (Mask != 0UL) {
        output.WriteRawTag(216, 12);
        output.WriteUInt64(Mask);
      }
      if (FrustumCulled != false) {
        output.WriteRawTag(224, 12);
        output.WriteBool(FrustumCulled);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (renderer_ != null) {
        output.WriteRawTag(138, 25);
        output.WriteMessage(Renderer);
      }
      if (camera_ != null) {
        output.WriteRawTag(146, 25);
        output.WriteMessage(Camera);
      }
      if (Animation.Length != 0) {
        output.WriteRawTag(154, 25);
        output.WriteString(Animation);
      }
      if (light_ != null) {
        output.WriteRawTag(162, 25);
        output.WriteMessage(Light);
      }
      if (Particle.Length != 0) {
        output.WriteRawTag(170, 25);
        output.WriteString(Particle);
      }
      if (AnimatorController.Length != 0) {
        output.WriteRawTag(178, 25);
        output.WriteString(AnimatorController);
      }
      animationClips_.WriteTo(output, _repeated_animationClips_codec);
      scripts_.WriteTo(output, _repeated_scripts_codec);
      colliderBox_.WriteTo(output, _repeated_colliderBox_codec);
      colliderSphere_.WriteTo(output, _repeated_colliderSphere_codec);
      if (rectTransform_ != null) {
        output.WriteRawTag(234, 43);
        output.WriteMessage(RectTransform);
      }
      if (canvasRenderer_ != null) {
        output.WriteRawTag(242, 43);
        output.WriteMessage(CanvasRenderer);
      }
      if (canvas_ != null) {
        output.WriteRawTag(250, 43);
        output.WriteMessage(Canvas);
      }
      if (button_ != null) {
        output.WriteRawTag(130, 44);
        output.WriteMessage(Button);
      }
      if (inputField_ != null) {
        output.WriteRawTag(138, 44);
        output.WriteMessage(InputField);
      }
      if (rigidbody_ != null) {
        output.WriteRawTag(138, 50);
        output.WriteMessage(Rigidbody);
      }
      if (hingeJoint_ != null) {
        output.WriteRawTag(146, 50);
        output.WriteMessage(HingeJoint);
      }
      if (wind_ != null) {
        output.WriteRawTag(170, 56);
        output.WriteMessage(Wind);
      }
      audioSources_.WriteTo(output, _repeated_audioSources_codec);
      videoPlayers_.WriteTo(output, _repeated_videoPlayers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (transform_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (Mask != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Mask);
      }
      if (FrustumCulled != false) {
        size += 2 + 1;
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (renderer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Renderer);
      }
      if (camera_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (Animation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Animation);
      }
      size += animationClips_.CalculateSize(_repeated_animationClips_codec);
      if (AnimatorController.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AnimatorController);
      }
      if (light_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Light);
      }
      if (Particle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Particle);
      }
      size += scripts_.CalculateSize(_repeated_scripts_codec);
      size += colliderBox_.CalculateSize(_repeated_colliderBox_codec);
      size += colliderSphere_.CalculateSize(_repeated_colliderSphere_codec);
      if (rectTransform_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RectTransform);
      }
      if (canvasRenderer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanvasRenderer);
      }
      if (canvas_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Canvas);
      }
      if (button_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Button);
      }
      if (inputField_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputField);
      }
      if (rigidbody_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rigidbody);
      }
      if (hingeJoint_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HingeJoint);
      }
      if (wind_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Wind);
      }
      size += audioSources_.CalculateSize(_repeated_audioSources_codec);
      size += videoPlayers_.CalculateSize(_repeated_videoPlayers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entity other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          transform_ = new global::ProtoMath.transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Mask != 0UL) {
        Mask = other.Mask;
      }
      if (other.FrustumCulled != false) {
        FrustumCulled = other.FrustumCulled;
      }
      children_.Add(other.children_);
      if (other.renderer_ != null) {
        if (renderer_ == null) {
          renderer_ = new global::ProtoWorld.Renderer();
        }
        Renderer.MergeFrom(other.Renderer);
      }
      if (other.camera_ != null) {
        if (camera_ == null) {
          camera_ = new global::ProtoWorld.Camera();
        }
        Camera.MergeFrom(other.Camera);
      }
      if (other.Animation.Length != 0) {
        Animation = other.Animation;
      }
      animationClips_.Add(other.animationClips_);
      if (other.AnimatorController.Length != 0) {
        AnimatorController = other.AnimatorController;
      }
      if (other.light_ != null) {
        if (light_ == null) {
          light_ = new global::ProtoWorld.Light();
        }
        Light.MergeFrom(other.Light);
      }
      if (other.Particle.Length != 0) {
        Particle = other.Particle;
      }
      scripts_.Add(other.scripts_);
      colliderBox_.Add(other.colliderBox_);
      colliderSphere_.Add(other.colliderSphere_);
      if (other.rectTransform_ != null) {
        if (rectTransform_ == null) {
          rectTransform_ = new global::ProtoMath.RectTransform();
        }
        RectTransform.MergeFrom(other.RectTransform);
      }
      if (other.canvasRenderer_ != null) {
        if (canvasRenderer_ == null) {
          canvasRenderer_ = new global::ProtoGui.CanvasRenderer();
        }
        CanvasRenderer.MergeFrom(other.CanvasRenderer);
      }
      if (other.canvas_ != null) {
        if (canvas_ == null) {
          canvas_ = new global::ProtoGui.Canvas();
        }
        Canvas.MergeFrom(other.Canvas);
      }
      if (other.button_ != null) {
        if (button_ == null) {
          button_ = new global::ProtoGui.Button();
        }
        Button.MergeFrom(other.Button);
      }
      if (other.inputField_ != null) {
        if (inputField_ == null) {
          inputField_ = new global::ProtoGui.InputField();
        }
        InputField.MergeFrom(other.InputField);
      }
      if (other.rigidbody_ != null) {
        if (rigidbody_ == null) {
          rigidbody_ = new global::ProtoWorld.Rigidbody();
        }
        Rigidbody.MergeFrom(other.Rigidbody);
      }
      if (other.hingeJoint_ != null) {
        if (hingeJoint_ == null) {
          hingeJoint_ = new global::ProtoWorld.HingeJoint();
        }
        HingeJoint.MergeFrom(other.HingeJoint);
      }
      if (other.wind_ != null) {
        if (wind_ == null) {
          wind_ = new global::ProtoWorld.WindZone();
        }
        Wind.MergeFrom(other.Wind);
      }
      audioSources_.Add(other.audioSources_);
      videoPlayers_.Add(other.videoPlayers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            if (transform_ == null) {
              transform_ = new global::ProtoMath.transform();
            }
            input.ReadMessage(transform_);
            break;
          }
          case 1616: {
            Enabled = input.ReadBool();
            break;
          }
          case 1624: {
            Mask = input.ReadUInt64();
            break;
          }
          case 1632: {
            FrustumCulled = input.ReadBool();
            break;
          }
          case 2410: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 3210: {
            if (renderer_ == null) {
              renderer_ = new global::ProtoWorld.Renderer();
            }
            input.ReadMessage(renderer_);
            break;
          }
          case 3218: {
            if (camera_ == null) {
              camera_ = new global::ProtoWorld.Camera();
            }
            input.ReadMessage(camera_);
            break;
          }
          case 3226: {
            Animation = input.ReadString();
            break;
          }
          case 3234: {
            if (light_ == null) {
              light_ = new global::ProtoWorld.Light();
            }
            input.ReadMessage(light_);
            break;
          }
          case 3242: {
            Particle = input.ReadString();
            break;
          }
          case 3250: {
            AnimatorController = input.ReadString();
            break;
          }
          case 3258: {
            animationClips_.AddEntriesFrom(input, _repeated_animationClips_codec);
            break;
          }
          case 4010: {
            scripts_.AddEntriesFrom(input, _repeated_scripts_codec);
            break;
          }
          case 4810: {
            colliderBox_.AddEntriesFrom(input, _repeated_colliderBox_codec);
            break;
          }
          case 4818: {
            colliderSphere_.AddEntriesFrom(input, _repeated_colliderSphere_codec);
            break;
          }
          case 5610: {
            if (rectTransform_ == null) {
              rectTransform_ = new global::ProtoMath.RectTransform();
            }
            input.ReadMessage(rectTransform_);
            break;
          }
          case 5618: {
            if (canvasRenderer_ == null) {
              canvasRenderer_ = new global::ProtoGui.CanvasRenderer();
            }
            input.ReadMessage(canvasRenderer_);
            break;
          }
          case 5626: {
            if (canvas_ == null) {
              canvas_ = new global::ProtoGui.Canvas();
            }
            input.ReadMessage(canvas_);
            break;
          }
          case 5634: {
            if (button_ == null) {
              button_ = new global::ProtoGui.Button();
            }
            input.ReadMessage(button_);
            break;
          }
          case 5642: {
            if (inputField_ == null) {
              inputField_ = new global::ProtoGui.InputField();
            }
            input.ReadMessage(inputField_);
            break;
          }
          case 6410: {
            if (rigidbody_ == null) {
              rigidbody_ = new global::ProtoWorld.Rigidbody();
            }
            input.ReadMessage(rigidbody_);
            break;
          }
          case 6418: {
            if (hingeJoint_ == null) {
              hingeJoint_ = new global::ProtoWorld.HingeJoint();
            }
            input.ReadMessage(hingeJoint_);
            break;
          }
          case 7210: {
            if (wind_ == null) {
              wind_ = new global::ProtoWorld.WindZone();
            }
            input.ReadMessage(wind_);
            break;
          }
          case 8010: {
            audioSources_.AddEntriesFrom(input, _repeated_audioSources_codec);
            break;
          }
          case 16010: {
            videoPlayers_.AddEntriesFrom(input, _repeated_videoPlayers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
