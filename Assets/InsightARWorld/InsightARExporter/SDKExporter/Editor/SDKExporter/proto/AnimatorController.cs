// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animator_controller.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtoWorld {

  /// <summary>Holder for reflection information generated from animator_controller.proto</summary>
  public static partial class AnimatorControllerReflection {

    #region Descriptor
    /// <summary>File descriptor for animator_controller.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnimatorControllerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlhbmltYXRvcl9jb250cm9sbGVyLnByb3RvEgtwcm90b193b3JsZCJsChFB",
            "bmltYXRvckNvbmRpdGlvbhIzCgRtb2RlGMkBIAEoDjIkLnByb3RvX3dvcmxk",
            "LkFOSU1BVE9SX0NPTkRJVElPTl9NT0RFEg4KBXBhcmFtGMoBIAEoBRISCgl0",
            "aHJlc2hvbGQYywEgASgCIugBChJBbmltYXRvclRyYW5zaXRpb24SDAoEbmFt",
            "ZRhlIAEoCRIbChJkZXN0X3N0YXRlX21hY2hpbmUYyQEgASgJEhMKCmRlc3Rf",
            "c3RhdGUYygEgASgJEhkKEGRlc3RfdGltZV9vZmZzZXQYrgIgASgCEh8KFnRy",
            "YW5zaXRpb25fdGltZV9vZmZzZXQYrwIgASgCEiEKGHRyYW5zaXRpb25fdGlt",
            "ZV9kdXJhdGlvbhiwAiABKAISMwoKY29uZGl0aW9ucxiRAyADKAsyHi5wcm90",
            "b193b3JsZC5BbmltYXRvckNvbmRpdGlvbiKJAQoNQW5pbWF0b3JTdGF0ZRIM",
            "CgRuYW1lGGUgASgJEhIKCWFuaW1hdGlvbhjJASABKAkSDgoFc3BlZWQYygEg",
            "ASgCEg8KBnJldmVydBjLASABKAgSNQoLdHJhbnNpdGlvbnMYrQIgAygLMh8u",
            "cHJvdG9fd29ybGQuQW5pbWF0b3JUcmFuc2l0aW9uIqYBChRBbmltYXRvclN0",
            "YXRlTWFjaGluZRIMCgRuYW1lGGUgASgJEhYKDWRlZmF1bHRfc3RhdGUYyQEg",
            "ASgJEjsKEWVudHJ5X3RyYW5zaXRpb25zGMoBIAMoCzIfLnByb3RvX3dvcmxk",
            "LkFuaW1hdG9yVHJhbnNpdGlvbhIrCgZzdGF0ZXMYrQIgAygLMhoucHJvdG9f",
            "d29ybGQuQW5pbWF0b3JTdGF0ZSI1Cg1BbmltYXRvckxheWVyEgwKBG5hbWUY",
            "ZSABKAkSFgoNc3RhdGVfbWFjaGluZRjJASABKAkiNQoNQW5pbWF0b3JQYXJh",
            "bRIMCgRuYW1lGGUgASgJEhYKDWRlZmF1bHRfdmFsdWUYyQEgASgCIrgBChJB",
            "bmltYXRvckNvbnRyb2xsZXISDAoEbmFtZRhlIAEoCRIrCgZwYXJhbXMY0wEg",
            "AygLMhoucHJvdG9fd29ybGQuQW5pbWF0b3JQYXJhbRI6Cg5zdGF0ZV9tYWNo",
            "aW5lcxitAiADKAsyIS5wcm90b193b3JsZC5BbmltYXRvclN0YXRlTWFjaGlu",
            "ZRIrCgZsYXllcnMYrgIgAygLMhoucHJvdG9fd29ybGQuQW5pbWF0b3JMYXll",
            "ciqSAgoXQU5JTUFUT1JfQ09ORElUSU9OX01PREUSHgoaQU5JTUFUT1JfQ09O",
            "RElUSU9OX01PREVfSUYQABIiCh5BTklNQVRPUl9DT05ESVRJT05fTU9ERV9J",
            "Rl9OT1QQARIjCh9BTklNQVRPUl9DT05ESVRJT05fTU9ERV9HUkVBVEVSEAIS",
            "IAocQU5JTUFUT1JfQ09ORElUSU9OX01PREVfTEVTUxADEiIKHkFOSU1BVE9S",
            "X0NPTkRJVElPTl9NT0RFX0VRVUFMUxAEEiUKIUFOSU1BVE9SX0NPTkRJVElP",
            "Tl9NT0RFX05PVF9FUVVBTBAFEiEKHUFOSU1BVE9SX0NPTkRJVElPTl9NT0RF",
            "X0NPVU5UEAZCAkgDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtoWorld.ANIMATOR_CONDITION_MODE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorCondition), global::ProtoWorld.AnimatorCondition.Parser, new[]{ "Mode", "Param", "Threshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorTransition), global::ProtoWorld.AnimatorTransition.Parser, new[]{ "Name", "DestStateMachine", "DestState", "DestTimeOffset", "TransitionTimeOffset", "TransitionTimeDuration", "Conditions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorState), global::ProtoWorld.AnimatorState.Parser, new[]{ "Name", "Animation", "Speed", "Revert", "Transitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorStateMachine), global::ProtoWorld.AnimatorStateMachine.Parser, new[]{ "Name", "DefaultState", "EntryTransitions", "States" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorLayer), global::ProtoWorld.AnimatorLayer.Parser, new[]{ "Name", "StateMachine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorParam), global::ProtoWorld.AnimatorParam.Parser, new[]{ "Name", "DefaultValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtoWorld.AnimatorController), global::ProtoWorld.AnimatorController.Parser, new[]{ "Name", "Params", "StateMachines", "Layers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ANIMATOR_CONDITION_MODE {
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_IF")] If = 0,
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_IF_NOT")] IfNot = 1,
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_GREATER")] Greater = 2,
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_LESS")] Less = 3,
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_EQUALS")] Equals = 4,
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_NOT_EQUAL")] NotEqual = 5,
    [pbr::OriginalName("ANIMATOR_CONDITION_MODE_COUNT")] Count = 6,
  }

  #endregion

  #region Messages
  public sealed partial class AnimatorCondition : pb::IMessage<AnimatorCondition> {
    private static readonly pb::MessageParser<AnimatorCondition> _parser = new pb::MessageParser<AnimatorCondition>(() => new AnimatorCondition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorCondition(AnimatorCondition other) : this() {
      mode_ = other.mode_;
      param_ = other.param_;
      threshold_ = other.threshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorCondition Clone() {
      return new AnimatorCondition(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 201;
    private global::ProtoWorld.ANIMATOR_CONDITION_MODE mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtoWorld.ANIMATOR_CONDITION_MODE Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 202;
    private int param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 203;
    private float threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Param != other.Param) return false;
      if (Threshold != other.Threshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      if (Threshold != 0F) hash ^= Threshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(200, 12);
        output.WriteEnum((int) Mode);
      }
      if (Param != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(Param);
      }
      if (Threshold != 0F) {
        output.WriteRawTag(221, 12);
        output.WriteFloat(Threshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Param != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      if (Threshold != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorCondition other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      if (other.Threshold != 0F) {
        Threshold = other.Threshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 1608: {
            mode_ = (global::ProtoWorld.ANIMATOR_CONDITION_MODE) input.ReadEnum();
            break;
          }
          case 1616: {
            Param = input.ReadInt32();
            break;
          }
          case 1629: {
            Threshold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimatorTransition : pb::IMessage<AnimatorTransition> {
    private static readonly pb::MessageParser<AnimatorTransition> _parser = new pb::MessageParser<AnimatorTransition>(() => new AnimatorTransition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorTransition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorTransition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorTransition(AnimatorTransition other) : this() {
      name_ = other.name_;
      destStateMachine_ = other.destStateMachine_;
      destState_ = other.destState_;
      destTimeOffset_ = other.destTimeOffset_;
      transitionTimeOffset_ = other.transitionTimeOffset_;
      transitionTimeDuration_ = other.transitionTimeDuration_;
      conditions_ = other.conditions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorTransition Clone() {
      return new AnimatorTransition(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_state_machine" field.</summary>
    public const int DestStateMachineFieldNumber = 201;
    private string destStateMachine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestStateMachine {
      get { return destStateMachine_; }
      set {
        destStateMachine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_state" field.</summary>
    public const int DestStateFieldNumber = 202;
    private string destState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestState {
      get { return destState_; }
      set {
        destState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_time_offset" field.</summary>
    public const int DestTimeOffsetFieldNumber = 302;
    private float destTimeOffset_;
    /// <summary>
    /// if transits to a state machine, the dest state is uncertain(dest_state=""),
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestTimeOffset {
      get { return destTimeOffset_; }
      set {
        destTimeOffset_ = value;
      }
    }

    /// <summary>Field number for the "transition_time_offset" field.</summary>
    public const int TransitionTimeOffsetFieldNumber = 303;
    private float transitionTimeOffset_;
    /// <summary>
    /// dest_time_offset is normalized.
    /// otherwise dest_time_offset is a time offset in dest state timespace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransitionTimeOffset {
      get { return transitionTimeOffset_; }
      set {
        transitionTimeOffset_ = value;
      }
    }

    /// <summary>Field number for the "transition_time_duration" field.</summary>
    public const int TransitionTimeDurationFieldNumber = 304;
    private float transitionTimeDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransitionTimeDuration {
      get { return transitionTimeDuration_; }
      set {
        transitionTimeDuration_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 401;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorCondition> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(3210, global::ProtoWorld.AnimatorCondition.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorCondition> conditions_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorCondition>();
    /// <summary>
    /// conditions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorCondition> Conditions {
      get { return conditions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorTransition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorTransition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DestStateMachine != other.DestStateMachine) return false;
      if (DestState != other.DestState) return false;
      if (DestTimeOffset != other.DestTimeOffset) return false;
      if (TransitionTimeOffset != other.TransitionTimeOffset) return false;
      if (TransitionTimeDuration != other.TransitionTimeDuration) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DestStateMachine.Length != 0) hash ^= DestStateMachine.GetHashCode();
      if (DestState.Length != 0) hash ^= DestState.GetHashCode();
      if (DestTimeOffset != 0F) hash ^= DestTimeOffset.GetHashCode();
      if (TransitionTimeOffset != 0F) hash ^= TransitionTimeOffset.GetHashCode();
      if (TransitionTimeDuration != 0F) hash ^= TransitionTimeDuration.GetHashCode();
      hash ^= conditions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (DestStateMachine.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(DestStateMachine);
      }
      if (DestState.Length != 0) {
        output.WriteRawTag(210, 12);
        output.WriteString(DestState);
      }
      if (DestTimeOffset != 0F) {
        output.WriteRawTag(245, 18);
        output.WriteFloat(DestTimeOffset);
      }
      if (TransitionTimeOffset != 0F) {
        output.WriteRawTag(253, 18);
        output.WriteFloat(TransitionTimeOffset);
      }
      if (TransitionTimeDuration != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(TransitionTimeDuration);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DestStateMachine.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestStateMachine);
      }
      if (DestState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestState);
      }
      if (DestTimeOffset != 0F) {
        size += 2 + 4;
      }
      if (TransitionTimeOffset != 0F) {
        size += 2 + 4;
      }
      if (TransitionTimeDuration != 0F) {
        size += 2 + 4;
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorTransition other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DestStateMachine.Length != 0) {
        DestStateMachine = other.DestStateMachine;
      }
      if (other.DestState.Length != 0) {
        DestState = other.DestState;
      }
      if (other.DestTimeOffset != 0F) {
        DestTimeOffset = other.DestTimeOffset;
      }
      if (other.TransitionTimeOffset != 0F) {
        TransitionTimeOffset = other.TransitionTimeOffset;
      }
      if (other.TransitionTimeDuration != 0F) {
        TransitionTimeDuration = other.TransitionTimeDuration;
      }
      conditions_.Add(other.conditions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            DestStateMachine = input.ReadString();
            break;
          }
          case 1618: {
            DestState = input.ReadString();
            break;
          }
          case 2421: {
            DestTimeOffset = input.ReadFloat();
            break;
          }
          case 2429: {
            TransitionTimeOffset = input.ReadFloat();
            break;
          }
          case 2437: {
            TransitionTimeDuration = input.ReadFloat();
            break;
          }
          case 3210: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimatorState : pb::IMessage<AnimatorState> {
    private static readonly pb::MessageParser<AnimatorState> _parser = new pb::MessageParser<AnimatorState>(() => new AnimatorState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorState(AnimatorState other) : this() {
      name_ = other.name_;
      animation_ = other.animation_;
      speed_ = other.speed_;
      revert_ = other.revert_;
      transitions_ = other.transitions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorState Clone() {
      return new AnimatorState(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 201;
    private string animation_ = "";
    /// <summary>
    /// animation clip name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Animation {
      get { return animation_; }
      set {
        animation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 202;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "revert" field.</summary>
    public const int RevertFieldNumber = 203;
    private bool revert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Revert {
      get { return revert_; }
      set {
        revert_ = value;
      }
    }

    /// <summary>Field number for the "transitions" field.</summary>
    public const int TransitionsFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorTransition> _repeated_transitions_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.AnimatorTransition.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorTransition> transitions_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorTransition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorTransition> Transitions {
      get { return transitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Animation != other.Animation) return false;
      if (Speed != other.Speed) return false;
      if (Revert != other.Revert) return false;
      if(!transitions_.Equals(other.transitions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Animation.Length != 0) hash ^= Animation.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Revert != false) hash ^= Revert.GetHashCode();
      hash ^= transitions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Animation.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(Animation);
      }
      if (Speed != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(Speed);
      }
      if (Revert != false) {
        output.WriteRawTag(216, 12);
        output.WriteBool(Revert);
      }
      transitions_.WriteTo(output, _repeated_transitions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Animation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Animation);
      }
      if (Speed != 0F) {
        size += 2 + 4;
      }
      if (Revert != false) {
        size += 2 + 1;
      }
      size += transitions_.CalculateSize(_repeated_transitions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorState other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Animation.Length != 0) {
        Animation = other.Animation;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Revert != false) {
        Revert = other.Revert;
      }
      transitions_.Add(other.transitions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            Animation = input.ReadString();
            break;
          }
          case 1621: {
            Speed = input.ReadFloat();
            break;
          }
          case 1624: {
            Revert = input.ReadBool();
            break;
          }
          case 2410: {
            transitions_.AddEntriesFrom(input, _repeated_transitions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimatorStateMachine : pb::IMessage<AnimatorStateMachine> {
    private static readonly pb::MessageParser<AnimatorStateMachine> _parser = new pb::MessageParser<AnimatorStateMachine>(() => new AnimatorStateMachine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorStateMachine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorStateMachine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorStateMachine(AnimatorStateMachine other) : this() {
      name_ = other.name_;
      defaultState_ = other.defaultState_;
      entryTransitions_ = other.entryTransitions_.Clone();
      states_ = other.states_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorStateMachine Clone() {
      return new AnimatorStateMachine(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_state" field.</summary>
    public const int DefaultStateFieldNumber = 201;
    private string defaultState_ = "";
    /// <summary>
    /// default state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultState {
      get { return defaultState_; }
      set {
        defaultState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entry_transitions" field.</summary>
    public const int EntryTransitionsFieldNumber = 202;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorTransition> _repeated_entryTransitions_codec
        = pb::FieldCodec.ForMessage(1618, global::ProtoWorld.AnimatorTransition.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorTransition> entryTransitions_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorTransition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorTransition> EntryTransitions {
      get { return entryTransitions_; }
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorState> _repeated_states_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.AnimatorState.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorState> states_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorState>();
    /// <summary>
    /// state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorState> States {
      get { return states_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorStateMachine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorStateMachine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DefaultState != other.DefaultState) return false;
      if(!entryTransitions_.Equals(other.entryTransitions_)) return false;
      if(!states_.Equals(other.states_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DefaultState.Length != 0) hash ^= DefaultState.GetHashCode();
      hash ^= entryTransitions_.GetHashCode();
      hash ^= states_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (DefaultState.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(DefaultState);
      }
      entryTransitions_.WriteTo(output, _repeated_entryTransitions_codec);
      states_.WriteTo(output, _repeated_states_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DefaultState.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DefaultState);
      }
      size += entryTransitions_.CalculateSize(_repeated_entryTransitions_codec);
      size += states_.CalculateSize(_repeated_states_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorStateMachine other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DefaultState.Length != 0) {
        DefaultState = other.DefaultState;
      }
      entryTransitions_.Add(other.entryTransitions_);
      states_.Add(other.states_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            DefaultState = input.ReadString();
            break;
          }
          case 1618: {
            entryTransitions_.AddEntriesFrom(input, _repeated_entryTransitions_codec);
            break;
          }
          case 2410: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimatorLayer : pb::IMessage<AnimatorLayer> {
    private static readonly pb::MessageParser<AnimatorLayer> _parser = new pb::MessageParser<AnimatorLayer>(() => new AnimatorLayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorLayer(AnimatorLayer other) : this() {
      name_ = other.name_;
      stateMachine_ = other.stateMachine_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorLayer Clone() {
      return new AnimatorLayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_machine" field.</summary>
    public const int StateMachineFieldNumber = 201;
    private string stateMachine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateMachine {
      get { return stateMachine_; }
      set {
        stateMachine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (StateMachine != other.StateMachine) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StateMachine.Length != 0) hash ^= StateMachine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (StateMachine.Length != 0) {
        output.WriteRawTag(202, 12);
        output.WriteString(StateMachine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StateMachine.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StateMachine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorLayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StateMachine.Length != 0) {
        StateMachine = other.StateMachine;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1610: {
            StateMachine = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimatorParam : pb::IMessage<AnimatorParam> {
    private static readonly pb::MessageParser<AnimatorParam> _parser = new pb::MessageParser<AnimatorParam>(() => new AnimatorParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorParam(AnimatorParam other) : this() {
      name_ = other.name_;
      defaultValue_ = other.defaultValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorParam Clone() {
      return new AnimatorParam(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 201;
    private float defaultValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (DefaultValue != other.DefaultValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DefaultValue != 0F) hash ^= DefaultValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (DefaultValue != 0F) {
        output.WriteRawTag(205, 12);
        output.WriteFloat(DefaultValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DefaultValue != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorParam other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DefaultValue != 0F) {
        DefaultValue = other.DefaultValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1613: {
            DefaultValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimatorController : pb::IMessage<AnimatorController> {
    private static readonly pb::MessageParser<AnimatorController> _parser = new pb::MessageParser<AnimatorController>(() => new AnimatorController());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimatorController> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtoWorld.AnimatorControllerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorController() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorController(AnimatorController other) : this() {
      name_ = other.name_;
      params_ = other.params_.Clone();
      stateMachines_ = other.stateMachines_.Clone();
      layers_ = other.layers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimatorController Clone() {
      return new AnimatorController(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 211;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorParam> _repeated_params_codec
        = pb::FieldCodec.ForMessage(1690, global::ProtoWorld.AnimatorParam.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorParam> params_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorParam>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorParam> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "state_machines" field.</summary>
    public const int StateMachinesFieldNumber = 301;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorStateMachine> _repeated_stateMachines_codec
        = pb::FieldCodec.ForMessage(2410, global::ProtoWorld.AnimatorStateMachine.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorStateMachine> stateMachines_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorStateMachine>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorStateMachine> StateMachines {
      get { return stateMachines_; }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 302;
    private static readonly pb::FieldCodec<global::ProtoWorld.AnimatorLayer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(2418, global::ProtoWorld.AnimatorLayer.Parser);
    private readonly pbc::RepeatedField<global::ProtoWorld.AnimatorLayer> layers_ = new pbc::RepeatedField<global::ProtoWorld.AnimatorLayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtoWorld.AnimatorLayer> Layers {
      get { return layers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimatorController);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimatorController other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!params_.Equals(other.params_)) return false;
      if(!stateMachines_.Equals(other.stateMachines_)) return false;
      if(!layers_.Equals(other.layers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= params_.GetHashCode();
      hash ^= stateMachines_.GetHashCode();
      hash ^= layers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      params_.WriteTo(output, _repeated_params_codec);
      stateMachines_.WriteTo(output, _repeated_stateMachines_codec);
      layers_.WriteTo(output, _repeated_layers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      size += stateMachines_.CalculateSize(_repeated_stateMachines_codec);
      size += layers_.CalculateSize(_repeated_layers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimatorController other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      params_.Add(other.params_);
      stateMachines_.Add(other.stateMachines_);
      layers_.Add(other.layers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 1690: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 2410: {
            stateMachines_.AddEntriesFrom(input, _repeated_stateMachines_codec);
            break;
          }
          case 2418: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
